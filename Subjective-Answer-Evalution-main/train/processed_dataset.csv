id,question,desired_answer,student_answer,score_me,score_other,score_avg,wmd_score,cosine_similarity
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,high risk problem address prototype program make sure program feasible prototype may also used show company software possibly programmed,4.0,3.0,3.5,1.187336332708295,0.07593613519629201
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,simulate portion desired final product quick easy program small specific job way help see problem may solve final project,5.0,5.0,5.0,1.0019995395205423,0.3059182700927912
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,prototype program simulates behavior portion desired software product allow error checking,5.0,3.0,4.0,0.7601985090659809,0.4724667635369242
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,defined specification phase prototype stimulates behavior portion desired software product meaning role prototype temporary solution program refined used extensively problem solving,5.0,5.0,5.0,1.0132896904620465,0.29999150204792496
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,used let user first idea completed program allow client evaluate program generate much feedback including software specification project estimation total project,3.0,3.0,3.0,1.1843055756142045,0.06505632235194592
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,find problem error program finalized,2.0,2.0,2.0,1.2824260633525417,0.0
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,address major issue creation program way account possible bug program possible prove program tangible,3.0,2.0,2.5,1.2658989364106865,0.0
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,break whole program prototype program simulate part final program,5.0,5.0,5.0,1.1179227151280018,0.1255936549929934
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,name,5.0,2.0,3.5,1.3833379118840725,0.0
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,simulating behavior portion desired software product,5.0,5.0,5.0,0.33417448390334287,0.5830559977262657
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,program stimulates behavior portion desired software product,5.0,5.0,5.0,0.5504746887209158,0.5710035612681829
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,program simulates behavior portion desired software product,5.0,5.0,5.0,0.4742671127443251,0.5870637494084254
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,lay basic give starting point actual problem solving,2.0,2.0,2.0,1.2967657654088713,0.0
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,simulate problem solving part problem,4.0,5.0,4.5,1.0342246204528536,0.16953533784483057
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,prototype program provides basic groundwork enhance improve solution problem,2.0,2.0,2.0,1.2439805855053458,0.0
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,prototype program part specification phase software problem solvin employed illustrate key problem problem solved program sometimes serf base program expand upon,4.0,5.0,4.5,1.1979809693772172,0.06621545427515192
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,program simulates behavior portion desired software product,5.0,5.0,5.0,0.4742671127443251,0.5870637494084254
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,provides limited proof concept verify client actually programming whole application,2.0,2.0,2.0,1.2341024911510363,0.0
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,test main function program leaving finer detail,2.0,2.0,2.0,1.2774061746220289,0.0
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,get early feedback user early stage development show user first idea program like make sure program meet requirement intense programming begin,3.0,2.0,2.5,1.260502613571724,0.0
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,simulates behavior portion desired software product,5.0,5.0,5.0,0.3429642991109716,0.609642733079069
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,simulates behavior portion desired software product,5.0,5.0,5.0,0.3429642991109716,0.609642733079069
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,prototype program used problem solving collect data problem,1.0,2.0,1.5,1.2570065222274371,0.0
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,ease understanding problem discussion ease understanding program,2.0,3.0,2.5,1.2884401002019825,0.0
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,simulates behavior portion desired software product,5.0,5.0,5.0,0.3429642991109716,0.609642733079069
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,role prototype program help spot key problem may arise actual programing,2.0,2.0,2.0,1.2629037447639322,0.0
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,prototype program give general idea end product without time effort write entire program,4.0,2.0,3.0,1.1765803227613367,0.10262380847452113
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,show certain part program work supposed,4.0,2.0,3.0,1.2482210492635952,0.0
1.1,What is the role of a prototype program in problem solving?,simulate behaviour portion desired software product,prototype programming approach programming enables one take organized approach developing effective program minimal error strategic pattern solving problem book gave example costumer withdrawing money bank approach taking pseudo code level lvl proceeding creating solution,3.0,2.0,2.5,1.273620394674187,0.0
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,refining possibly design testing phase reveals problem design production affected program unworkable current form lead later production time originally estimated also affect coding testing may need rewrite code program remove error,5.0,2.0,3.5,1.082284711561406,0.16388287613598818
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,implementation phase maintenance phase effected,3.0,5.0,4.0,1.0214548448049905,0.32552883746892697
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,verification coding refining solution maintenance influenced testing stage,4.0,5.0,4.5,0.7881976606950315,0.4360163605595999
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,rup stage software life cycle influenced testing stage elaboration refined progject vision iterative devilopment core system development system requirement accurate time cost estimate construction iterative development remaining system transition deployment system,2.0,4.0,3.0,1.0734185784126944,0.18511750413008637
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,refining solution production maintenance influenced testing stage,3.0,3.0,3.0,0.8568466086658729,0.37997422199175046
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,elaboration construction transition affected testing,2.0,2.0,2.0,1.1773655006548547,0.07876994635040305
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,refining production maintenance,3.0,4.0,3.5,1.2734559610598881,0.0
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,refining solution,3.0,5.0,4.0,1.214271282071823,0.12431895633152092
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,name,3.0,1.0,2.0,1.3847828942603242,0.0
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,refining coding,5.0,5.0,5.0,1.2043439006148033,0.15283930315290398
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,second half elaboration phase construction phase transition phase,2.0,3.0,2.5,1.0228488262752284,0.35867750680350363
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,refining step production step maintenance stage,3.0,4.0,3.5,1.0411928354772353,0.24407772465122027
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,elaboration construction transition,2.0,2.0,2.0,1.2876727039938034,0.0
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,refining,3.0,3.0,3.0,1.3252908209618397,0.0
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,testing stage direct influence final version program debugging finalization software revision,2.0,1.0,1.5,0.9086684394893955,0.2952211853292033
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,directly refining coding refining right testing phase coding right testing phase indirectly production maintenance refining occurs last two stage software life cycle,5.0,5.0,5.0,0.8679123864388776,0.414797698645974
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,testing refining production maintenance,3.0,4.0,3.5,1.1609716712124944,0.10195464839472083
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,depending work done testing spread throughout process prevent error showing later due lack foresight,2.0,1.0,1.5,1.1957387029186541,0.04843106458055236
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,elaboration construction transition,2.0,3.0,2.5,1.2876727039938034,0.0
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,stage influenced except setting program requirement test fails change whole design implementation etc program well final outcome,2.0,1.0,1.5,1.123820348634129,0.14379640140010028
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,refining production maintenance,3.0,3.0,3.0,1.2734559610598881,0.0
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,coding refining,5.0,5.0,5.0,1.2043439006148033,0.15283930315290398
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,refining production maintenance,3.0,4.0,3.5,1.2734559610598881,0.0
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,removing logical error testing valid data random data actual data,2.0,0.0,1.0,1.1915204983485015,0.06275764555039187
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,specification design risk analysis verification coding testing refining production maintenance,1.0,4.0,2.5,1.0608910833413416,0.11859824964603663
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,refining stage production stage maintenance stage,3.0,4.0,3.5,0.9401509514957558,0.587338779341068
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,testing could affect part life cycle could make go back specification test well,2.0,2.0,2.0,1.1627823232790746,0.05287128540185013
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,coding,3.0,3.0,3.0,1.2541447189918895,0.23451963659727249
1.2,What stages in the software life cycle are influenced by the testing stage?,testing stage influence coding stage phase 5 solution refinement stage phase 7,individual component step analysis design implementing code well entire system tested execution requirement identified analysis stage main output,1.0,2.0,1.5,1.1491314293273962,0.1271553057055217
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,modularability ability reuse part program later another program sometimes completely different goal program also make easier debug code dividing code class specific job program fails one job one class debug good security purpose allows let someone use program sort list without give access source code also allows use inheritance polymorphism,4.0,5.0,4.5,1.3152645769948128,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,type programming flexible making easier add modify program also type fail safe program check individual module eliminates redundant code make program easier read programmer debugging program easier track source problem within module rather 2 million line program,5.0,5.0,5.0,1.3200782034912462,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,main advantage programming existing class reused program maintenance verification easier,3.0,4.0,3.5,1.2935255137230892,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,advantage oop allows u build class object three principle make oop object combine data operation class inherit property class object determine appropriate operation execution time,2.0,3.0,2.5,1.3214163396211538,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,advantage existing class reused program maintenance verification easier accomplish,3.0,4.0,3.5,1.2912892149668356,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,object oriented programming allows programmer use object class changed manipulated affecting entire object class hold attrubutes affect object,1.0,1.0,1.0,1.2905666271097596,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,reusable component extensibility maintainability reduces large problem smaller manageable problem,4.0,4.0,4.0,1.2050268791825078,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,combine data operation class inherit property class object determine appropriate operation execution time,2.0,3.0,2.5,1.3311254337747624,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,name,3.0,3.0,3.0,1.3969628338666262,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,ease maintenance,3.0,5.0,4.0,1.269346507941599,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,one main advantage hide inner detail technique known encapsulation object combine data operation see work another advantage reuse class defined earlier program method known inheritance finally another advantage object determine appropriate operation execution time technique known polymorphism,5.0,5.0,5.0,1.3124366022979033,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,existing class reused program maintenance verification easier,3.0,4.0,3.5,1.281883530578433,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,using different module allows easier debugging,2.0,2.0,2.0,1.255277151242594,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,data encapsulation concept use function method manipulate data,3.0,4.0,3.5,1.2599740783363798,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,modular reusable code allowing faster deployment solution general view solution,5.0,4.0,4.5,1.2347981043580287,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,coding debugging program usually easier either compiler specify object working incorrectly function object assigned easier identify code also look organized easier read help avoid redundant coding maintenance also easier also module reused several time program without much hassle abstraction art breaking one big problem smaller simpler problem solving many smaller problem shared unique complex problem creating module solve smaller repeated problem save time encounter,5.0,5.0,5.0,1.2819669379376633,0.0647114243790409
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,variable remain private code easily modified reusable well easily implemented mention easier read follow along observer,4.0,5.0,4.5,1.301415266153647,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,data abstraction control possible isolate element element lot easier prevent tampering data,3.0,4.0,3.5,1.1965248860898021,0.18218405804858623
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,encapsulation object use operation without knowing operation work inheritance cut redundancy reusing earlier class polymorphism object select correct operation use situation,5.0,3.0,4.0,1.2824964536842776,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,make easier reuse adapt previously written code separate complex program smaller easier understand class,5.0,4.0,4.5,1.3001282501033606,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,existing class reused program maintenance verification easier,3.0,4.0,3.5,1.281883530578433,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,existing class feused program maintenance verification easier,3.0,4.0,3.5,1.305392027192085,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,main advantage programming data abstraction easier maintenance,5.0,5.0,5.0,1.113721971654531,0.2766047041209066
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,existing class reused program maintenance verification easy,3.0,5.0,4.0,1.279774626339719,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,existing class reused program maintenance verification easier,3.0,4.0,3.5,1.281883530578433,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,information hidden easier debug programming easier manageable,3.0,4.0,3.5,1.2833919996941874,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,existing class reused program maintenance verification easier,3.0,4.0,3.5,1.281883530578433,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,existing class reused program maintenance verification easier,3.0,4.0,3.5,1.281883530578433,0.0
1.3,What are the main advantages associated with object-oriented programming?,abstraction reusability,well one encapsulation value variable inside object private unless method written pas info outside object well inheritance subclass inherits variable method super class example book included obj clock obj alarm would still use clock first class,3.0,4.0,3.5,1.3203433801661657,0.0
1.4,Where do C++ programs begin to execute?,main function,function int main,5.0,5.0,5.0,0.4463064773415867,0.6468830755329312
1.4,Where do C++ programs begin to execute?,main function,function main,5.0,5.0,5.0,0.0,1.0000000000000002
1.4,Where do C++ programs begin to execute?,main function,program begin execute main method,5.0,5.0,5.0,1.0459439630636238,0.33368324707742375
1.4,Where do C++ programs begin to execute?,main function,program begin execute main function,5.0,5.0,5.0,0.8005777033517709,0.48192783926526983
1.4,Where do C++ programs begin to execute?,main function,begin main function,5.0,5.0,5.0,0.4551427895558595,0.6206929731059507
1.4,Where do C++ programs begin to execute?,main function,int main,5.0,5.0,5.0,0.6675849325378233,0.5212793567650928
1.4,Where do C++ programs begin to execute?,main function,main method,5.0,5.0,5.0,0.6134156492796321,0.547503696081356
1.4,Where do C++ programs begin to execute?,main function,testing phase,0.0,0.0,0.0,1.360785279292754,0.0
1.4,Where do C++ programs begin to execute?,main function,name,5.0,5.0,5.0,1.3569883788297326,0.0
1.4,Where do C++ programs begin to execute?,main function,main,5.0,5.0,5.0,0.6494668728000806,0.8747717052970432
1.4,Where do C++ programs begin to execute?,main function,begin execute funcion main,5.0,5.0,5.0,0.8874050291646375,0.30728207345303615
1.4,Where do C++ programs begin to execute?,main function,main method,5.0,5.0,5.0,0.6134156492796321,0.547503696081356
1.4,Where do C++ programs begin to execute?,main function,root,0.0,5.0,2.5,1.293340063284214,0.0
1.4,Where do C++ programs begin to execute?,main function,main function,5.0,5.0,5.0,0.0,1.0000000000000002
1.4,Where do C++ programs begin to execute?,main function,program begin execution main,5.0,5.0,5.0,1.0072797822720736,0.3631093730298385
1.4,Where do C++ programs begin to execute?,main function,main function,5.0,5.0,5.0,0.0,1.0000000000000002
1.4,Where do C++ programs begin to execute?,main function,main function,5.0,5.0,5.0,0.0,1.0000000000000002
1.4,Where do C++ programs begin to execute?,main function,main function,5.0,5.0,5.0,0.0,1.0000000000000002
1.4,Where do C++ programs begin to execute?,main function,function main,5.0,5.0,5.0,0.0,1.0000000000000002
1.4,Where do C++ programs begin to execute?,main function,loading required include statement library main method begin execution,5.0,5.0,5.0,1.163490029376735,0.21025547049861903
1.4,Where do C++ programs begin to execute?,main function,main function,5.0,5.0,5.0,0.0,1.0000000000000002
1.4,Where do C++ programs begin to execute?,main function,main,5.0,5.0,5.0,0.6494668728000806,0.8747717052970432
1.4,Where do C++ programs begin to execute?,main function,program begin execution main function,5.0,5.0,5.0,0.8090426886458559,0.4624472457285652
1.4,Where do C++ programs begin to execute?,main function,main,5.0,5.0,5.0,0.6494668728000806,0.8747717052970432
1.4,Where do C++ programs begin to execute?,main function,beging excute main,5.0,5.0,5.0,0.704686334836671,0.3123337647213324
1.4,Where do C++ programs begin to execute?,main function,main function int main,5.0,5.0,5.0,0.3337924662689116,0.8155050672806158
1.4,Where do C++ programs begin to execute?,main function,program begin execution main function,5.0,5.0,5.0,0.8090426886458559,0.4624472457285652
1.4,Where do C++ programs begin to execute?,main function,main function,5.0,5.0,5.0,0.0,1.0000000000000002
1.4,Where do C++ programs begin to execute?,main function,within main function,5.0,5.0,5.0,0.4365369032636527,0.6600190849545433
1.5,What is a variable?,location memory store value,variable integer string program,1.0,3.0,2.0,1.3139995753087763,0.0
1.5,What is a variable?,location memory store value,programming structure hold data uniquely named programmer hold data assigned new value assigned program finished,4.0,5.0,4.5,1.2246348663886697,0.07621892541062077
1.5,What is a variable?,location memory store value,variable location memory value stored,5.0,5.0,5.0,0.5076423887384842,0.649557704674419
1.5,What is a variable?,location memory store value,variable location computer memory value stored later retrieve value,5.0,5.0,5.0,0.699825918591057,0.49360590188583464
1.5,What is a variable?,location memory store value,variable location computer memory value stored use program variable name value type size,5.0,5.0,5.0,0.8752907638602306,0.47029060740276485
1.5,What is a variable?,location memory store value,named object hold numerical letter value,2.0,5.0,3.5,1.1195700459158615,0.13131263105975088
1.5,What is a variable?,location memory store value,sybol name example stand given number programmer refer number using variable name,3.0,5.0,4.0,1.2753689148380867,0.0
1.5,What is a variable?,location memory store value,variable location computer memory value stored use program,5.0,5.0,5.0,0.794634547057513,0.4755085968549387
1.5,What is a variable?,location memory store value,name,3.0,5.0,4.0,1.2888799013468375,0.0
1.5,What is a variable?,location memory store value,block memory hold specific type data,5.0,5.0,5.0,1.0812127099540858,0.13294969047112012
1.5,What is a variable?,location memory store value,location computer memory stored use program,5.0,5.0,5.0,0.8466068667544232,0.3464919219100663
1.5,What is a variable?,location memory store value,location memory value stored,5.0,5.0,5.0,0.29927870986170896,0.7043941145588039
1.5,What is a variable?,location memory store value,assume set value,3.0,3.0,3.0,1.0144733619981952,0.20653355015625913
1.5,What is a variable?,location memory store value,pointer location memory,3.0,5.0,4.0,0.6702325713710022,0.5898653386238217
1.5,What is a variable?,location memory store value,variable memory address specific type stored data mathematical perspective symbol representing fixed definition changing value,5.0,5.0,5.0,1.1157391038957565,0.15599833104752886
1.5,What is a variable?,location memory store value,variable value subject change computer memory used program program change value variable recall later act directly,5.0,5.0,5.0,1.063296210750688,0.2187058004827495
1.5,What is a variable?,location memory store value,symbol stand value may may change depending program,3.0,5.0,4.0,1.155478137920628,0.10687166802247634
1.5,What is a variable?,location memory store value,placeholder hold information used program example int hold 1 2 3 4 68 72 256 etc float hold et char hold b c e f 4 5 6 p etc,4.0,5.0,4.5,1.3348111890646874,0.0
1.5,What is a variable?,location memory store value,stored value used program,4.0,5.0,4.5,0.966773980606688,0.22825067914301608
1.5,What is a variable?,location memory store value,way store different value program number word letter etc,4.0,5.0,4.5,1.0357066189653117,0.2576919422602657
1.5,What is a variable?,location memory store value,object location memory value stored,2.0,5.0,3.5,0.49879048377963575,0.6298461755687437
1.5,What is a variable?,location memory store value,location memory value stored,5.0,5.0,5.0,0.29927870986170896,0.7043941145588039
1.5,What is a variable?,location memory store value,variable object data stored,2.0,5.0,3.5,1.2547073666181088,0.0
1.5,What is a variable?,location memory store value,location memory value stored,5.0,5.0,5.0,0.29927870986170896,0.7043941145588039
1.5,What is a variable?,location memory store value,location memory value stored,5.0,5.0,5.0,0.29927870986170896,0.7043941145588039
1.5,What is a variable?,location memory store value,variable location computer memory value stored use program,5.0,5.0,5.0,0.794634547057513,0.4755085968549387
1.5,What is a variable?,location memory store value,variable location computer memory value stored use program,5.0,5.0,5.0,0.794634547057513,0.4755085968549387
1.5,What is a variable?,location memory store value,location memory data stored retrieved,5.0,5.0,5.0,0.7593870717560434,0.3530178377944252
1.5,What is a variable?,location memory store value,method identifier would say use bind data object memory location stored location accessed manipulated later variable name called,5.0,5.0,5.0,1.0745825360288055,0.26266409049835093
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,declared right used good practice declare beginning program label food,1.0,3.0,2.0,1.0207901484619664,0.14203548749174932
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,function main using variable,1.0,5.0,3.0,0.8061179960522197,0.35430125510750554
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,local variable declared inside method function used beginning method global variable declared outside function method generally function defined,5.0,5.0,5.0,0.5025758743549181,0.5705343421876504
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,variable declared ever defined either inside block locally outside block globally,4.0,5.0,4.5,0.8028500726950002,0.31103119091661746
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,variable declared actually used declared main use globally,3.0,5.0,4.0,0.8796959207693291,0.37811530375844216
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,good programing practice declared main least declared used,2.0,3.0,2.5,1.0871909141861047,0.21863872322829642
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,declared globally main method also outside variable subject method scoped within would still declared beginning method inside,5.0,5.0,5.0,0.8561159048186895,0.30062994660025094
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,local variable declared inside method global variable declared body,5.0,5.0,5.0,0.4794220962727288,0.7292877940416763
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,name,1.0,3.0,2.0,1.3755940162247537,0.0
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,globally entire program locally individual function including statement,4.0,5.0,4.5,0.9585988846650456,0.09305447862340958
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,usually declared beginning used program always contain name data type,2.0,4.0,3.0,1.0420217831042016,0.1902821687478069
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,inside method,2.0,3.0,2.5,1.1474035582541817,0.1510119459324083
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,top,1.0,2.0,1.5,1.3563295813687983,0.0
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,global variable declared body code local variable declared function used unless function passed variable variable always declared use,5.0,5.0,5.0,0.5067065536621529,0.701132490208698
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,variable usually declared beginning module code,2.0,3.0,2.5,0.8609209680594421,0.31278302773793026
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,main function usually top code declared almost anywhere must declared code use act upon,3.0,4.0,3.5,0.9122879366074064,0.28469390319234883
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,beginning program main start,1.0,3.0,2.0,1.2157522342533633,0.08773611098970506
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,declaration function statement statement body statement namespaces header etc almost anywhere anywhere program long line,2.0,3.0,2.5,0.9825681224873777,0.1764806337275023
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,declaration variable data type,1.0,1.0,1.0,0.937424776980273,0.2531452284971156
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,anywhere code top middle code anywhere,3.0,3.0,3.0,1.2022111815001035,0.19496689598680378
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,used,2.0,2.0,2.0,1.3253535402701058,0.0
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,anywhere scope used,3.0,4.0,3.5,1.1879532279206382,0.18168357367095583
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,variable declared class method,1.0,4.0,2.5,0.8033815977156318,0.4495599742213321
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,inside function scope outside function scope case global variable,5.0,5.0,5.0,0.6616685626179231,0.47408749550889095
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,global variable declared main function local variable declared function,3.0,5.0,4.0,0.4110016447837085,0.802608551825766
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,variable usually declared beginning program declared program long appear called upon,4.0,4.0,4.0,0.8892572606004401,0.39319391392554176
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,variable declared main function operation attempted variable,1.0,3.0,2.0,0.6193548364035356,0.48725882218955574
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,anywhere declare depends want accessible scope,4.0,5.0,4.5,1.0764550842734895,0.10895295713948579
1.6,Where are variables declared in a C++ program?,variable declared anywhere program declared inside function local variable outside function global variable,depends global declared side source code used every scope however local variable one declared local function etc obviously need declared outside variable seeing used function block called,4.0,5.0,4.5,0.7328922921717018,0.527329605865368
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,statement first evaluates condition executes line code statement 0 time statement executes line code evaluates,4.0,5.0,4.5,0.9675126615641126,0.21179727821001407
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,statement evaluate whether loop running block contained within least main differance statement possibility never used statement hand always run least evaluating whether run,5.0,5.0,5.0,0.9373852167913617,0.38553410361207263
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,main difference loop loop always cycle loop least loop always,5.0,5.0,5.0,1.1987853018961616,0.08536062874972263
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,loop used execute block code long condition true loop used execute block code long condition satisfied difference loop test condition execution content loop test condition execution content least,5.0,5.0,5.0,1.0388317893597967,0.2649233241920814
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,termination condition statement usually end loop run least statement condition false begin loop never run,5.0,5.0,5.0,1.0223839456421395,0.24626130752575637
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,loop check statement make sure true executing loop execute checking statement see run,5.0,5.0,5.0,0.9437360472650306,0.284127699775161
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,statement test condition loop first chance loop never run loop always run test determine run,5.0,5.0,5.0,1.2017150390442417,0.07204967591614217
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,loop always executes loop conditional statement true run,5.0,5.0,5.0,1.08267527342467,0.11466024258606997
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,name,5.0,5.0,5.0,1.3461849863051876,0.0
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,statement evaluate statement executing cycle loop including first cycle meaning loop always execute run evaluate statement running cycle loop ensuring loop always executes least one time,5.0,5.0,5.0,0.9875621936178336,0.26097112235800146
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,main difference statement statement statement block always executed atleast statement execute condition true,5.0,5.0,5.0,0.7957772454207676,0.5039600487894387
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,loop statement always executes,4.0,5.0,4.5,0.9660822381993788,0.18734113852093745
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,statement process statement met always process continue statement met,5.0,5.0,5.0,1.0588327045340815,0.25654156495048386
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,run embedded code least command necessarily,4.0,4.0,4.0,1.078763834832451,0.14317451666029682
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,test true first running run first checking,5.0,5.0,5.0,1.292940518343156,0.0
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,statement body always executes least statement execute unless condition true,5.0,5.0,5.0,0.7294434072046379,0.461458587388233
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,statement within block loop always executed least regardless condition whereas loop may never executed condition met,5.0,5.0,5.0,0.9713393523156743,0.24874467545611406
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,loop always run loop performs test running loop,5.0,5.0,5.0,1.316902732398846,0.0
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,statement test condition start statement loop condition tested,5.0,5.0,5.0,1.0499994625324385,0.2165621730727281
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,loop terminates beginning loop terminates end loop,3.0,4.0,3.5,1.2957897483698821,0.0
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,loop body always executes least,3.0,4.0,3.5,0.9594630635448667,0.18137342257181832
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,loop evaluates expression top loop decides need execute always executes least evaluates expression bottom loop,5.0,5.0,5.0,1.1045499802090957,0.1613656228709182
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,statement always execute piece code least checking condition statement always check condition first,5.0,5.0,5.0,0.8977670814012684,0.37456514308697236
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,pass atleast 1 time checking condition however would fail enter loop condition fails first place,5.0,5.0,5.0,1.2509532987080674,0.0
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,loop check condition true first true excutes statement loop executes statement check condition condition true would excute statement loop would excute statement atleast,5.0,5.0,5.0,1.0113868440050897,0.18966082468667503
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,answer,0.0,0.0,0.0,1.3395411968058744,0.0
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,loop always execute atleast loop may never execute depending teh condition,5.0,5.0,5.0,1.0518922467814875,0.21466897742556335
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,loop check condition statement executes code within block loop check condition block executes run least matter condition statement,5.0,5.0,5.0,0.8789682677645608,0.35335056252929997
1.7,What is the main difference between a while and a do...while statement?,block inside statement execute least,main difference statement construct consists block code condition first code within block executed condition evaluated done proven false difference loop test condition code within block executed,5.0,5.0,5.0,1.0436717446391905,0.24074958491005566
2.1,What is typically included in a class definition?,data member attribute member function,u usually set get displaymessge message tell property class reveal implementation could anything want class definition,1.0,3.0,2.0,1.3296639121788645,0.0
2.1,What is typically included in a class definition?,data member attribute member function,attribute said class also whether subclass also whether public private protected,4.0,4.0,4.0,1.1865210428105561,0.1258997317646249
2.1,What is typically included in a class definition?,data member attribute member function,information telling compiler data member member function belong class,5.0,5.0,5.0,0.6981578050364396,0.4447178638807927
2.1,What is typically included in a class definition?,data member attribute member function,since class user defined body declaration contain member either data function declaration optionally access specifier example specifier would public private protected keyword class class body enclosed bracket,5.0,5.0,5.0,1.160028256779314,0.12924334350767502
2.1,What is typically included in a class definition?,data member attribute member function,object data,1.0,3.0,2.0,1.064211725501614,0.17128869518198442
2.1,What is typically included in a class definition?,data member attribute member function,specific class name includes information defined class implementation detail etc,2.0,4.0,3.0,1.2723714068100058,0.0
2.1,What is typically included in a class definition?,data member attribute member function,data member member function,5.0,5.0,5.0,0.2725866478529875,0.8442600999576615
2.1,What is typically included in a class definition?,data member attribute member function,class definition usually contains function data member,5.0,5.0,5.0,0.7587792884685223,0.4010216368863676
2.1,What is typically included in a class definition?,data member attribute member function,data member member function,5.0,5.0,5.0,0.2725866478529875,0.8442600999576615
2.1,What is typically included in a class definition?,data member attribute member function,member function,3.0,4.0,3.5,0.5311448298112189,0.7678412035787037
2.1,What is typically included in a class definition?,data member attribute member function,member function data member belonging class,5.0,5.0,5.0,0.4498634982290829,0.587070623739929
2.1,What is typically included in a class definition?,data member attribute member function,public private area includes function variable used class,5.0,4.0,4.5,1.1622606472688646,0.041317770580503996
2.1,What is typically included in a class definition?,data member attribute member function,keyword class followed class name inside declare public private declaration class,3.0,4.0,3.5,1.3285347570700816,0.0
2.1,What is typically included in a class definition?,data member attribute member function,class definition typically includes function definition,3.0,3.0,3.0,1.0970994755568968,0.04271443737198383
2.1,What is typically included in a class definition?,data member attribute member function,begin class followed class name usually constructor data member member function delineates class included class definition,5.0,5.0,5.0,0.9975835672011948,0.3149291243589149
2.1,What is typically included in a class definition?,data member attribute member function,data method,5.0,4.0,4.5,1.0596878748944025,0.14007196557261087
2.1,What is typically included in a class definition?,data member attribute member function,constructor function variable accessible class possibly class depending done,5.0,4.0,4.5,1.187783223166355,0.03595123426069056
2.1,What is typically included in a class definition?,data member attribute member function,member function data member,5.0,5.0,5.0,0.2725866478529875,0.8442600999576615
2.1,What is typically included in a class definition?,data member attribute member function,public section private section must semicolon set end,1.0,4.0,2.5,1.332392922662022,0.0
2.1,What is typically included in a class definition?,data member attribute member function,member funtions data member,5.0,5.0,5.0,0.5014263148314183,0.5794130331085529
2.1,What is typically included in a class definition?,data member attribute member function,data member member function,5.0,5.0,5.0,0.2725866478529875,0.8442600999576615
2.1,What is typically included in a class definition?,data member attribute member function,data member member function,5.0,5.0,5.0,0.2725866478529875,0.8442600999576615
2.1,What is typically included in a class definition?,data member attribute member function,class name public data type constructor method function,2.0,5.0,3.5,0.9861898379361774,0.12829831395754185
2.1,What is typically included in a class definition?,data member attribute member function,constructor several data member least one public data member method,4.0,5.0,4.5,0.7975173937001514,0.4868362449521158
2.1,What is typically included in a class definition?,data member attribute member function,class name two curly prenthesis public private,1.0,3.0,2.0,1.3578493424667186,0.0
2.1,What is typically included in a class definition?,data member attribute member function,data member member function,5.0,5.0,5.0,0.2725866478529875,0.8442600999576615
2.1,What is typically included in a class definition?,data member attribute member function,data function,5.0,4.0,4.5,0.8167445376161442,0.37154551807804487
2.1,What is typically included in a class definition?,data member attribute member function,function data member belong class,5.0,5.0,5.0,0.5188883196118704,0.4284621729706454
2.1,What is typically included in a class definition?,data member attribute member function,class variable function definition class,5.0,5.0,5.0,1.0623540297713663,0.05784934035263273
2.1,What is typically included in a class definition?,data member attribute member function,class expanded concept data structure hold data function executed,5.0,4.0,4.5,0.9167175847679492,0.13859843675776293
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member data component particular class member function functioning component class,1.0,5.0,3.0,0.7357321637930153,0.3306174553467951
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,field variable variable declared member class local variable avariable isdeclared local method,1.0,4.0,2.5,0.8932415391385463,0.3070349160515996
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member declared inside class outside member function unlike local variable object class keep copy data member stored memory,4.0,5.0,4.5,0.5987478433348293,0.5875706546872616
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member variable represent attribute class definition local variable declared function body used outside function body function terminates value local variable lost,4.0,5.0,4.5,0.715459258785628,0.3335925260622244
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,local variable accessed outside function declared data member normally private variable function declared private accessible member function class declared,5.0,5.0,5.0,0.5822317058089304,0.46239824833067045
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member part class structure store data certain type local variable inside member function available inside function used derive desired outcome,4.0,5.0,4.5,0.6231877815150008,0.5104147510831084
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,local variable accessed within scope declaration,3.0,4.0,3.5,0.9322442938330067,0.30882348733028164
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member atributes function used outside function local variable used outside function value lost function terminates,4.0,5.0,4.5,0.6931476106401047,0.28483162775923765
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member permanent attribute class local variable inside member function lost scope member function end,3.0,5.0,4.0,0.4359521585233204,0.5954376956883822
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member declared class definition outside body class definition local variable declared function definition body,3.0,5.0,4.0,0.7036002420410377,0.26503424758479555
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member globally accessible local variable accessible inside member function,4.0,5.0,4.5,0.4815676812470333,0.47936652122643003
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,variable inside member function accessed inside member data member accessed throughought program,5.0,5.0,5.0,0.40264600302839926,0.7833266571536812
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,local variable used within scope declaration,5.0,4.0,4.5,1.0936009129494928,0.1339286201807962
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member general term describing object instantiated within member function local local variable refers scope variable may located anything control structure class local variable whose scope member function data member member function,0.0,4.0,2.0,0.6395645226347683,0.5020002238111237
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member exists permanently program memory long run local variable inside member function temporal used operate function exists long function run,2.0,5.0,3.5,0.7274073557538514,0.33173995622346575
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,local variable used within function data member set public access used throughout,5.0,5.0,5.0,0.7938107802994301,0.28704360293788805
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,local variable lost exit block code data member,4.0,5.0,4.5,0.8736548640549161,0.29764237012816414
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,every member function access modify data member local variable used line declaration next closing lost memory,4.0,5.0,4.5,0.7953860069840354,0.3347247192710172
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member accessible function class local variable available member function value lost function close,5.0,5.0,5.0,0.5533324565265604,0.450344262117308
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member variable declared inside class definition outside body class member function local variable used within function declaration,4.0,5.0,4.5,0.5593287018301305,0.5553938254605518
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member accessed outside class whereas local variable,3.0,5.0,4.0,0.5628764205708684,0.5699705865174457
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,local variable used outside function body function terminates value local variable lost data member variable class definition exist throughout life object,5.0,5.0,5.0,0.7586589693711513,0.3358964386893547
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,local variable member function static data member change value freely,0.0,4.0,2.0,0.6431540194833795,0.4428270059728667
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,local variable useable within function defined whereas data member available method within class,5.0,5.0,5.0,0.6726843044706198,0.27121071336837804
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,variable declared function defination body used outside function data member accessible member function class,5.0,5.0,5.0,0.5905136306047675,0.4166209309574715
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member local variable declared function definition body used outside function body function terminates value local variable lost,5.0,4.0,4.5,0.7395181614850607,0.3291489778511526
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,local variable available function,4.0,5.0,4.5,0.9300863726567136,0.23360464098798475
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,local variable accessed inside member function data member accessed throughout class,4.0,5.0,4.5,0.3096069352937916,0.8439559581051123
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member accessible anywhere class local variable member function accessible particular function freed function exit,5.0,5.0,5.0,0.5573343238597682,0.3892541847033334
2.2,What is the difference between a data member and a local variable inside a member function?,data member accessed member function inside class defintion local variable accessed inside member function defines,data member encapsulated within class object static shared instance class however local variable used function block declared whole class wise would called global variable,3.0,5.0,4.0,0.884867821828573,0.26532661777547906
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor initializes object object class function class performs task display line text kind mathematical operation,2.0,3.0,2.5,0.9999067385939561,0.15347507623852882
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor function function constructor also function nearly infinite purpose constructor always create instance whichever class using change constructor something function change also,2.0,4.0,3.0,0.8851214281957859,0.2665965914484708
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,unlike regular function constructor used initialize object data created constructor must also given name class return value,5.0,5.0,5.0,0.7635789041109228,0.3513613207467533
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor typically used intialize data member allocate resource instance memory file etc also constructor return value function operation maybe globally defined,4.0,5.0,4.5,0.9802904355592139,0.20119511694895414
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor return value specify return type normally constructor declared public,3.0,5.0,4.0,0.7965863511553756,0.42646834587936766
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor method start new instance class example employee employee1 parameter start new instance object type employee function simply module program completes single desired task,2.0,4.0,3.0,1.015893556568957,0.11693199907692016
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor called whenever new object class made,4.0,3.0,3.5,0.7946105815131215,0.4209915806924881
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor return date return type function return date return data return type,3.0,5.0,4.0,0.7771762447586537,0.44903884219962253
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor automatically called whenever instance class created function must explicitly called user,4.0,4.0,4.0,0.7120382996564194,0.42092648654448717
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor return value specify return type like function,3.0,5.0,4.0,0.625101369373489,0.4702907983974844
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor function used initialize object data created,4.0,3.0,3.5,0.7829814243075652,0.35190723561874265
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor initialises everything nothing left empty random varioubles function modifies variable data,2.0,3.0,2.5,0.9950982188539093,0.09884188351965689
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor initialized value execution instantiation provides default value,4.0,3.0,3.5,1.1165084094359212,0.09556988277089652
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor set default value variable object instantiated whereas function allows interaction object,4.0,4.0,4.0,0.8788639247361609,0.26481620306490994
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor used create object employed main function program may may execute code along function set code executes called create new object,3.0,3.0,3.0,0.9136666217100331,0.2124572347512348
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor initializes data member function actually perform task constructor cant return value either,3.0,5.0,4.0,0.8945333461906425,0.2632491826186438
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor need type used initialize variable,3.0,4.0,3.5,0.8598514319901127,0.3425683229168839
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor return type,3.0,5.0,4.0,0.8145962257438863,0.6309605049072788
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor creates class object memory function perform action object,2.0,4.0,3.0,0.880436180243337,0.23111372801947977
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor return value,3.0,5.0,4.0,0.9947185583176484,0.4441818788300038
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor initializes value function usual performs sort operation,2.0,3.0,2.5,0.9278677758987361,0.13686982925942068
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor function used initialize object data created call made implicitly object created must defined name class constructor also return value like function,5.0,5.0,5.0,0.7623073271925748,0.4004298896330865
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor used create instance class name class function name class computes data,4.0,4.0,4.0,1.0227689400577382,0.10933393533938321
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor function initializes class instance function performs whatever task written,2.0,4.0,3.0,0.950564600541398,0.14514233630583362
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor return value even void function get return value,3.0,5.0,4.0,0.823742110950652,0.30573812451411303
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor return value even void used initialize object data created whereas function created specific task return value,5.0,5.0,5.0,0.7044935045057894,0.4158144717568771
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor initializes object function part object,1.0,4.0,2.5,0.8788077465085954,0.2765589468998414
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor initialize data used calculation function,2.0,3.0,2.5,0.956676097570939,0.17088965366733788
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor called class created function called time,4.0,3.0,3.5,0.7189457347393253,0.5253983236309478
2.3,What is the difference between a constructor and a function?,constructor called whenever object created whereas function need called explicitely constructor return type function indicate return type,constructor special block statement called object created either declared statically constructed stack however function portion code within larger program performs specific task independent rest code,4.0,4.0,4.0,0.9822487316130878,0.1973774718270293
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,compiler creates default constructor define one class file,5.0,5.0,5.0,0.5142508617610106,0.5459933860570707
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,compilation,2.0,5.0,3.5,1.3330050036173327,0.0
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,class explicitly include constructor,5.0,5.0,5.0,0.8631324197121801,0.2890042433476279
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,parameter set default constructor used,3.0,3.0,3.0,0.7855291706759903,0.47736834214261503
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,class explicitly include constructor,5.0,5.0,5.0,0.8631324197121801,0.2890042433476279
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,argument passed,1.0,2.0,1.5,1.3728990032794974,0.0
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,one already specific class,5.0,5.0,5.0,1.1026028479991117,0.13012915340745157
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,program compiles,2.0,5.0,3.5,1.290795107834954,0.0
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,constructor provided programmer class,5.0,5.0,5.0,0.7318799642343607,0.42889802816812883
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,class explicitly include constructor,5.0,5.0,5.0,0.8631324197121801,0.2890042433476279
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,main function code,0.0,2.0,1.0,1.2610815162207811,0.0
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,whenevery dont specifiy,5.0,5.0,5.0,1.3227268273930153,0.0
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,non provided,5.0,5.0,5.0,1.207519708748738,0.1590285804711162
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,create default constructor constructor present,5.0,5.0,5.0,0.6496412849484884,0.6164500440185638
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,constructor specified constructor class class instantiated program,5.0,5.0,5.0,0.8305694290385609,0.3847073776212132
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,constructor exists one needed parameterless default constructor declared,5.0,5.0,5.0,0.6716464065254252,0.4666068539562817
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,compiler creates automatically unless specifically create one,5.0,5.0,5.0,0.866326640562069,0.23415128641222946
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,class explicitly include constructor,5.0,5.0,5.0,0.8631324197121801,0.2890042433476279
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,constructor exists,5.0,5.0,5.0,0.9373811974003233,0.2835258652678635
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,class explicitly include constructor compiler creates one,5.0,5.0,5.0,0.645430528473334,0.3982396033688649
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,provide constructor,5.0,5.0,5.0,0.880753186268427,0.2869288638759764
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,class explicitly include constructor,5.0,5.0,5.0,0.8631324197121801,0.2890042433476279
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,creates default constructor compilation one provided,5.0,5.0,5.0,0.5998813616255936,0.5024259057773669
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,class explicitly include constructor,5.0,5.0,5.0,0.8631324197121801,0.2890042433476279
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,compiler provide one class explictly include consructor,5.0,5.0,5.0,0.818793398202412,0.18555664390418913
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,programmer explicitly include constructor,5.0,5.0,5.0,0.9302735827210428,0.2020800646241395
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,one explicitly stated,5.0,5.0,5.0,1.2036372123571486,0.053010592660907234
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,one explicitly included class,5.0,5.0,5.0,1.0691221301858604,0.1246386589255715
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,dont specify constructor,5.0,5.0,5.0,0.9894146088011729,0.21859811800644624
2.4,When does C++ create a default constructor?,constructor provided compiler provides one default constructor defined class compiler create default constructor,beginning run complier matter fact generates default constructor class provided constructor provided user,5.0,5.0,5.0,0.7223035036514731,0.45027826150195266
2.5,How many constructors can be created for a class?,unlimited number,one per class,0.0,0.0,0.0,1.2084414363760265,0.0
2.5,How many constructors can be created for a class?,unlimited number,many want long different parameter,5.0,5.0,5.0,1.2320702857359318,0.0
2.5,How many constructors can be created for a class?,unlimited number,limit number constructor class like function constructor overloaded,5.0,5.0,5.0,1.1302558655236745,0.15318303996166044
2.5,How many constructors can be created for a class?,unlimited number,depends type class defined typically would constructor call object,1.0,2.0,1.5,1.2990083633543161,0.0
2.5,How many constructors can be created for a class?,unlimited number,constructor overloaded one constructor class different parameter,5.0,5.0,5.0,1.2928191908045514,0.0
2.5,How many constructors can be created for a class?,unlimited number,1,0.0,0.0,0.0,1.336050650009215,0.0
2.5,How many constructors can be created for a class?,unlimited number,number want,5.0,5.0,5.0,0.6484235314962754,0.302917336873107
2.5,How many constructors can be created for a class?,unlimited number,one,0.0,0.0,0.0,1.245675899368367,0.0
2.5,How many constructors can be created for a class?,unlimited number,default one may overloaded create many constructor necessary,5.0,5.0,5.0,1.2478241616282237,0.0
2.5,How many constructors can be created for a class?,unlimited number,many want,5.0,5.0,5.0,1.1508195014832703,0.0
2.5,How many constructors can be created for a class?,unlimited number,many want different parameter,5.0,5.0,5.0,1.2131623770063198,0.0
2.5,How many constructors can be created for a class?,unlimited number,infinite,5.0,5.0,5.0,1.1812639435865377,0.0
2.5,How many constructors can be created for a class?,unlimited number,many need,5.0,5.0,5.0,1.1604774351303224,0.0
2.5,How many constructors can be created for a class?,unlimited number,many needed depending many variable one wish directly modify leave default instantiating object,5.0,5.0,5.0,1.2448747196828551,0.0
2.5,How many constructors can be created for a class?,unlimited number,large amount constructor created given class overloading two constructor different type number parameter created said overloaded recognize constructor use based type variable,5.0,5.0,5.0,1.2235211472951377,0.08035813932733976
2.5,How many constructors can be created for a class?,unlimited number,depends number object object constructor,1.0,4.0,2.5,1.0596480070718552,0.18547802617251266
2.5,How many constructors can be created for a class?,unlimited number,theoretically unlimited long defined programmer,5.0,5.0,5.0,1.064013829658393,0.3270033489534561
2.5,How many constructors can be created for a class?,unlimited number,many needed,5.0,5.0,5.0,1.177168352439586,0.0
2.5,How many constructors can be created for a class?,unlimited number,many,5.0,5.0,5.0,1.1701183596796154,0.0
2.5,How many constructors can be created for a class?,unlimited number,several,4.0,5.0,4.5,1.2254496440171507,0.0
2.5,How many constructors can be created for a class?,unlimited number,one,0.0,0.0,0.0,1.245675899368367,0.0
2.5,How many constructors can be created for a class?,unlimited number,one,0.0,0.0,0.0,1.245675899368367,0.0
2.5,How many constructors can be created for a class?,unlimited number,infinite constructor long signature different,5.0,5.0,5.0,1.2516236986753293,0.0
2.5,How many constructors can be created for a class?,unlimited number,depends number data member class,0.0,3.0,1.5,1.0517991861415437,0.2263903749327962
2.5,How many constructors can be created for a class?,unlimited number,one,0.0,0.0,0.0,1.245675899368367,0.0
2.5,How many constructors can be created for a class?,unlimited number,overload constructor need,5.0,5.0,5.0,1.3149782409233144,0.0
2.5,How many constructors can be created for a class?,unlimited number,many programmer want create,5.0,5.0,5.0,1.2636949616100415,0.0
2.5,How many constructors can be created for a class?,unlimited number,one,0.0,0.0,0.0,1.245675899368367,0.0
2.5,How many constructors can be created for a class?,unlimited number,many want long unique argument list,5.0,5.0,5.0,1.2255228605713238,0.0
2.5,How many constructors can be created for a class?,unlimited number,many user decides use,5.0,5.0,5.0,1.2240323882909805,0.0
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function definition require additional information need passed inside parenthesis execute definition prototype requires one parameter passed order complete task,5.0,3.0,4.0,0.9580168082253279,0.19993417916303785
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype programmer declares using function main like declaring variable programmer know using future yet say going use answer question give function name character function prototype common practice placed beginning program includes main function definition gut function programmer decides function going tell take whatever information given performs operation work sort like brain brain take input based upon input performs way producing output function defintion placed outside main function function entity thought,1.0,4.0,2.5,0.9667291034287527,0.3130575275695109
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype tell compiler function name return type number type parameter without revealing implementation contained function definition,5.0,5.0,5.0,0.5303938755748033,0.49622332984801076
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype declaration function definition parameter often require one piece information perform task,3.0,3.0,3.0,0.8216862188820727,0.2895729219362213
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype declaration function tell compiler function name return type type parameter,5.0,5.0,5.0,0.5094657318257959,0.5991095411787194
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,prototype show return type necessary parameter definition includes name parameter defines object actually capable,5.0,4.0,4.5,0.6734357024633797,0.4118125802341383
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,prototype tell user data type go function type returned,5.0,4.0,4.5,0.8871297814679693,0.29937446451612554
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype located file contains access function name paramater type function definition contains code function perform activity,4.0,5.0,4.5,0.5925699454566239,0.3957739314962076
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype used reference compiler function defined later function definition actual function complete return type parameter etc,4.0,4.0,4.0,0.5082401805574194,0.5577470479030686
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype describes class public interface without revealing class member function implementation,5.0,4.0,4.5,0.968216469711233,0.1950367935582161
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function definition definition prototype compiler us check call function correct,1.0,3.0,2.0,0.8667291084247456,0.34443629460329417
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,prototype include actual code function code executed program,3.0,3.0,3.0,0.9157119557127473,0.23615766258023255
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,prototype declares used program definition,3.0,3.0,3.0,1.1321027709493803,0.18721672111643936
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype lay name return type number type parameter function expects receive certain order detail function prototype function definition,5.0,5.0,5.0,0.5230297028854279,0.5236736298169588
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function definition code defines function placed bracket determines function operation function prototype show function public interface without exposing implementation show name return type type paramaters,5.0,5.0,5.0,0.6740485955053893,0.41959060662183123
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype declaration function existing cant used actual function function created definition within tell compiler function,3.0,4.0,3.5,0.6616980989555074,0.45901353602072936
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,prototype creates framework call function definition function definition function actually programmed created final product,5.0,4.0,4.5,0.8012959737019517,0.31717201638184983
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype describes class public interface without providing function work function definition contains inner working function,5.0,4.0,4.5,0.7653411733621456,0.3236990226237925
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,prototype state function class compilation definition actually hold source function,3.0,4.0,3.5,0.8482410520303381,0.2635841914121683
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype tell compiler function name return type type parameter function definition actually implement member function,5.0,5.0,5.0,0.42715902512135834,0.6145358013778917
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype specifies parameter function definition includes parameter code body,4.0,4.0,4.0,0.5654432574387476,0.6102653600532821
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype describe class public interface,5.0,4.0,4.5,0.9690107300147267,0.1842386506256648
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,prototype declares name return type input type definition also defines scope variable process return function,4.0,5.0,4.5,0.7174851952039711,0.4066314318770219
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype simply declares function parameter function definition includes necessary variable function actual code,4.0,4.0,4.0,0.5156110160268647,0.6160026716221738
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,functgion prototype declaration function function definition specifies function,3.0,4.0,3.5,0.7030194976410956,0.3879709856036836
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype include return type name function parameter needed function definition write code function,5.0,5.0,5.0,0.41277177447506225,0.5905127930882791
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function definition contains code function work function prototype show output input function name,5.0,4.0,4.5,0.6399290423499303,0.4332252243618974
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype describe class public interface without revealing class member function implementation function definition show implementation done,5.0,4.0,4.5,0.8952080248004514,0.2487522610639737
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype name function return type argument list definition defines well function actually,5.0,5.0,5.0,0.5515653465735416,0.5117802131708362
2.6,What is the difference between a function prototype and a function definition?,function prototype includes function signature name function return type parameter type function definition includes actual body function,function prototype describes class interface without reviling whatever inside function definition ca,5.0,4.0,4.5,0.8774350761315348,0.23564811642752764
2.7,What is the role of a header-file?,store class interface including data member member function prototype,role header file list function class hiding inner working function,5.0,4.0,4.5,1.0043959248748358,0.1046838193550188
2.7,What is the role of a header-file?,store class interface including data member member function prototype,main role header file used share information among various file,3.0,3.0,3.0,1.2314595125857843,0.0
2.7,What is the role of a header-file?,store class interface including data member member function prototype,header file separate file class defined allow compiler recognize class used elsewhere,4.0,3.0,3.5,1.1340336621488343,0.10229186644977237
2.7,What is the role of a header-file?,store class interface including data member member function prototype,,0.0,0.0,0.0,inf,0.0
2.7,What is the role of a header-file?,store class interface including data member member function prototype,header file consists reusable source code class file convention filename extension differs file contain,4.0,3.0,3.5,1.1636064280305058,0.038700458472809916
2.7,What is the role of a header-file?,store class interface including data member member function prototype,provide information content library includes definition class declaration function data type constant,5.0,4.0,4.5,0.9280997264219197,0.12252949500805448
2.7,What is the role of a header-file?,store class interface including data member member function prototype,header file show user type go come function allow user manipulate actual code function,5.0,4.0,4.5,1.136222217387286,0.040224368404612
2.7,What is the role of a header-file?,store class interface including data member member function prototype,header file declares class member function,3.0,4.0,3.5,0.7942335424911704,0.3395144618051116
2.7,What is the role of a header-file?,store class interface including data member member function prototype,header file allows separation declaration implementation separate file,5.0,3.0,4.0,1.2838110505964604,0.0
2.7,What is the role of a header-file?,store class interface including data member member function prototype,header file access standard library make certain class like class string work,0.0,3.0,1.5,1.1230971534149563,0.10770591840986579
2.7,What is the role of a header-file?,store class interface including data member member function prototype,instruct compiler interface library component,2.0,3.0,2.5,1.1183843588223439,0.1544370248887885
2.7,What is the role of a header-file?,store class interface including data member member function prototype,create comon area contain reusable function,3.0,3.0,3.0,1.1399633896013968,0.02849393945416287
2.7,What is the role of a header-file?,store class interface including data member member function prototype,declare function used class,3.0,3.0,3.0,1.0208014518359423,0.16710529830669346
2.7,What is the role of a header-file?,store class interface including data member member function prototype,include allows use hat container called act pulling name hat header file hat includes function storage retrieval content mainly put peek pull,0.0,3.0,1.5,1.1888904908157851,0.011936899038431805
2.7,What is the role of a header-file?,store class interface including data member member function prototype,hold reusable content module separate actual file easily referenced employed different program,5.0,3.0,4.0,1.2427938955315696,0.0
2.7,What is the role of a header-file?,store class interface including data member member function prototype,header file file used store list prototye function data member,5.0,5.0,5.0,0.7225579765662493,0.2727533046174906
2.7,What is the role of a header-file?,store class interface including data member member function prototype,header file cross communication method source file help limit size individual program without header file program 1 large lump code thus fairly hard debug traverse,3.0,4.0,3.5,1.277578937231832,0.0
2.7,What is the role of a header-file?,store class interface including data member member function prototype,contains reusable source code use class,3.0,3.0,3.0,1.1080398857328426,0.08200054957927093
2.7,What is the role of a header-file?,store class interface including data member member function prototype,separate source code main function allows included program without direct coding allows usability,4.0,3.0,3.5,1.1439248278260876,0.019854906772232783
2.7,What is the role of a header-file?,store class interface including data member member function prototype,header file reusable source code file programer use,3.0,2.0,2.5,1.2711549876962862,0.0
2.7,What is the role of a header-file?,store class interface including data member member function prototype,hide definition detail class also help readability main file,4.0,3.0,3.5,1.1286931955923112,0.05790470195059956
2.7,What is the role of a header-file?,store class interface including data member member function prototype,allow compiler recognize class used elsewhere,3.0,4.0,3.5,1.1439403900019007,0.07830929069953531
2.7,What is the role of a header-file?,store class interface including data member member function prototype,header file declares class data function available class,5.0,3.0,4.0,0.8703665877381916,0.22380320051802433
2.7,What is the role of a header-file?,store class interface including data member member function prototype,header file contain code used multiple file,3.0,3.0,3.0,1.2774852563665287,0.0
2.7,What is the role of a header-file?,store class interface including data member member function prototype,allow compiler recognize class used elsewhere,3.0,3.0,3.0,1.1439403900019007,0.07830929069953531
2.7,What is the role of a header-file?,store class interface including data member member function prototype,allow compiler recognize class used elsewhere,3.0,4.0,3.5,1.1439403900019007,0.07830929069953531
2.7,What is the role of a header-file?,store class interface including data member member function prototype,promote function reusuablitly,3.0,3.0,3.0,1.1695660726420203,0.03686081108134782
2.7,What is the role of a header-file?,store class interface including data member member function prototype,class definition placed,3.0,3.0,3.0,1.1884886912486665,0.11330075294710798
2.7,What is the role of a header-file?,store class interface including data member member function prototype,header file usually contains class function prototype,4.0,5.0,4.5,0.856899767080239,0.23918969343819152
2.7,What is the role of a header-file?,store class interface including data member member function prototype,contains standard library string,0.0,2.0,1.0,1.269370784313517,0.0
3.1,What does a function signature include?,name function type parameter,includes name program type parameter take also include brief description function,4.0,5.0,4.5,0.825301158033447,0.4087632626710169
3.1,What does a function signature include?,name function type parameter,includes specific information function input output variable type many,1.0,5.0,3.0,0.9613798539464542,0.17251087476265178
3.1,What does a function signature include?,name function type parameter,function signature includes name function type argument,5.0,5.0,5.0,0.5972520839308955,0.4967586865822504
3.1,What does a function signature include?,name function type parameter,function signature consists function prototype tell general information function name parameter scope miscellaneous information,4.0,5.0,4.5,0.819971516868565,0.3095445768889403
3.1,What does a function signature include?,name function type parameter,includes name function type argument,5.0,5.0,5.0,0.5410591628965846,0.5120952598531172
3.1,What does a function signature include?,name function type parameter,name paramaters scope general function information,4.0,5.0,4.5,0.7862504572691719,0.21144954524845003
3.1,What does a function signature include?,name function type parameter,includes function name parameter list include return type function signature must different,5.0,5.0,5.0,0.740772629003265,0.5222095132523994
3.1,What does a function signature include?,name function type parameter,input parameter return type,1.0,5.0,3.0,0.6562311940741659,0.4751715562572061
3.1,What does a function signature include?,name function type parameter,portion function prototyp tha function name argument return type,5.0,5.0,5.0,0.6655317253287336,0.3419652205567333
3.1,What does a function signature include?,name function type parameter,name function type argument,5.0,5.0,5.0,0.34821788785298025,0.6102857480427775
3.1,What does a function signature include?,name function type parameter,name function type argument,5.0,5.0,5.0,0.34821788785298025,0.6102857480427775
3.1,What does a function signature include?,name function type parameter,includes name function type argument,5.0,5.0,5.0,0.5410591628965846,0.5120952598531172
3.1,What does a function signature include?,name function type parameter,identification function data type parameter name data type variable,5.0,5.0,5.0,0.5426946264144694,0.6190190790192487
3.1,What does a function signature include?,name function type parameter,return type input parameter,1.0,5.0,3.0,0.6562311940741659,0.4751715562572061
3.1,What does a function signature include?,name function type parameter,function signature includes method name input type,5.0,5.0,5.0,0.6925148315861313,0.392485976584154
3.1,What does a function signature include?,name function type parameter,function signature includes name function type argument return type,5.0,5.0,5.0,0.5847363464279748,0.5481918548879189
3.1,What does a function signature include?,name function type parameter,signature include result type thrown error,1.0,3.0,2.0,1.0657499337872025,0.1261098154443568
3.1,What does a function signature include?,name function type parameter,function name input paramaters,5.0,5.0,5.0,0.6204970724319676,0.28057051973342484
3.1,What does a function signature include?,name function type parameter,name function type argument includes number type order parameter appear,5.0,5.0,5.0,0.651361629004575,0.5778629836534871
3.1,What does a function signature include?,name function type parameter,name function type argument,5.0,5.0,5.0,0.34821788785298025,0.6102857480427775
3.1,What does a function signature include?,name function type parameter,function signature includes name function type argument,5.0,5.0,5.0,0.5972520839308955,0.4967586865822504
3.1,What does a function signature include?,name function type parameter,function signature includes function return type parameter,1.0,5.0,3.0,0.5849878404145423,0.5446663302839586
3.1,What does a function signature include?,name function type parameter,name function type argument,5.0,5.0,5.0,0.34821788785298025,0.6102857480427775
3.1,What does a function signature include?,name function type parameter,function name parameter,5.0,5.0,5.0,0.3075224000313419,0.8643436932828626
3.1,What does a function signature include?,name function type parameter,name function type argument,5.0,5.0,5.0,0.34821788785298025,0.6102857480427775
3.1,What does a function signature include?,name function type parameter,portion function prototype includes name function type argument,5.0,5.0,5.0,0.6574322552172926,0.44983772599377664
3.1,What does a function signature include?,name function type parameter,name function parameter,5.0,5.0,5.0,0.3075224000313419,0.8643436932828626
3.1,What does a function signature include?,name function type parameter,function name parameter,5.0,5.0,5.0,0.3075224000313419,0.8643436932828626
3.1,What does a function signature include?,name function type parameter,name function type argument,5.0,5.0,5.0,0.34821788785298025,0.6102857480427775
3.1,What does a function signature include?,name function type parameter,function return type parameter list,1.0,5.0,3.0,0.5128650594713233,0.6461870851893476
3.1,What does a function signature include?,name function type parameter,includes name function type argument specify function return type function scope must unqiue signature,5.0,5.0,5.0,0.729921638053543,0.423062291397214
3.2,What is the scope of global variables?,file scope,function follows deceleration source code file allowed access variable also global scope variable retrain value throughout execution program,5.0,5.0,5.0,1.163176969612708,0.29212663347006895
3.2,What is the scope of global variables?,file scope,accessed file anywhere,0.0,5.0,2.5,0.8876627338680972,0.39567054743737107
3.2,What is the scope of global variables?,file scope,global variable file scope,5.0,5.0,5.0,0.6480436037980901,0.7464119930709512
3.2,What is the scope of global variables?,file scope,scope global variable created placing variable declaration outside class function definition global variable retain value throughout execution program referenced function follows declaration definition source file,0.0,5.0,2.5,1.191635158166957,0.23657622117153226
3.2,What is the scope of global variables?,file scope,global variable identifier retains value throughout execution program file scope,5.0,5.0,5.0,1.0462632557917386,0.4070818130082465
3.2,What is the scope of global variables?,file scope,global variable used function long appropriate file hold variable included,3.0,5.0,4.0,1.1852900781681706,0.20647346692846397
3.2,What is the scope of global variables?,file scope,accessed part program referenced function follows declaration definition source file,5.0,5.0,5.0,1.134505086483181,0.2059250299470002
3.2,What is the scope of global variables?,file scope,accesed class object variable class,1.0,5.0,3.0,1.3163809339914623,0.0
3.2,What is the scope of global variables?,file scope,global variable variable know function throught file,5.0,5.0,5.0,1.1307259619709866,0.23994876863303988
3.2,What is the scope of global variables?,file scope,entire program,4.0,5.0,4.5,1.3183335508475469,0.0
3.2,What is the scope of global variables?,file scope,file scope placed outside function,5.0,5.0,5.0,0.8063528709547065,0.6166599252210735
3.2,What is the scope of global variables?,file scope,file scope,5.0,5.0,5.0,0.0,1.0
3.2,What is the scope of global variables?,file scope,used throughout program,4.0,5.0,4.5,1.368742325332776,0.0
3.2,What is the scope of global variables?,file scope,global variable b accessed class wit object variable class,1.0,5.0,3.0,1.3061556899025877,0.0
3.2,What is the scope of global variables?,file scope,scope global variable file level,5.0,5.0,5.0,0.7857368352205478,0.6322713237473088
3.2,What is the scope of global variables?,file scope,global variable file scope,5.0,5.0,5.0,0.6480436037980901,0.7464119930709512
3.2,What is the scope of global variables?,file scope,accessible function within program,4.0,5.0,4.5,1.3035599959779056,0.0
3.2,What is the scope of global variables?,file scope,variable accessible anywhere program long public,4.0,5.0,4.5,1.3268721126943908,0.0
3.2,What is the scope of global variables?,file scope,referenced function following declaration definition inside source file,5.0,5.0,5.0,1.118077797119243,0.23603334810339405
3.2,What is the scope of global variables?,file scope,globally anywhere program,4.0,5.0,4.5,1.3347464294499858,0.0
3.2,What is the scope of global variables?,file scope,global variable file scope,5.0,5.0,5.0,0.6480436037980901,0.7464119930709512
3.2,What is the scope of global variables?,file scope,entire program,4.0,5.0,4.5,1.3183335508475469,0.0
3.2,What is the scope of global variables?,file scope,throughout execution program,4.0,5.0,4.5,1.34313563882375,0.0
3.2,What is the scope of global variables?,file scope,variable declared global function class use variable,4.0,5.0,4.5,1.311981579528782,0.0
3.2,What is the scope of global variables?,file scope,entire program file,5.0,5.0,5.0,0.8692569433975054,0.3995194584035807
3.2,What is the scope of global variables?,file scope,throught programm,4.0,5.0,4.5,1.3402644070821048,0.0
3.2,What is the scope of global variables?,file scope,whole code,4.0,5.0,4.5,1.2522490340505614,0.0
3.2,What is the scope of global variables?,file scope,file scope,5.0,5.0,5.0,0.0,1.0
3.2,What is the scope of global variables?,file scope,referenced function follows declaration definition source file,5.0,5.0,5.0,1.0900527280806076,0.2397129107324859
3.2,What is the scope of global variables?,file scope,global variable program scope accessible anywhere program,4.0,5.0,4.5,1.1333131099543177,0.2579037156639583
3.2,What is the scope of global variables?,file scope,variable exist throught entire script value changed anytime code fucntions,4.0,5.0,4.5,1.2996976783957401,0.0
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,expands function definition place function called use many time need compiler expands function,4.0,5.0,4.5,0.8648517623985397,0.19651370733318027
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,compiler function call function code get inserted caller code stream conceptually similar happens define macro depending zillion thing improve performance optimizer procedurally integrate called code optimize called code caller,4.0,5.0,4.5,0.963823366707693,0.2244263116337936
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,inline keyword advises compiler copy function code place avoid function call however compiler typically ignore inline qualifier smallest function,5.0,5.0,5.0,0.7849525658771901,0.30804388660579984
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,compiler ignore inline qualifier typically smallest function,2.0,4.0,3.0,1.0738383704319527,0.056322437649599016
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,placing qualifier inline function return type function definition advises compiler generate copy function code place avoid function call,5.0,5.0,5.0,0.6900535138938906,0.3966567233197397
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,declare inline function header int main call function anytime main program quickly easily,0.0,4.0,2.0,0.9850648079298175,0.1397394414208267
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,expands small function making code longer also make run faster,4.0,4.0,4.0,0.8601279667163154,0.22246923875770358
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,function treated separate unit like function,4.0,3.0,3.5,1.0039526699976746,0.12063127247446885
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,program compiles copy function inplace avoiding function call,5.0,5.0,5.0,0.7133245939101667,0.2766048660999151
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,replaces instance function call inline code resulting longer faster program,5.0,5.0,5.0,0.9064300315909318,0.18860171886953733
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,compiler ignore inline qualifier typically smallest function,2.0,4.0,3.0,1.0738383704319527,0.056322437649599016
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,ignores inline qualifier typically smallest function,2.0,4.0,3.0,1.0822433069145567,0.0580665698231402
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,function small enough expand run faster avoid making many call function,5.0,4.0,4.5,0.8869346864726857,0.15381376699385813
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,treat function,2.0,2.0,2.0,1.025551988451971,0.10591384395116192
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,inline function copied place instead referenced,5.0,5.0,5.0,0.8986876758427512,0.16271351032074025
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,inline function compiler creates copy function code place make function call add function call stack,5.0,5.0,5.0,0.512723697227865,0.6260996277269484
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,generates copy function coding eliminates calling function,5.0,5.0,5.0,0.7900144437374003,0.23149071225140846
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,answered,0.0,0.0,0.0,1.3177356009004026,0.0
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,generates copy function code inserting program,4.0,5.0,4.5,0.7962026993018355,0.31261146300453263
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,tell compiler make copy function code place avoid function call typically ignores except smallest function,5.0,5.0,5.0,0.5704178799777192,0.49424716263538926
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,compiler ignore inline qualifier typically smallest function,2.0,2.0,2.0,1.0738383704319527,0.056322437649599016
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,multiple copy function code inserted program making bigger,4.0,5.0,4.5,0.7650687483655957,0.26243774325803443
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,compiler ignores inline qualifier,2.0,3.0,2.5,1.281388841942876,0.0
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,generates copy function needed,2.0,5.0,3.5,0.8505297187661296,0.2381444413512762
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,complier includes copy inline function instead making function call usually small function,5.0,5.0,5.0,0.7188503139058233,0.2865079011914835
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,compiler generate copy function code place appropriate avoid function call,5.0,5.0,5.0,0.5077970159991844,0.46215496852831084
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,instead calling function every time invoked compiler replace function call copy function body,5.0,5.0,5.0,0.6642548727039806,0.3947519858522929
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,expands function program,4.0,4.0,4.0,1.0488867425474986,0.09823935120590259
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,generates copy function code place avoid function call,5.0,5.0,5.0,0.42112368654461296,0.5347385352594778
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,function call replaced code defined inline function,5.0,5.0,5.0,0.7332425297372669,0.3276464663744342
3.3,How does the compiler handle inline functions?,make copy function code every place function call made,compiler function call function code get inserted caller code stream conceptually similar happens define macro depending zillion thing improve performance optimizer procedurally integrate called code optimize called code caller,4.0,5.0,4.5,0.963823366707693,0.2244263116337936
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,overall program better performance mean faster copy large amount data,5.0,5.0,5.0,0.9159122468425819,0.225843768303975
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,ca change original passing reference limit memory needed program,5.0,4.0,4.5,1.2715123332767673,0.0
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,passing reference eliminate overhead copying large amount data,5.0,5.0,5.0,0.9117822786499192,0.15802337399101304
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,often efficient pas reference rather large object function allows compiler pas address object maintaining syntax would used access object,5.0,5.0,5.0,1.121517880630447,0.0866779304278964
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,pas reference good performance reason eliminate pas value overhead copying large amount data,5.0,5.0,5.0,1.0695576627092118,0.11126167955450017
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,alter original value variable passed,3.0,3.0,3.0,1.277795321267934,0.0
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,make copy stuff,4.0,5.0,4.5,1.0708583600121315,0.15978815892703865
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,use unessesary memory space copy variable function,5.0,5.0,5.0,0.9639572982621841,0.16723144408841292
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,elimitates need copy large amonts data,5.0,5.0,5.0,0.8100787428337195,0.29235798664503554
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,function change data stored variable passed reference directly,3.0,4.0,3.5,0.9514626932856105,0.09152597127410417
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,give called function ability access modify caller argument data,3.0,4.0,3.5,0.9615898489712075,0.07399417440705328
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,give called function ability access modify caller argument data directly,3.0,4.0,3.5,0.9881835914170122,0.07022138706922457
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,efficient change variable online inside function outside new value used elsewhere,3.0,3.0,3.0,1.1644207387426881,0.025607709477647563
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,make another copy waste memory,5.0,5.0,5.0,1.0604164865678336,0.14394359517398683
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,passing reference eliminates copying large amount data typical pas value,5.0,5.0,5.0,0.9667606203269501,0.1392707787028522
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,function argument large size computing time memory space wasted copying argument passing function also pas reference give function called permission read edit argument directly,5.0,5.0,5.0,1.015854224266205,0.10683597526690444
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,give access caller data directly also allows modifying data,3.0,4.0,3.5,1.0937072515028403,0.082095307861221
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,le overhead overall modify variable directly,4.0,3.0,3.5,1.2810757730974436,0.0
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,original variable referenced modified directly called function,3.0,3.0,3.0,1.0627376005190512,0.034756930697844565
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,give function ability access modify caller argument data directly,3.0,4.0,3.5,0.9936450104506066,0.0722702432694248
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,give called function ability access modify caller argument data directly,3.0,3.0,3.0,0.9881835914170122,0.07022138706922457
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,le overhead passed value especially using large number,4.0,3.0,3.5,1.129612304269272,0.12579153083090192
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,large data item passed without copying entire data point reducing execution time amout memory space needed,5.0,5.0,5.0,1.0059166158467876,0.14836624140559546
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,data modified directly instead making copy data improves execution time large amount data,4.0,4.0,4.0,0.8167771393414737,0.38545262620770715
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,function directly modify argument passed reference,3.0,4.0,3.5,1.1226109905672368,0.037753055346964055
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,give access modify caller argument data directly eliminate pas value overhead copying large amount ofdata,5.0,5.0,5.0,1.0715113329213208,0.11350926196844206
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,take le memory thus would make program faster,4.0,4.0,4.0,1.2204686326617713,0.0
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,able modify variable referenced directly,3.0,4.0,3.5,1.2570783076405145,0.0
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,pas reference modify value opposed passing value change value,3.0,4.0,3.5,1.2733221593996424,0.0
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,memory address sent function copy object sent need made make function run faster save memory,5.0,5.0,5.0,0.968073553493844,0.10896271607987185
3.4,What is the main advantage associated with function arguments that are passed by reference?,avoids making copy large data structure calling function,actual argument associated dummy argument function subroutine referenced procedure reference actual argument list identifies correspondence actual argument provided list dummy argument subprogram,3.0,3.0,3.0,1.2108218613207622,0.011155358879298532
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,compiler selects proper function execute based number type order argument function call,5.0,5.0,5.0,0.809155223734499,0.3391292319592437
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,differentiated compiler used one overloaded function,4.0,2.0,3.0,0.8771904200643669,0.29807061326435547
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,compiler distinguishes overloaded function signature encodes function identifier number type parameter generate linkage ensures proper overloaded function called,5.0,5.0,5.0,0.751089871088866,0.39975695948567713
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,overloaded function distinguished signature name mangling name decoration linkage ensures proper overloaded function called type argument conform tpes parameter,5.0,5.0,5.0,0.8897134086102236,0.29206270210423196
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,compiler selects proper function execute based number type order argument function call,5.0,5.0,5.0,0.809155223734499,0.3391292319592437
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,type initilized int char etc,2.0,4.0,3.0,1.2956646572221653,0.0
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,selects proper function execute based number type order argument function call,5.0,5.0,5.0,0.8741710247188588,0.2873916520789317
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,overloaded function must return type different input parameter,1.0,5.0,3.0,1.021598872997021,0.2043363826187301
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,examines name type order argument function,5.0,5.0,5.0,1.0638161808358089,0.0980726518502672
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,unique function signature,5.0,5.0,5.0,0.7960208561911156,0.3837762688148201
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,based number type order argument function call,5.0,5.0,5.0,0.9188969103606895,0.2960462524668372
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,compiler selects proper function execute based number type order argument function call,5.0,5.0,5.0,0.809155223734499,0.3391292319592437
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,answered,0.0,0.0,0.0,1.3388466617764527,0.0
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,return type different input parameter,1.0,5.0,3.0,1.2585597016611856,0.0
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,overloaded function differentiated parameter,4.0,5.0,4.5,0.9004120184921962,0.2474786313856982
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,compiler selects right function execute number type order argument function call,5.0,5.0,5.0,0.8723442156708678,0.2955476164925695
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,creates set candidate function set viable function,3.0,3.0,3.0,0.9586555686367193,0.1400754508480098
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,function signature,5.0,5.0,5.0,0.8100939314833275,0.6448981607183638
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,number type parameter,5.0,5.0,5.0,1.23873022960496,0.0
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,function signature,5.0,5.0,5.0,0.8100939314833275,0.6448981607183638
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,name different parameter,3.0,4.0,3.5,1.2164785909951308,0.0
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,differntiated number type order argument function call,5.0,5.0,5.0,0.9810009190167652,0.15711380949073916
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,look number type order argument function call,5.0,5.0,5.0,1.0025254338437053,0.16549148550563253
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,compiler differentiates overloaded function signature,5.0,5.0,5.0,0.709620870272675,0.4863153336225772
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,number type order argument,5.0,5.0,5.0,1.2987823104435097,0.0
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,compiler selects proper function execute based number type order argument function call,5.0,5.0,5.0,0.809155223734499,0.3391292319592437
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,paremeters,4.0,5.0,4.5,inf,0.0
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,number type order parameter,5.0,5.0,5.0,1.25049939590285,0.0
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,number type argument,5.0,5.0,5.0,1.3023219587181503,0.0
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,signature return type argument list,3.0,5.0,4.0,1.1257892180953346,0.23917839824599993
3.5,How are overloaded functions differentiated by the compiler?,based function signature overloaded function called compiler find function whose signature closest given function call,overloaded function simply invovles haing method name within class used implement method subclass override word replaces implementation super class overloading concept providing different meaning object based context presence overloading one type polymorphism also feature programing,1.0,5.0,3.0,1.1169876083774681,0.09505576332288047
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,base case simplest case problem function lead happen end infinite loop condition know terminate,5.0,5.0,5.0,0.9995376549650943,0.20426366679051663
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,badly designed algorithyms using recursion non recursive problem,2.0,3.0,2.5,1.0862608749027305,0.10741666822759019
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,infinite recursion occur base case omitted recursion step written incorrectly never converges base case,5.0,5.0,5.0,0.5291027613270809,0.5824125535421097
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,infinite recursion infinite loop condition met either omitting base case writing recursion step incorrectly converge base case cause indefinite recursion eventually exhausting memory,5.0,5.0,5.0,0.7852269086789001,0.48768563089507355
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,either omitting base case writing recursion step incorrectly converge base case cause infinite recursion,5.0,5.0,5.0,0.5476639562369878,0.5983878390755345
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,base case return base value,3.0,5.0,4.0,0.9578953339047549,0.4065509285612048
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,incorrect missing base case must reduce base case function must get simpler time run converge base case,5.0,5.0,5.0,0.8885758097257174,0.3242024712192046
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,base case change value,4.0,5.0,4.5,0.9315655507818333,0.32551824765763404
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,recursive call problem diminish diminish base case cause infinite recursion,5.0,5.0,5.0,0.8848073435833844,0.22861141559672543
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,omitting base case incorrectly calling recursive step,5.0,5.0,5.0,0.4877814677311431,0.5055385208728049
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,recursive problem reduced reach base case,4.0,5.0,4.5,0.8509943342877044,0.2179553831065695
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,lack defining base case writing recursion step incorrectly converge base case,5.0,5.0,5.0,0.5486904283026234,0.5769865244292859
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,proper case leave recursion,3.0,5.0,4.0,0.9295323781118606,0.28883357207611776
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,base case recursive call converge base case,5.0,5.0,5.0,0.8936174765848777,0.3879732854371535
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,base case incorrectly written recursion step converge base case lead infinite recursion,5.0,5.0,5.0,0.5266024886883356,0.6400960898111668
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,recursion function never reach successfully defines base case recurse forever happens many way function progress towards base case function coded poorly even contain base case,5.0,5.0,5.0,0.8552363928212986,0.3280204687498783
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,creating base case case base case never met,5.0,5.0,5.0,0.9240744771252266,0.38605181734454425
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,improper handling case possible value able handled,2.0,5.0,3.5,1.0956607394246367,0.08114256970639155
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,base case recursion step reduce problem recursive call,4.0,5.0,4.5,0.638648567175592,0.49981474810134086
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,base case single return include calling function static value end,2.0,5.0,3.5,0.9523871688230314,0.2110446711235116
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,either omitting base case writing recursion step incorrectly reach base case cause infinite recursion,5.0,5.0,5.0,0.5454047897843086,0.6012268278788274
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,omitting base case writing recursive call converge upon base case,5.0,5.0,5.0,0.885770981806837,0.31316054521673053
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,either omitting base case writing recursion step incorrectly converge base case,5.0,5.0,5.0,0.5656915681843697,0.6054141547403347
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,infinite recursion may occur base case defined call varied,4.0,5.0,4.5,0.7044611034603468,0.41131506264878337
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,base case building recursion process converge base case,5.0,5.0,5.0,0.7839568719623935,0.441726106838503
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,either omitting base case writing recursion step incorerectly,5.0,5.0,5.0,0.5365922337505187,0.41243111458271053
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,base case programmar define base case simplest case never get reached,5.0,5.0,5.0,0.8704860530998277,0.3280349625535621
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,easily reached base case base case,5.0,5.0,5.0,0.9326453208944439,0.39952076073671305
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,function never allowed reach case,5.0,5.0,5.0,1.0762988770246076,0.11042954976999787
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,base case base case never met,5.0,5.0,5.0,0.9359277190890534,0.3936332977789939
3.6,"When defining a recursive function, what are possible causes for infinite recursion?",recursion step defined incorrectly base case included,recursion refers situation function call type function known recursive function said infinite recursion occurs function designed way call self forever without stopping possible cause,1.0,5.0,3.0,1.1362282990113632,0.12396140861437048
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,involve controlled repetition structure termination test also loop forever,5.0,5.0,5.0,0.7134464434048783,0.48392761857126687
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,discussed earlier recursion may used process iterative action recursion used calculation answer described function relates,1.0,3.0,2.0,1.2358271787478388,0.0
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,iteration recursion based control statement involve repetition also occur indefinitely,5.0,5.0,5.0,0.8886404997403543,0.36978994266109444
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,based control statement structure structure involve repetition us repetition structure function call involve termination test test case gradually approach termination counter test fails progressively simpler version problem occur indefinitely condition never fails recursion step simplify problem,5.0,5.0,5.0,0.9023614656312949,0.4978617711665793
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,iteration recursion many similarity based control statement involve repetition involve termination test gradually approach termination occur infinitely,5.0,5.0,5.0,0.6578235889380787,0.6720707729459593
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,rely repetition base case become infinite loop anything recursive also solved iteration,5.0,5.0,5.0,1.1279933272857368,0.10305781872127812
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,repeat loop condition met exit loop capable entering infinite loop,3.0,5.0,4.0,1.2525698727390429,0.0
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,anything iterativly recursively,2.0,4.0,3.0,1.2698502348041951,0.0
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,repetative end test,4.0,5.0,4.5,1.042848567759763,0.19154016403210222
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,incorrectly writing either result infinite loop perform task,3.0,4.0,3.5,1.225121031081134,0.0
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,based control statement involve repetition involve termination test gradually approach termination occur infinitely,5.0,5.0,5.0,0.4963557411833885,0.7652498969428981
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,based control statement involve repetition involve termination test gradually approach termination occur infinitely,5.0,5.0,5.0,0.4963557411833885,0.7652498969428981
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,answered,0.0,0.0,0.0,1.36764418704547,0.0
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,anything recursively iteratively,2.0,4.0,3.0,1.2610304050366623,0.0
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,many problem solved iteration recursion either may go condition infinite execution termination test omitted,2.0,5.0,3.5,1.0566338515788511,0.19272238679573675
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,iteration recursion use repetition perform several simple operation algorithm successively reach certain limit involve termination test find limit slowly approach termination limit based control statement well coded poorly continue forever compiler computer either lock shuts halt operation,5.0,5.0,5.0,1.085093079333007,0.24621908255363678
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,based control statement involve repetition involve termination test within loop,5.0,5.0,5.0,0.6844013972359505,0.5746824374475064
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,method repeating task,1.0,3.0,2.0,1.2317823764018985,0.0
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,involve termination test use control statement repition solve problem also result infinite loop,5.0,5.0,5.0,0.9252734603084628,0.3137530055868543
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,based control statement involve repetition involve termination test,5.0,5.0,5.0,0.5839716253704376,0.634165140368086
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,base control statement involve repetition involve termination test gradually approach termination occur infinitely,5.0,5.0,5.0,0.49998509441991285,0.7670361761909953
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,based control statement involve repitition involve termination test gradually approach termination potentially occur infinetly,5.0,5.0,5.0,0.6555041353215039,0.49900097707104074
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,based control statement involve repetition involve termination case graduatlly approach termination case occur infinitely,5.0,5.0,5.0,0.5990926818611148,0.6337669795574733
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,use repetition control test terminate infinitely repeat defined correctly,5.0,5.0,5.0,0.7799521879002469,0.36449892612392143
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,based control statement gradually approach termination ending termination test involve repetition repeat infinitely termination requirement met,5.0,5.0,5.0,0.7342862277767573,0.5563237211155884
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,based control statement involve repetition involve termination test gradually approach termination occur infinitely,5.0,5.0,5.0,0.4963557411833885,0.7652498969428981
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,used solve type problem task cirtain conditional statement reached called base case recursion,3.0,4.0,3.5,1.2499393543238966,0.0
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,based control statement involve repetition involve terminal test occur infinitly,5.0,5.0,5.0,0.6477142235048462,0.5312958502833003
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,repetition termination test eventually terminate occur infinately,5.0,5.0,5.0,0.4292203948773671,0.50188325966989
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,need kind base case tell loop need stop,3.0,3.0,3.0,1.2778453075469778,0.0
3.7,What are the similarities between iteration and recursion?,involve repetition termination test occur infinitely,able repetiive task however recurisve call different parameter defines exit clause guaranteeed reached iterative includes loop iterates number time check exit clause every time,2.0,5.0,3.5,1.2326671114736019,0.0
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,int n 10 10 integer int n arraysize arraysize positive integer defined user,3.0,5.0,4.0,1.3322159743780395,0.0
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,either inputing different element array coding giving array specifacations size array also possible giving specifacations tell array grow needed,3.0,5.0,4.0,0.9896201226111381,0.09640378627025853
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,initialize array using initializer list declaration initializing size constant variable,5.0,5.0,5.0,0.7298660794839112,0.6383534811657152
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,pas length along array use vector,2.0,4.0,3.0,1.0326227081957633,0.05374639826990654
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,one way declare size array using variable equal integer way size omitted declaration compiler determines size array based size initializer list,5.0,5.0,5.0,0.9458870701183777,0.3639098795432551
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,declaration int array x initilizer int array etc,5.0,5.0,5.0,0.8164579005336847,0.23954972740493113
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,declare length array int array 10 initialize array int array 0 1 2 3 assume size 4,5.0,5.0,5.0,0.9818319084662379,0.13764585269586666
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,statically dynamically,2.0,3.0,2.5,1.3337920519008593,0.0
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,explicitly int array 10 variable const int size 10 int array size,3.0,5.0,4.0,1.0558014159398172,0.05672445917951148
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,array length explicitly specified inputing number element bracket declaration implicitly including initializer list without specifying number compiler automatically declare array proper number element needed list,5.0,5.0,5.0,0.9589706425346838,0.3266954665606596
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,specify array size constant variable setting array element calculation,2.0,5.0,3.5,1.0186233694808275,0.09532372956019364
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,statically using dynamically using,4.0,4.0,4.0,1.023497969423668,0.2759840086239696
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,define array 5 array,4.0,5.0,4.5,0.9703617963244987,0.16835675822081886
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,static dynamic,2.0,3.0,2.5,1.320655666975692,0.0
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,manually inside bracket automatically via initializer list,5.0,5.0,5.0,1.0759900473003459,0.2576057366301745
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,use initializer list simply tell compiler many element want array initializer list int 10 2 3 5 elemental declaration int b 5 array 5 element array already initialized,5.0,5.0,5.0,0.9716730106219683,0.47673501618330927
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,string specify strlen arrayname command get length string another way integer initiate size start ex array 40 specifying possible length passed object actual ammout array another way declare initializing program,4.0,5.0,4.5,1.1801802844444722,0.04240390142774817
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,implicit namely give value like compiler automatically give size static declaration,5.0,5.0,5.0,1.1693491576598574,0.1308576839715204
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,supply integer inside bracket compiler count number element initializer list int n 5 int n,5.0,5.0,5.0,1.205470214224669,0.19781817304506347
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,either initializing array specific length initializing array declaring content,5.0,5.0,5.0,0.9665324521044892,0.08162480218091928
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,within bracket using initializer list,5.0,5.0,5.0,0.6688403152079045,0.5190184516049646
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,specify number element array declaration constant using constant variable future scalability,3.0,5.0,4.0,0.9478890653617832,0.27452603265281883
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,number variable,3.0,3.0,3.0,1.2318659221365997,0.0
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,explicitly declaring bracket int array 50 implicitly initializing several value int array 1 2 3,5.0,5.0,5.0,1.0898705473790273,0.06596648313616013
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,one way specifying array 10 way specifying array arraysize,4.0,5.0,4.5,0.9486554871416801,0.06924337394615085
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,array declaration initializer list array size constant variable,5.0,5.0,5.0,0.6128642700089104,0.6973090403604528
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,initializing size bracket int 100 initializing length assigning variable int,5.0,5.0,5.0,1.2874673137854238,0.0
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,user defined value number element initializer list,5.0,5.0,5.0,1.055832894082718,0.35788625150404807
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,assign size inside bracket declare array 3 set many item set array equal,5.0,5.0,5.0,1.067124438239952,0.07660753216256305
4.1,What are the two different ways of specifying the length of an array?,array declaration using initializer list,use arraylist program ask array many element obj member length number slot,3.0,5.0,4.0,1.115806654905433,0.03801763517811855
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,string used char array much easier manipulate string object character stored separately rather whole,1.0,4.0,2.5,0.9281368258825442,0.2420972458247046
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,type string us le storage change string array character make permutation word using character stored array without needing actually access change variable array character change accessed,1.0,5.0,3.0,0.8416361878718276,0.34863752962758776
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,unlike string declared using type string string declared using array character programmer must provide null terminating character must ensure array large enough hold string null terminating character,5.0,5.0,5.0,0.6319154739016372,0.5694645189811964
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,string represented character array end null character declare object type string like type example string,5.0,5.0,5.0,0.694410835369838,0.47861532948684193
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,using array character one store manipulate string rather type string variable,1.0,4.0,2.5,0.790543820653451,0.4037404850197488
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,type string array char make array single letter character array string actual array word array char array,0.0,4.0,2.0,0.8165311672634726,0.4320636618406004
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,basically however string end null character denoting end string size char array potential size must declared limited,2.0,5.0,3.5,0.7089275890161256,0.43183206281797704
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,string class standard library method modify whereas char array able modifie user,4.0,4.0,4.0,1.030824254545615,0.11939582104194778
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,using array character limited size array character declaring type end string acknowledged white space,3.0,4.0,3.5,0.6380702773967695,0.4262804790235437
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,data class type string designed handle character data many function built class library deal array character however subject rule array real additional functionality another difference string class deal null character implicitly unlike array character must handle null character explicitly,5.0,5.0,5.0,0.8999109584772881,0.3558297696844059
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,string declared used array character contains character array special character called null character versus type string,5.0,5.0,5.0,0.6567131214812185,0.5641726349831468
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,char array read string individual character string literal array read entire string,2.0,4.0,3.0,0.8354671362133138,0.33337351815358546
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,array character hold many character array size string limited,4.0,4.0,4.0,0.7751121690168232,0.4126047932070156
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,sting modified function string class array character modified user,3.0,4.0,3.5,0.8922137570297304,0.20465923964972715
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,type string array contains additional terminating null character,3.0,5.0,4.0,0.7057809804682263,0.3903269895874022
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,array character null character end array signify array end string,5.0,5.0,5.0,0.5069057245569925,0.6588955399803389
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,string type string string part array list one declared array actually array character able pointed detected,2.0,4.0,3.0,0.7145809697015029,0.44231761507653344
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,array character set length type string virtually unlimited length,4.0,4.0,4.0,0.8694539023766013,0.24508684581750115
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,char array individual letter accessed directly array subscript notation string array array subscript return entire string,1.0,3.0,2.0,0.8904176644028694,0.2660167477322618
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,array character need termination character well size specification whether explicit implicit,5.0,5.0,5.0,1.0260251345039295,0.19605194171923013
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,using array individual character accessed manipulated,1.0,4.0,2.5,0.8231544839340015,0.3078091663688842
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,string declared using array character could result data loss character array initialized large enough,4.0,4.0,4.0,0.6770300532646929,0.4517448400977929
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,array passed reference therefore array character changed memory changed variable,3.0,4.0,3.5,0.8864151302520121,0.19840326884448367
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,type string several function available using char array individual character array directly accessible character string type string,3.0,4.0,3.5,0.7853250532913301,0.4425587340469101
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,declaring string includes white space declaring array character include white space,0.0,3.0,1.5,0.8788213144167242,0.15337123216912824
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,array character one element string doesnt termination element null,5.0,5.0,5.0,0.6120853430472213,0.4788967437121218
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,string declared using type string vary length string declared using array character extend past array length,4.0,4.0,4.0,0.6465263849692073,0.5138221568959577
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,cant modify individual character type string array character type array modify individual character,1.0,4.0,2.5,0.840718335780577,0.31593471713440363
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,type string class safer array character,3.0,4.0,3.5,0.8145220937907468,0.3301261937410336
4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,string declared using array character null element added end array,array collection similar data type ex int 10 ten indicates size array index array give integer value array string mean collection group character string declaration datatype usually cause storage allocated memory capable holding predetermined number symbol however array declared contain value non reference data type multiple arrarys type,1.0,4.0,2.5,0.9895994608314066,0.25510150510543056
4.3,How are arrays passed to functions?,reference,reference,5.0,5.0,5.0,0.0,1.0
4.3,How are arrays passed to functions?,reference,reference pointer element array,4.0,5.0,4.5,0.9849753816461093,0.6460556132959285
4.3,How are arrays passed to functions?,reference,array passed function reference,5.0,5.0,5.0,1.0136618133951316,0.563535651257426
4.3,How are arrays passed to functions?,reference,name,5.0,5.0,5.0,1.2019283438108785,0.0
4.3,How are arrays passed to functions?,reference,array passed reference,5.0,5.0,5.0,0.9039658063247646,0.593062494302431
4.3,How are arrays passed to functions?,reference,must pas array size function ex function array size,4.0,4.0,4.0,1.3503242819582095,0.0
4.3,How are arrays passed to functions?,reference,usually way pas anything else specify length char array pas function sending name array example char str 20 ispalindrome str sends char array function ispalindrome otherwise would need send length array well,3.0,4.0,3.5,1.3422196084336422,0.0
4.3,How are arrays passed to functions?,reference,pas pointer first item also pas size,4.0,3.0,3.5,1.3172786848394635,0.0
4.3,How are arrays passed to functions?,reference,reference,5.0,5.0,5.0,0.0,1.0
4.3,How are arrays passed to functions?,reference,two part array size function passed avoid bound error,4.0,4.0,4.0,1.334589365045013,0.0
4.3,How are arrays passed to functions?,reference,specify array name without bracket array size normally passed another argument function process specific number element array array passed reference individual array element passed value function take array argument,5.0,5.0,5.0,1.2833576080553482,0.1346305694255905
4.3,How are arrays passed to functions?,reference,array passed reference,5.0,5.0,5.0,0.9039658063247646,0.593062494302431
4.3,How are arrays passed to functions?,reference,way declaration actual function,3.0,3.0,3.0,1.2803041018935957,0.0
4.3,How are arrays passed to functions?,reference,specify array name without bracket,3.0,3.0,3.0,1.3084503328751664,0.0
4.3,How are arrays passed to functions?,reference,reference,5.0,5.0,5.0,0.0,1.0
4.3,How are arrays passed to functions?,reference,pas name array function int bin 10 pas array like jingle bin jingle must declared correctly order receive array either prototype void jingle int definition initialization void jingle int array also worth noting array passed function reference copy large array burn memory give function complete control array however,5.0,5.0,5.0,1.307056888253058,0.0759938866765626
4.3,How are arrays passed to functions?,reference,called function function must loop array get set character,1.0,3.0,2.0,1.3285745067315042,0.0
4.3,How are arrays passed to functions?,reference,reference default unless specify const later make array unmodifiable,5.0,5.0,5.0,1.152818904430504,0.24462441888125205
4.3,How are arrays passed to functions?,reference,function recieves array array size parameter function arrayname arraysize,4.0,4.0,4.0,1.3320776221157256,0.0
4.3,How are arrays passed to functions?,reference,specifying array name passing reference argument function,5.0,5.0,5.0,1.0953056070419642,0.34153242477408374
4.3,How are arrays passed to functions?,reference,1st must specify array name without bracket array name size passed two argument function call,4.0,4.0,4.0,1.3212026737146392,0.0
4.3,How are arrays passed to functions?,reference,array passed reference passing starting address array programmer specifies array name without bracket pass array size another argument function process specific number element array,5.0,5.0,5.0,1.262641939243358,0.16551032928388656
4.3,How are arrays passed to functions?,reference,reference,5.0,5.0,5.0,0.0,1.0
4.3,How are arrays passed to functions?,reference,reference,5.0,5.0,5.0,0.0,1.0
4.3,How are arrays passed to functions?,reference,reference,5.0,5.0,5.0,0.0,1.0
4.3,How are arrays passed to functions?,reference,refrence,5.0,5.0,5.0,1.1593175105668851,0.0
4.3,How are arrays passed to functions?,reference,function int int length,4.0,4.0,4.0,1.3108507125073738,0.0
4.3,How are arrays passed to functions?,reference,reference,5.0,5.0,5.0,0.0,1.0
4.3,How are arrays passed to functions?,reference,reference,5.0,5.0,5.0,0.0,1.0
4.3,How are arrays passed to functions?,reference,function read variable store return ever variable read function print content array,1.0,4.0,2.5,1.3189818808077716,0.0
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static array store new value assigned element meaning call function twice use last value returned first time declare static new value stored reset original value,5.0,5.0,5.0,0.9739032842488615,0.14437767961822173
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static array referenced accessed also static array used without creating object,3.0,5.0,4.0,0.9635827023565943,0.23055054866722893
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,array declared static created initialized time function also destroyed function terminates,5.0,5.0,5.0,0.7376790187176113,0.3409992467273075
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,program intializes static local array declaration first encountered static array initialized explicityly programmer earch element array intialized zero compiler array created array member initialized,3.0,5.0,4.0,0.7547294062053701,0.3879220642623674
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,array static remain size throughout program execution,3.0,5.0,4.0,0.8051638431504078,0.356087746873798
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static array initilized non static array program reach initilization line,5.0,5.0,5.0,0.8919816089628287,0.25994191259312066
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,array declared static available beginning program end one static declaration disappears accessed within right scope,4.0,5.0,4.5,0.8793421265569312,0.2658405496940836
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static array size size changed dynamic array get size runtime,1.0,5.0,3.0,0.9890865440656634,0.1555170123048908
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,array declared static created time array called,5.0,5.0,5.0,0.739588509385078,0.4491007354431464
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,array declared static every time function declaring called static array initialize declaration store value element throughout duration program even function called multiple time static array initialize,5.0,5.0,5.0,0.61042174698368,0.420833115885849
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,element initialized zero explicitly initialized happen automatic local array,4.0,5.0,4.5,1.0275112462222526,0.2228677619344161
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,element initialized zero explicitly initialized static array array initialized zero,4.0,5.0,4.5,0.8977103279128328,0.34443241973060984
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static changed,1.0,5.0,3.0,1.2083192334789206,0.15166997744958713
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static array set size change data may need space assigned could go beyond size,3.0,5.0,4.0,1.0875810029882234,0.10001441340857736
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static member prevents naming conflict put global namespace allowing information hiding private public,1.0,5.0,3.0,1.1782113445554632,0.05016395179428819
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static local array exists duration program element initialized 0 explicitly initialized static local array element still called later unless specifically initialized something else happen automatic array,5.0,5.0,5.0,0.8177956164036232,0.35694797513451276
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static array declared size known program whereas array leave size undeclared open assigned later usually used input purpose,1.0,5.0,3.0,0.8905978163003772,0.19401818428727885
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static array keep value end function non static reinitialize every time,5.0,5.0,5.0,0.9353992721297839,0.2145820505308681
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static array created initialized value destroyed function terminates program automatic array reset everytime function called,5.0,5.0,5.0,0.6608409364063629,0.33986638655034274
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,created initialized time program call function destroyed every time function end program,5.0,5.0,5.0,0.9351619347265643,0.24186540351936225
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,declare static array destroyed function array declared static array created initialized every time function call,5.0,5.0,5.0,0.6574138675903517,0.42826142658719085
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static array exists duration program,4.0,5.0,4.5,0.8759281207011983,0.24799363366766783
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,array declared static declared,2.0,5.0,3.5,0.8495180718684894,0.4298317634374884
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static array exists memory program terminates whereas automatic normal array removed function created terminates,5.0,5.0,5.0,0.7891246972862779,0.19262765761721895
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,answered,0.0,0.0,0.0,1.345966458661358,0.0
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,constant used declare size automatic static array exists duration program initialized declaration first encountered element initialized zero explicitly initialized,5.0,5.0,5.0,0.8478099597640537,0.31797934084565116
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static array changed program,1.0,5.0,3.0,0.8887709739860906,0.3281377352988021
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static array available throughout program,5.0,5.0,5.0,0.7992520321435379,0.4461678152314682
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,static array allocated program start freed program exit limited scope array declared static allocated freed come scope,5.0,5.0,5.0,0.8417373873435966,0.2476155449485855
4.4,"What is the difference between an array declared as static, and one that is not?",array declared static live throughout life program initialized function declares array first called,declared fixed static mean ca change size storage allocated however one dynamic arrarys resized,1.0,5.0,3.0,1.0538807354058493,0.1021308411866941
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,least 2 depending many array used,1.0,4.0,2.5,1.2258319238613498,0.0
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,,2.0,5.0,3.5,inf,0.0
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,passing array dimension must specified except first dimension,5.0,5.0,5.0,0.6294249842970483,0.6639202158071803
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,depends parameter passing multidimensional multideminsional two dimension,2.0,5.0,3.5,1.0151256442807493,0.18632714922941715
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,first dimension required however subsequent dimension needed compiler,5.0,5.0,5.0,0.7686902935499874,0.4283407777276421
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,first,5.0,5.0,5.0,0.968277884988352,0.3760994739881545
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,dimension must specified,2.0,5.0,3.5,0.9495565919065055,0.32182169616534667
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,first one least,1.0,3.0,2.0,0.6531633230322367,0.3740896497676441
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,two paramaters array many column array 3,4.0,4.0,4.0,1.2153661087931116,0.0
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,size first dimension omitted regular array however every dimension outside first size dimension must specified passed example array 2 4 6 name multiarray would passed multiarray 4 6 2,4.0,5.0,4.5,1.0139864467158306,0.3507897700409923
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,size subsequent dimension required compiler must know many element skip move second element first dimension,4.0,5.0,4.5,0.9205666216078768,0.3307196510750863
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,every dimension first,5.0,5.0,5.0,0.5742334243675251,0.5395874790405468
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,,2.0,3.0,2.5,inf,0.0
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,size first dimension need specified dimension,5.0,5.0,5.0,0.7437169146287322,0.5262354402623814
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,passing main multidimensional array function dimension need specified,1.0,3.0,2.0,1.0930142053135141,0.20653069426472737
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,dimension except first one need specified passing array function compiler need know many memory address skip make back 2nd element first dimension size first dimension need specified,5.0,5.0,5.0,0.8663237072882762,0.5297233212900878
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,many dimension commonly row column,2.0,5.0,3.5,1.0010239442439932,0.19370598015441473
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,least 2 always equal number dimension argument expecting like blah require 4 dimensional array input blah require 3 dimensional array blah require 2 dimensional array,1.0,5.0,3.0,1.1828713006311784,0.07223440753989109
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,none pas array name,1.0,3.0,2.0,1.2339053857616056,0.0
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,subsequent dimension first dimension first needed specified,5.0,5.0,5.0,0.6223794256840589,0.5197894299574255
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,dimension excluding first one,5.0,5.0,5.0,0.2960734266839068,0.5202461745691801
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,dimension first,5.0,5.0,5.0,0.6249734419887567,0.6945883083108988
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,first need specified size rest need stated first like 3,1.0,5.0,3.0,1.0007530732509182,0.14480625211979486
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,one le number dimension array contains,4.0,5.0,4.5,0.8749190329681987,0.4153312494064342
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,answered,0.0,0.0,0.0,1.3429896716054466,0.0
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,one,1.0,3.0,2.0,0.8996127106917129,0.38949281805407837
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,subsequent dimension first one,5.0,5.0,5.0,0.32410222964432644,0.552572833466576
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,two,1.0,4.0,2.5,1.1839844760969909,0.0
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,1 le total number dimension,4.0,5.0,4.5,0.9920160190305073,0.2818276953494383
4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,dimension except first one,multi dimensional array accessed using 1 index one dimension least,2.0,5.0,3.5,1.0098562293272384,0.27192536729170086
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,take element array compare next element depending value two element switch program compare new switched element next one array,1.0,5.0,3.0,0.9134946731947515,0.1835429974523187
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,insertion sort divide list sorted unsorted region take item unsorted region insert correct order sorted region,5.0,5.0,5.0,1.0517004830475503,0.09978117857285154
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,sorted array list built one entry time,3.0,4.0,3.5,0.9339345692920014,0.21457628976992982
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,start second element check see le element left insert corrected position,5.0,5.0,5.0,0.8017848113008312,0.3250696605513711
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,compare two number time swap entire list sorted,1.0,3.0,2.0,1.0639265788410346,0.132323715611017
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,assume first number sorted move list number come across corresponding place sorted side list,5.0,5.0,5.0,1.1386770057469662,0.08408618163179787
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,insertion sort k iteration first k item array sorted take item insert correct position already sorted k element,5.0,4.0,4.5,0.7938437744512662,0.3763621126841193
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,looking 2nd element move forward place element correct spot,4.0,5.0,4.5,1.0633237672022786,0.0918643767360144
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,starting beginning array take element order place correct position relative previously sorted element,5.0,5.0,5.0,0.7671824807713505,0.2263770553522075
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,sort element array removing element input data inserting correct position,5.0,5.0,5.0,0.8866701128606991,0.20780154128330908
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,insertion sort remove element data insert correct position already sorted list,5.0,5.0,5.0,0.7916296287364393,0.3964976690411325
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,take number choose pivot point insert number correct position pivot point,2.0,4.0,3.0,1.0286573798377059,0.11536944358098514
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,marker sort everything left value every new value moving right,3.0,3.0,3.0,0.978608580687716,0.1651724426068581
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,main idea behind insertion sort take random variable right insert order left,4.0,5.0,4.5,0.9111849215993034,0.25212703595236785
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,insertion sort progress list element determines next element inserted already sorted array starting sorting using first two element,5.0,4.0,4.5,0.8057834059623022,0.2513931660692991
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,go list picking integer putting desired position continuing,4.0,4.0,4.0,1.1417232872329421,0.06936957486093105
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,inserting array item appropriate position smallest largest pivot start second element array,3.0,4.0,3.5,0.9384741990737564,0.14960753309517133
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,insert item proper position shifting larger sorted array value right,1.0,5.0,3.0,0.7878006086659193,0.34993703127350445
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,comparison sort sorted array built one entry time,4.0,4.0,4.0,0.9318288442074747,0.18667251054726586
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,insertion sort algorithm first element array sorted list pick one one taken unsorted array sorted array,5.0,4.0,4.5,0.8746717384314485,0.2527372768779834
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,every iteration insertion sort take away element input data inserting right position sorted list,5.0,5.0,5.0,0.8269219151073325,0.24528016274141967
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,insertion sort creates new array insert item place respect new array,4.0,4.0,4.0,1.0724934102837405,0.11575846340091789
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,insertion sort take entitity unsorted array order sort correct position entity sorted,5.0,5.0,5.0,0.9386830398768674,0.1280211009346249
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,take second element swap 1st le keep larger go third element insert right place respect first 2 element,5.0,5.0,5.0,0.9076043689002629,0.23749232706749795
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,starting first element array following element put place determining smaller larger starting element,3.0,5.0,4.0,0.9718039922923578,0.1423652899359051
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,one one item taken placed correct place sorted portion array item,5.0,4.0,4.5,0.9178974150116247,0.14931100317020402
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,take element insert correct position respect element,5.0,5.0,5.0,0.8777796713159464,0.31090399205643265
5.1,"In one sentence, what is the main idea implemented by insertion sort?",taking one array element time left right insert right position among already sorted element left,insertion sort simple sorting algorithm comparison sort sorted array list built one entry time,4.0,4.0,4.0,0.9033864742502731,0.1360177572906138
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,search array largest smallest element moved front array search next largest smallest element move front,5.0,5.0,5.0,0.9858313782718946,0.13030324739833168
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,selection sort search whole array largest item put end array search second largest item put second last spot,5.0,4.0,4.5,1.1248853571689255,0.02860178798313294
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,find minimum value swap value first position,5.0,5.0,5.0,1.0705663165614403,0.2394786059922029
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,find minimum element array swap first element repeat step swapping minimum element nth position array,5.0,5.0,5.0,0.7284491579194567,0.42354315304538814
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,find lowest value place front find next lowest place front last value etc,4.0,5.0,4.5,1.2308955585018808,0.0
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,cycle unsorted list place minimum next slot sorted list repeat,5.0,4.0,4.5,1.1615577013539753,0.08103146477352934
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,find minimum value list swap first element list find second largest swap second element array continue like array sorted,5.0,5.0,5.0,0.8631843211615462,0.33786771685378986
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,find smallest put current position till get end,5.0,5.0,5.0,1.1654339853443532,0.1080581090116956
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,find lowest unsorted value array place current position starting first element array advance current position one,5.0,5.0,5.0,0.9060238418206921,0.27084515090334926
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,sort element comparing two element swapping smaller one sort element array,2.0,5.0,3.5,0.7646653595429331,0.28726649517268366
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,selection sort find minimum value list swap first value list repeat throughout list,5.0,4.0,4.5,1.0679415114739865,0.1669024884107131
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,select minimum number array put current position move,5.0,5.0,5.0,0.971040778409856,0.23617055170020618
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,find lowest value place front list swap value continue moving right,5.0,5.0,5.0,1.0401219766045562,0.13663843245904872
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,main idea behind selection sort take least variable right put directly left,5.0,4.0,4.5,0.9992935961914567,0.08829997784772044
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,find smallest value list make first element find smallest value leftover list make first element leftover list continue list sorted,5.0,5.0,5.0,1.1188018974271454,0.08470842640581433
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,run find lowest highest value put desired position,5.0,4.0,4.5,1.2514967353133266,0.0
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,place smallest item list position 1 proceeds value last position ray reached,5.0,5.0,5.0,1.238754458051429,0.0
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,search largest item array swap last unsorted item,5.0,4.0,4.5,1.0760876775151305,0.13729008288683756
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,find smallest element place 1st position process repeated rest array,5.0,5.0,5.0,1.0230709368128188,0.0976328345128834
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,selection sort algorithm selects large item array put place select next largest array sorted,5.0,4.0,4.5,1.1134452962889363,0.04183181430759917
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,select smallest number list move front list advance next number,5.0,5.0,5.0,1.2429027837202318,0.0
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,selection sort chooses largest smallest value unsorted list creates new list using selection depending sorted,5.0,4.0,4.5,1.2149421947202639,0.0
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,selection sort find smallest number left unsorted array put end sorted,4.0,5.0,4.5,1.0625506881237636,0.07687643073808166
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,selects minimum remaining element array palces miminum current position move next position,5.0,5.0,5.0,0.7625649587019547,0.3195577244355856
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,put biggest element end list place next highest element behind,3.0,4.0,3.5,0.9522891512203051,0.14711020629388408
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,sort find largest item place end next largest found placed next last continue one number left beginning sorted array,5.0,4.0,4.5,1.026722410538759,0.0797310692599042
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,loop entire list iteration find smallest element move current position,5.0,5.0,5.0,1.0244776735517453,0.1854732801068913
5.2,"In one sentence, what is the main idea implemented by selection sort?",taking one array element time left right identifies minimum remaining element swap current element,find minimum value list swap value first position repeat step remainder list starting second position,5.0,5.0,5.0,1.038491308823085,0.1463628991153171
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,run time sorting program best case list already sorted worst case list sorted reverse,4.0,3.0,3.5,1.1024456013717088,0.1499280061641905
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,insertion sort n performs operation scenario list array already sorted,5.0,4.0,4.5,0.7759978996346537,0.2935495152044481
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,number operation insertion sort n best case insertion sort sorted list run n,3.0,3.0,3.0,0.8933573209931773,0.1633981970351392
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,best case would n take scan array make one swap array would sorted would take 1 operation,4.0,4.0,4.0,0.9228223416007542,0.22578314029710306
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,best worst,0.0,4.0,2.0,1.3783713483434277,0.0
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,n operation n number element array best case element already sorted,5.0,5.0,5.0,0.7644485069628537,0.3318752471802801
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,n,3.0,4.0,3.5,1.199269091491965,0.0
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,best case element sorted,5.0,3.0,4.0,1.1363208048014695,0.1765305286895308
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,best case scenario insertion sort element array already sorted cause loop iterate x time x number element array loop never iterate resulting insertion sort require x operation,5.0,5.0,5.0,1.072010295665046,0.18215040634900384
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,1 operation best case scenario already sorted one comparision,3.0,3.0,3.0,1.0313230227503452,0.1905789218891127
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,n operation n number item,3.0,5.0,4.0,0.9269351649818184,0.20356189040947992
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,,3.0,4.0,3.5,inf,0.0
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,n list already sorted,5.0,4.0,4.5,0.9251091127606434,0.2147154792076073
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,insertion sort take operation array reverse order,4.0,4.0,4.0,0.9335468528177021,0.20791853909627034
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,best case scenario already sorted list insertion sort progress list number operation directly proportional number element list also noted n big notation,5.0,5.0,5.0,1.0886007790148018,0.11224291092747021
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,1 list two ints one must moved,2.0,3.0,2.5,1.2726060958086995,0.0
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,best case n worst case n factorial,2.0,4.0,3.0,1.1495572997811712,0.0
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,best case array already sorted,5.0,4.0,4.5,0.8785914232331814,0.28048314606227687
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,worst case n time best case time,2.0,4.0,3.0,1.1345407075834273,0.0
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,n,3.0,4.0,3.5,1.199269091491965,0.0
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,n number time n equal number element list scenario element list already sorted,5.0,5.0,5.0,0.9777230391335934,0.09554830330296617
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,best case scenario insertion sort list already sorted number operation would number element,5.0,5.0,5.0,1.0765360922124072,0.1674837526673015
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,insertion sort make zero operation length 1 comparison best case scenario array given already order,3.0,4.0,3.5,1.029933589311556,0.24439902457579468
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,theta n best case senario everything already sorted,5.0,4.0,4.5,0.9926235278898179,0.09105770132499585
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,n operation best case scenario number increasing order,5.0,5.0,5.0,0.9744404769709722,0.09391818964937924
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,could considered one item would easiest sort could also trivial result nothing moved two item allows algorithm sort item correct order,2.0,3.0,2.5,1.2769713875264308,0.0
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,best case look list best case scenario go list make change list already sorted,5.0,3.0,4.0,1.1952048810714613,0.06785078167150287
5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",n length array operation achieved sorted array,simplistic move one element list one inserting correct position new slot starting best case 0 1,2.0,3.0,2.5,1.2848746361021992,0.0
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,base case recursive merge sort one number one number sorted list regardless number,5.0,5.0,5.0,1.1578711747949388,0.13142881960435657
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,base case recursive implementation merge sort sequence passed merge sort le 2 element,5.0,5.0,5.0,1.1980816047415623,0.0
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,base case recursive implementation merge sort one,5.0,5.0,5.0,1.3125025967766657,0.0
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,best case worst case n log n recursive merge sort,1.0,3.0,2.0,1.3069086797124103,0.0
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,one object split array sort,5.0,5.0,5.0,1.0125729573630404,0.120637777390317
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,base case length current array 1,5.0,5.0,5.0,0.8383120962031958,0.1119932511878308
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,nlog n,1.0,4.0,2.5,1.3313543520866693,0.0
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,best case one element one element sorted,5.0,5.0,5.0,1.1327436171369938,0.21494801525100168
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,array sorted 0 1 element,5.0,4.0,4.5,0.4765106034988113,0.6704369369802297
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,n 0 n lt 2,4.0,4.0,4.0,1.0325925878925697,0.0
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,list size 1 already sorted,5.0,5.0,5.0,0.5132100080984194,0.6275645728389676
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,single element array,5.0,5.0,5.0,1.049911149915081,0.1491739927322857
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,nlog n,1.0,3.0,2.0,1.3313543520866693,0.0
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,n log n,1.0,3.0,2.0,1.3162009148257305,0.0
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,list array 1 element,5.0,5.0,5.0,0.7562932500741064,0.22888127638090827
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,must merge sort,3.0,4.0,3.5,1.3218874562929506,0.0
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,single element array,5.0,5.0,5.0,1.049911149915081,0.1491739927322857
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,one element subarray,5.0,5.0,5.0,1.3185497843326681,0.0
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,array length le equal 1 array returned array merged together,5.0,4.0,4.5,0.8780176318711078,0.1925357170074837
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,right gt left mid right left 2 number temp left mid number temp right merge number temp left right,2.0,2.0,2.0,1.2163264625328618,0.0
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,sequence number zero one element,5.0,5.0,5.0,1.26332333844169,0.0
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,one element array,5.0,5.0,5.0,1.0595504613133733,0.2133950755086321
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,array length 1,5.0,5.0,5.0,0.623152373313748,0.2081165885211947
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,array one element,5.0,5.0,5.0,1.0595504613133733,0.2133950755086321
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,one element array starting element array ending element,4.0,5.0,4.5,1.0486321981382578,0.15687026734452178
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,half original array nothing else sort put half back together,2.0,3.0,2.5,1.1307355301527617,0.05982453913890831
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,size list sent lt 1,5.0,4.0,4.5,0.7470411817065461,0.21453795277495186
5.4,What is the base case for a recursive implementation of merge sort?,size array sorted 1 2,n log n,1.0,3.0,2.0,1.3162009148257305,0.0
6.1,What is a pointer?,variable contains address memory another variable,location memory contains memory address another location memory contains information,5.0,5.0,5.0,0.6146291749997935,0.5797156778220067
6.1,What is a pointer?,variable contains address memory another variable,pointer variable contains memory address value,5.0,5.0,5.0,0.4405605403524224,0.7115376290315355
6.1,What is a pointer?,variable contains address memory another variable,pointer variable store address another variable,5.0,5.0,5.0,0.4523782116178249,0.7347037453125209
6.1,What is a pointer?,variable contains address memory another variable,pointer variable contain value memory address variable,5.0,5.0,5.0,0.5068068366262576,0.5964030061805815
6.1,What is a pointer?,variable contains address memory another variable,data type whose value refers another value stored elsewhere computer memory using address,4.0,5.0,4.5,0.9557476195574687,0.24265174135310816
6.1,What is a pointer?,variable contains address memory another variable,pointer hold memory location,5.0,4.0,4.5,1.1012446114112269,0.12214444396643749
6.1,What is a pointer?,variable contains address memory another variable,name represents actual location value data type int bptr point integer value,5.0,4.0,4.5,1.2347576866187224,0.0
6.1,What is a pointer?,variable contains address memory another variable,variable store address another variable,5.0,5.0,5.0,0.44771289644697854,0.7805302270639871
6.1,What is a pointer?,variable contains address memory another variable,pointer programming language data type whose value refers directly point another value stored elsewhere computer memory using address,5.0,5.0,5.0,1.0411039423462887,0.20921925600230612
6.1,What is a pointer?,variable contains address memory another variable,data type whose value refers another value stored somewhere else computer memory using address,5.0,5.0,5.0,0.9746014465442913,0.2211208401885167
6.1,What is a pointer?,variable contains address memory another variable,like variable however instead holding data hold location memory,4.0,5.0,4.5,0.9997692883583102,0.20654518589769383
6.1,What is a pointer?,variable contains address memory another variable,pointer reference location memory,5.0,5.0,5.0,1.0689825844715206,0.13609953080079334
6.1,What is a pointer?,variable contains address memory another variable,pointer reference memory location object,4.0,5.0,4.5,1.0658723221106885,0.1204314416878549
6.1,What is a pointer?,variable contains address memory another variable,pointer variable contains memory address variable value,5.0,5.0,5.0,0.3814195109872859,0.797570006618276
6.1,What is a pointer?,variable contains address memory another variable,variable contains value memory address associated moved along string array jumping one memory address,2.0,5.0,3.5,0.7194487552086116,0.44641238917621695
6.1,What is a pointer?,variable contains address memory another variable,contains variable memory address value,5.0,5.0,5.0,0.4002078954139451,0.7685492076712894
6.1,What is a pointer?,variable contains address memory another variable,variable point memory address another variable type specific,5.0,5.0,5.0,0.4677229445873449,0.7050734486273911
6.1,What is a pointer?,variable contains address memory another variable,element reference memory cell,5.0,5.0,5.0,1.0679346823268099,0.10593691772483294
6.1,What is a pointer?,variable contains address memory another variable,reference call place memory object stored,4.0,4.0,4.0,1.0562823512234836,0.10237269205648075
6.1,What is a pointer?,variable contains address memory another variable,variable contains address another variable,5.0,5.0,5.0,0.22374415201878017,0.9496419643268188
6.1,What is a pointer?,variable contains address memory another variable,pointer variable contains number memory address value may null 0 address value stored memory,5.0,5.0,5.0,0.72342626967536,0.5253372379929179
6.1,What is a pointer?,variable contains address memory another variable,pointer variable contains memory address anther variable,5.0,5.0,5.0,0.3296399290025932,0.6660989896628022
6.1,What is a pointer?,variable contains address memory another variable,variable contains memory address another variable contains specific value,5.0,5.0,5.0,0.3567869378827796,0.848309550180506
6.1,What is a pointer?,variable contains address memory another variable,variable memory address value,5.0,4.0,4.5,0.557186222534069,0.6345102256087083
6.1,What is a pointer?,variable contains address memory another variable,type point something else memory address something else,5.0,4.0,4.5,0.968818217866014,0.11682707574163652
6.1,What is a pointer?,variable contains address memory another variable,pointer way get another object essentially way grab instance object either pas instance message retreive data object pointer actually address instance held memory,4.0,5.0,4.5,1.1256609546767395,0.12744490841365397
6.2,What does the address (&) operator return?,memory address operand,operator return memory address operand,5.0,5.0,5.0,0.5516030718369335,0.731622227964656
6.2,What does the address (&) operator return?,memory address operand,address operator return memory address operand,5.0,5.0,5.0,0.4642481361149097,0.7856504321132298
6.2,What does the address (&) operator return?,memory address operand,return memory address operand,5.0,5.0,5.0,0.35034779180828324,0.8602654879432204
6.2,What does the address (&) operator return?,memory address operand,address operator return memory address operand,5.0,5.0,5.0,0.4642481361149097,0.7856504321132298
6.2,What does the address (&) operator return?,memory address operand,return memory address operand,5.0,5.0,5.0,0.35034779180828324,0.8602654879432204
6.2,What does the address (&) operator return?,memory address operand,return place memory element,5.0,3.0,4.0,1.008308859448948,0.2264540536101267
6.2,What does the address (&) operator return?,memory address operand,address data stored b return address b,4.0,5.0,4.5,0.8997798909561617,0.423283420843153
6.2,What does the address (&) operator return?,memory address operand,operator return address variable,5.0,5.0,5.0,0.9762228412363227,0.26929991664437253
6.2,What does the address (&) operator return?,memory address operand,ampersand mean pas reference function called pointer variable instead variable passed function,3.0,3.0,3.0,1.2446266472985312,0.0
6.2,What does the address (&) operator return?,memory address operand,return memory address operand,5.0,5.0,5.0,0.35034779180828324,0.8602654879432204
6.2,What does the address (&) operator return?,memory address operand,address variable memory,5.0,5.0,5.0,0.3706523163952191,0.6291655676732811
6.2,What does the address (&) operator return?,memory address operand,return address location memory item,5.0,4.0,4.5,0.7859240466622553,0.44492400340117677
6.2,What does the address (&) operator return?,memory address operand,address operator return memory address operand,5.0,5.0,5.0,0.4642481361149097,0.7856504321132298
6.2,What does the address (&) operator return?,memory address operand,operator return memory address variable precedes,5.0,5.0,5.0,0.8660003721397728,0.32811950292571207
6.2,What does the address (&) operator return?,memory address operand,memory address operand 0x000000 something along line,4.0,5.0,4.5,0.6583503634184164,0.4330600127372064
6.2,What does the address (&) operator return?,memory address operand,object memory address,4.0,5.0,4.5,0.3988299366111214,0.5915033886061929
6.2,What does the address (&) operator return?,memory address operand,reference variable,5.0,4.0,4.5,1.2193710211664175,0.0
6.2,What does the address (&) operator return?,memory address operand,return memory address operand,5.0,5.0,5.0,0.35034779180828324,0.8602654879432204
6.2,What does the address (&) operator return?,memory address operand,memory address operand,5.0,5.0,5.0,0.0,1.0
6.2,What does the address (&) operator return?,memory address operand,return address number specified variable,5.0,4.0,4.5,1.0206498150149028,0.22776256813184118
6.2,What does the address (&) operator return?,memory address operand,return memory address operand applied normal variable give variable memory address pointer variable might,4.0,5.0,4.5,0.8144514091892083,0.4914992621034592
6.2,What does the address (&) operator return?,memory address operand,unary operator return memory address operand,5.0,5.0,5.0,0.5516030718369335,0.5571898010795191
6.2,What does the address (&) operator return?,memory address operand,address variable attached,5.0,3.0,4.0,0.8351381749075143,0.23884472600989565
6.2,What does the address (&) operator return?,memory address operand,memory address operand,5.0,5.0,5.0,0.0,1.0
6.2,What does the address (&) operator return?,memory address operand,return address put front,5.0,4.0,4.5,1.0294203083944984,0.24228423284912878
6.2,What does the address (&) operator return?,memory address operand,return pointer,4.0,3.0,3.5,1.3592687016677683,0.0
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,return synonym object pointer operand point,5.0,5.0,5.0,0.6605754617369551,0.5574487013616441
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,star operator return synonym object pointer operand point,5.0,5.0,5.0,0.5029805758164612,0.5493342504253416
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,return synonym object operand point,5.0,5.0,5.0,0.6638722366641997,0.5915866394999876
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,return synonym alias nickname name object operand point memory dereferencing pointer,5.0,5.0,5.0,0.37874022018370734,0.7524816897598193
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,return object pointer operand point,5.0,5.0,5.0,0.8262741075228249,0.412550681261353
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,operator return value memory address element point,4.0,4.0,4.0,0.8006500243414818,0.3547100702149936
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,return value,4.0,4.0,4.0,1.3392519843763822,0.0
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,operator return dereferenced pointer variable ie return value whatever variable pointer pointing,5.0,5.0,5.0,1.1356059386203687,0.08526510467364856
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,dereferencing operator return dereferenced object,4.0,5.0,4.5,0.9956937095008103,0.4342418654961727
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,return synonym object operand point,5.0,5.0,5.0,0.6638722366641997,0.5915866394999876
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,return information address pointer point,4.0,4.0,4.0,1.1535464519964322,0.11540988877888976
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,star operator return value memory address pointer pointing,5.0,4.0,4.5,0.9454485646470522,0.1894280922173338
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,star operator return object memory location,4.0,4.0,4.0,0.8124981384323973,0.3113151650742316
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,operator return value object memory address precedes,4.0,3.0,3.5,0.7980146849804072,0.2915274763107416
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,value object operand point,4.0,5.0,4.5,0.8259333229734097,0.4524714954131379
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,value stored object pointed,4.0,4.0,4.0,1.1317515910608593,0.11520526756486818
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,value variable pointer point,4.0,4.0,4.0,1.1321397262437825,0.15180566746803506
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,return synonym object operand point,5.0,5.0,5.0,0.6638722366641997,0.5915866394999876
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,synonym object operand point,5.0,5.0,5.0,0.6533545728453162,0.646545698717626
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,return synonym object operand point,5.0,5.0,5.0,0.6638722366641997,0.5915866394999876
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,dereferences pointer meaning return value stored memory address pointer refers,4.0,5.0,4.5,1.0833632897050056,0.04732215778878008
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,unary operator return value variable located address,4.0,4.0,4.0,1.1181167772947544,0.12040023607750475
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,reference variable,1.0,3.0,2.0,1.2600595752613692,0.0
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,synonym object pointer operand point,5.0,5.0,5.0,0.6538729303856026,0.602704534793565
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,return actual data address pointed,4.0,3.0,3.5,1.293201867222128,0.0
6.3,What does the star (*) operator return?,alias synonym name object operand point memory dereferencing operator,return zero many character placed operator,1.0,3.0,2.0,1.1495785575600492,0.1265716831263931
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,array signed pointer element array assigned pointer,2.0,4.0,3.0,0.6265829842159125,0.4411522560732837
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,array addressed notation setting pointer variable equal variable name array element array accessed adding offset value pointer variable,5.0,4.0,4.5,0.8500730442523653,0.2956190216358532
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,element b n accessed bptr n,5.0,3.0,4.0,1.1089417042303957,0.11165263044518685
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,using either name array pointer using separate pointer point array,3.0,3.0,3.0,0.7009388933846745,0.4014239848087861
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,element b 3 referenced using bptr 3 instead,5.0,3.0,4.0,1.1120287507079265,0.07884920805652888
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,get memory location first element add offset get element,5.0,5.0,5.0,0.9652264028568699,0.16636364742672294
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,yes array,5.0,3.0,4.0,1.0815712298923688,0.10580185225591332
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,name array considered pointer passed function parameter declaring int 10 creates pointer store address 0,3.0,4.0,3.5,0.9882888341234417,0.21776210007322333
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,element b n accessed bptr n example array addressed notation,5.0,4.0,4.5,1.027754621539719,0.12458411481461834
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,array element,5.0,3.0,4.0,0.8572550120434171,0.5041990142848531
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,f 3,2.0,3.0,2.5,1.3275887402836672,0.0
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,pointer front array add memory location offset initial value,5.0,5.0,5.0,0.9878112904645819,0.17952992757788472
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,pointer array initially point first element array pointer incremented point next element,2.0,5.0,3.5,0.39797899299599643,0.5481349912281586
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,int x 10 int xptr xptr x address x 1 xptr 1,5.0,3.0,4.0,1.2942733889695937,0.0
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,take number array element point time,1.0,3.0,2.0,0.7302522524746377,0.32577314116298683
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,array act pointer referenced pointer arrayptr 3 array 3,5.0,3.0,4.0,0.8019888044916469,0.3358973826454755
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,using pointer,5.0,3.0,4.0,1.0413275518153229,0.31537395393460554
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,using star operator array b n accessed bpointer,5.0,4.0,4.5,1.1312338345011952,0.06638066050531073
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,element n accessed aptr n,5.0,3.0,4.0,1.107098753824796,0.09957169019146907
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,referencing pointer referring pointer relative first pointer pointer etc,2.0,4.0,3.0,0.9385131621477105,0.3540227561447198
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,first pointer variable must reference first entity array variable array accessed referring first entity address plus offset ptrtoarray array nthentity ptrtoarray n,5.0,5.0,5.0,0.8870153590687532,0.20916362941484914
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,b3 bptr array treated pointer,4.0,3.0,3.5,0.816716800848232,0.18410416202493132
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,,5.0,3.0,4.0,inf,0.0
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,b 3 bptr 3,5.0,3.0,4.0,1.3291286472655288,0.0
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,arrayname index,5.0,3.0,4.0,1.2156380509590452,0.17428750261005038
6.4,How can an array be addressed in pointer/offset notation?,initializing pointer point first element array incrementing pointer index array element,array,0.0,2.0,1.0,1.1272819609732647,0.35041596988373197
6.5,What does the sizeof operator return?,size byte operand,number byte array program compilation,4.0,5.0,4.5,1.0231250479352914,0.3259607561253816
6.5,What does the sizeof operator return?,size byte operand,sizeof operator return size operand,5.0,3.0,4.0,0.7474384965782545,0.3975107635361398
6.5,What does the sizeof operator return?,size byte operand,return size operand byte,5.0,5.0,5.0,0.35347547239932375,0.8933367101012194
6.5,What does the sizeof operator return?,size byte operand,return size array byte,4.0,5.0,4.5,0.6852996568063985,0.6748048590912373
6.5,What does the sizeof operator return?,size byte operand,return size array byte program compilation,4.0,5.0,4.5,0.8885743207554232,0.47650820903320046
6.5,What does the sizeof operator return?,size byte operand,return size argument passed,5.0,3.0,4.0,1.0435209535232424,0.21593906787311715
6.5,What does the sizeof operator return?,size byte operand,byte size date stored ina variable,4.0,5.0,4.5,0.827931694989566,0.38596856319788864
6.5,What does the sizeof operator return?,size byte operand,sizeof return size operand byte,5.0,5.0,5.0,0.4727105607443872,0.7001201597097271
6.5,What does the sizeof operator return?,size byte operand,amount memory required specific parameter ints double,4.0,3.0,3.5,1.1909389644165382,0.0
6.5,What does the sizeof operator return?,size byte operand,sizeof return size operand byte,5.0,5.0,5.0,0.4727105607443872,0.7001201597097271
6.5,What does the sizeof operator return?,size byte operand,size information bit,1.0,4.0,2.5,0.8912935625080678,0.19584440241866574
6.5,What does the sizeof operator return?,size byte operand,size string,3.0,3.0,3.0,0.8966737974327009,0.35180450191916124
6.5,What does the sizeof operator return?,size byte operand,sizeof return size byte respective object,4.0,5.0,4.5,0.8116009962003428,0.39536509718017415
6.5,What does the sizeof operator return?,size byte operand,sizeof operator return total number byte operand,5.0,5.0,5.0,0.8790032095907433,0.4252563856424878
6.5,What does the sizeof operator return?,size byte operand,size operand byte used variable name type name constant value,5.0,5.0,5.0,0.8775795335908513,0.5581199305646655
6.5,What does the sizeof operator return?,size byte operand,size byte needed store object memory,4.0,5.0,4.5,0.8487438960947635,0.5093097426121578
6.5,What does the sizeof operator return?,size byte operand,size list object,4.0,2.0,3.0,0.8682714990653502,0.3104928802756219
6.5,What does the sizeof operator return?,size byte operand,sizeof operator return size byte array parameter,3.0,5.0,4.0,0.8529605716970413,0.4398709909303607
6.5,What does the sizeof operator return?,size byte operand,size operand byte,5.0,5.0,5.0,0.0,1.0000000000000002
6.5,What does the sizeof operator return?,size byte operand,return size byte specified data,4.0,5.0,4.5,0.7584364299633869,0.5399113254396573
6.5,What does the sizeof operator return?,size byte operand,return size operand memory checked,5.0,3.0,4.0,0.7938115557814082,0.38861030033740407
6.5,What does the sizeof operator return?,size byte operand,return size operand byte,5.0,5.0,5.0,0.35347547239932375,0.8933367101012194
6.5,What does the sizeof operator return?,size byte operand,total number byte object,4.0,5.0,4.5,0.9184913139859062,0.34409391841058906
6.5,What does the sizeof operator return?,size byte operand,total number byte array,4.0,5.0,4.5,0.9518318600802979,0.36160894096732776
6.5,What does the sizeof operator return?,size byte operand,return size byte certain variable type,4.0,5.0,4.5,0.8381662747379743,0.5010225357508125
6.5,What does the sizeof operator return?,size byte operand,yield size byte operand expression parenthesized name type,3.0,5.0,4.0,0.7307309693037982,0.500531043853586
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,passed value reference,2.0,3.0,2.5,1.3307125816420626,0.0
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data,5.0,5.0,5.0,0.19402196321123297,0.9771295137752183
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,name,5.0,5.0,5.0,1.3768514106661245,0.0
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,four different way nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data,5.0,5.0,5.0,0.09019285106843494,0.9893468585299168
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,,2.0,3.0,2.5,inf,0.0
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,pas pointer pointer pas reference pointer,2.0,3.0,2.5,0.9773730185493915,0.2615631445527408
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,address bptr directly bptr,2.0,3.0,2.5,1.3284332244213648,0.0
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,nonconstant pointer nonconstant data constant pointer nonconstant data nonconstant pointer constant data constant pointer constant data,5.0,5.0,5.0,0.19402196321123297,0.9771295137752183
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,argument reference,1.0,3.0,2.0,1.3330978190223393,0.0
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data,5.0,5.0,5.0,0.19402196321123297,0.9771295137752183
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,pas value pas reference reference pointer argument,2.0,3.0,2.5,1.145090200087998,0.08759945116563549
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,pas pointer memory address,2.0,3.0,2.5,1.011557602841805,0.16697878545171024
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,nonconst gt nonconst const gt nonconst nonconst gt const const gt const,5.0,5.0,5.0,1.3612598923173407,0.0
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,nonconstant pointer nonconstant data constant pointer nonconstant data nonconstant pointer constant data constant point constant data,5.0,5.0,5.0,0.22419077858055914,0.9657266369853965
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,pointer data pointer constant data constant pointer constant data constant pointer data,5.0,5.0,5.0,0.19402196321123297,0.7523969488423994
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,pas reference reference argument function int pas reference pointer argument function int,2.0,3.0,2.5,1.2216180856902803,0.058634385357204985
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,pas reference dereference function,2.0,2.0,2.0,1.3112153894258114,0.0
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,nonconstant pointer nonconstant data delcaration include const qualifier nonconstant pointer constant data provides performance protection constant pointer nonconstant data constant pointer constant date,5.0,5.0,5.0,0.5093354701413098,0.8364732860465585
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,constant pointer constant data constant pointer nonconstant data nonconstant pointer constant data nonconstant pointer nonconstant data,5.0,5.0,5.0,0.19402196321123297,0.9771295137752183
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data,5.0,5.0,5.0,0.19402196321123297,0.9771295137752183
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,pointer may passed function value reference reference argument reference pointer argument,2.0,3.0,2.5,1.081345175165651,0.1402942766624043
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,four way pas pointer function non constant pointer non constant data constant pointer constant data constant pointer non constant data constant pointer constant data,5.0,5.0,5.0,0.3467591032473357,0.6802863741104981
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data,5.0,5.0,5.0,0.19402196321123297,0.9771295137752183
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,pas value pas reference reference argument pas reference pointer argument,2.0,3.0,2.5,1.204193030191823,0.05791138034291171
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,pas either pointer cant moved data pointed cant changed neither,5.0,3.0,4.0,1.0682922708626623,0.10663129517227322
6.6,What are the different ways to pass a pointer to a function?,four way nonconstant pointer constant data nonconstant pointer nonconstant data constant pointer constant data constant pointer nonconstant data,two way pas something value reference use dot pointer operator within receiving function use operator inside passing function,2.0,3.0,2.5,1.121787175651203,0.08656178148292017
6.7,What is a function pointer?,address location memory function code resides,pointer point memory address beginning part function pretty much pointer point function called execute,5.0,5.0,5.0,0.9488375868939656,0.1941855086350818
6.7,What is a function pointer?,address location memory function code resides,function pointer pointer contains address function memory,5.0,5.0,5.0,0.7233117734455698,0.34117783464658097
6.7,What is a function pointer?,address location memory function code resides,function pointer pointer variable point address function,5.0,5.0,5.0,0.9100987365675216,0.2443781498187385
6.7,What is a function pointer?,address location memory function code resides,pointer function address code function resides passed function returned function stored array assigned pointer,5.0,5.0,5.0,0.7990069030560766,0.4747960876456364
6.7,What is a function pointer?,address location memory function code resides,contains address function memory,5.0,5.0,5.0,0.6298876749752195,0.43291622271845376
6.7,What is a function pointer?,address location memory function code resides,dereferenced function pointer call function zero argument,4.0,3.0,3.5,1.0793731209537287,0.08769431954412044
6.7,What is a function pointer?,address location memory function code resides,pointer function,5.0,2.0,3.5,1.0987003485680615,0.13511739304543663
6.7,What is a function pointer?,address location memory function code resides,pointer function contains address function used call function,5.0,5.0,5.0,0.9083861529774853,0.2722877903659253
6.7,What is a function pointer?,address location memory function code resides,function pointer pointer variable point address function,5.0,5.0,5.0,0.9100987365675216,0.2443781498187385
6.7,What is a function pointer?,address location memory function code resides,pointer function contains address function,5.0,5.0,5.0,0.8623104336213805,0.3085831688191039
6.7,What is a function pointer?,address location memory function code resides,pointer contains address function,5.0,5.0,5.0,0.8690302726566972,0.2763177469756828
6.7,What is a function pointer?,address location memory function code resides,function pointer pointer function used substitution calling function,5.0,5.0,5.0,1.0874278209377115,0.11682407148384827
6.7,What is a function pointer?,address location memory function code resides,point memory address function kind like breaking branch tree object hitting object,5.0,5.0,5.0,0.9881650418646158,0.1645076321807622
6.7,What is a function pointer?,address location memory function code resides,pointer contain address function passed returned function well stored array assigned function pointer,5.0,5.0,5.0,0.9803822191088151,0.17561500822154053
6.7,What is a function pointer?,address location memory function code resides,pointer variable point function address,5.0,5.0,5.0,0.8785904475900711,0.26303551260091995
6.7,What is a function pointer?,address location memory function code resides,contains address function memory,5.0,5.0,5.0,0.6298876749752195,0.43291622271845376
6.7,What is a function pointer?,address location memory function code resides,pointer point function allows passing function parameter another function,5.0,3.0,4.0,1.0719545805047557,0.1252567488762955
6.7,What is a function pointer?,address location memory function code resides,pointer contain address function,5.0,5.0,5.0,0.8852705700298321,0.259507809665211
6.7,What is a function pointer?,address location memory function code resides,pointer contains address function,5.0,5.0,5.0,0.8690302726566972,0.2763177469756828
6.7,What is a function pointer?,address location memory function code resides,pointer contains address function definition,4.0,5.0,4.5,0.8615263802126758,0.23386801443587624
6.7,What is a function pointer?,address location memory function code resides,function pointer contains memory address function using function pointer function passed returned another function function pointer also stored array,5.0,5.0,5.0,0.9357834646701826,0.26227904941269725
6.7,What is a function pointer?,address location memory function code resides,function pointer pointer function function pointer contains address function,5.0,5.0,5.0,0.9451693417417177,0.24311747454638108
6.7,What is a function pointer?,address location memory function code resides,pointer contains address function memory,5.0,5.0,5.0,0.6545018097798387,0.3901695681918325
6.7,What is a function pointer?,address location memory function code resides,contains address function memory,5.0,5.0,5.0,0.6298876749752195,0.43291622271845376
6.7,What is a function pointer?,address location memory function code resides,pointer point address function,5.0,5.0,5.0,0.8873791128505497,0.29289236465141294
6.7,What is a function pointer?,address location memory function code resides,dereferenced function pointer invokes function passing zero argument like normal function programming language like c function pointer used simplify code replacing large switch statement,4.0,4.0,4.0,1.0296570910420786,0.1457804807014394
7.1,What is a linked list?,collection element allocated dynamically,consists sequence node containing number data field one two link called pointer point next previous node,4.0,5.0,4.5,1.2576643835646055,0.0
7.1,What is a linked list?,collection element allocated dynamically,linked list list item list point next item list,4.0,5.0,4.5,1.2625115952017414,0.0
7.1,What is a linked list?,collection element allocated dynamically,linked list chain structs record called node ability add delete retrieve item,4.0,5.0,4.5,1.2435682647975073,0.0
7.1,What is a linked list?,collection element allocated dynamically,list element node linked one another element point next element,4.0,5.0,4.5,0.9662633453923972,0.17196384254052333
7.1,What is a linked list?,collection element allocated dynamically,sequence node containing data field specified programmer pointer point next previous node,4.0,5.0,4.5,1.2500231289619215,0.0
7.1,What is a linked list?,collection element allocated dynamically,list node node contains data member also pointer next node,4.0,5.0,4.5,1.235479966252785,0.0
7.1,What is a linked list?,collection element allocated dynamically,list item linked together item linked successor,4.0,5.0,4.5,1.2556124382872047,0.0
7.1,What is a linked list?,collection element allocated dynamically,linked list chain node store single piece data pointer variable point node list,4.0,5.0,4.5,1.239692779465938,0.0
7.1,What is a linked list?,collection element allocated dynamically,one fundamental data structure used implement data structure consists sequence node containing arbitrary data field one two reference link pointing next previous node,4.0,5.0,4.5,1.2474594255511968,0.0
7.1,What is a linked list?,collection element allocated dynamically,data structure sequence node containing arbitrary data field one two reference link pointing next previous node,4.0,5.0,4.5,1.2561873475176744,0.0
7.1,What is a linked list?,collection element allocated dynamically,information memory linked next piece information linked forward backwards,2.0,5.0,3.5,1.2860708279660018,0.0
7.1,What is a linked list?,collection element allocated dynamically,linked list data structure necessarily contiguous memory space array hold data type point next data item list doubly linked list also previous item,5.0,5.0,5.0,1.2468585131039573,0.0
7.1,What is a linked list?,collection element allocated dynamically,linked list data structure containing one data element pointer next node,4.0,5.0,4.5,1.1364872144115155,0.054958268584093514
7.1,What is a linked list?,collection element allocated dynamically,series node structure value pointer point similar node quite array still carry list value,4.0,5.0,4.5,1.251936857641005,0.0
7.1,What is a linked list?,collection element allocated dynamically,data type contains pointer least next element list,4.0,5.0,4.5,1.1113863863844562,0.06770157014177426
7.1,What is a linked list?,collection element allocated dynamically,component contains node data item pointer next item list,4.0,5.0,4.5,1.183480855082639,0.0
7.1,What is a linked list?,collection element allocated dynamically,linked list chain structs record called node node least two member one point next item node list,4.0,5.0,4.5,1.2438221640680944,0.0
7.1,What is a linked list?,collection element allocated dynamically,array based list us implicit ordering scheme often using pointer,1.0,4.0,2.5,1.2690124096137991,0.0
7.1,What is a linked list?,collection element allocated dynamically,series structure containing data item pointer link structure next structure,4.0,5.0,4.5,1.264741703572587,0.0
7.1,What is a linked list?,collection element allocated dynamically,linked list collection object containing least one data member pointer next object list previous object case doubly linked list,4.0,5.0,4.5,1.2019296172155665,0.11202012651543795
7.1,What is a linked list?,collection element allocated dynamically,link list data structure built structure pointer form chain node pointer representing link chain holding entire thing together,4.0,4.0,4.0,1.256620397837147,0.0
7.1,What is a linked list?,collection element allocated dynamically,list pointer linked 2 every pointer point next pointer next element,4.0,5.0,4.5,1.1986208978603938,0.044382219908788746
7.1,What is a linked list?,collection element allocated dynamically,linear collection node connected pointer,4.0,4.0,4.0,1.0107478088049209,0.2105531455613192
7.1,What is a linked list?,collection element allocated dynamically,item data structure linked using pointer,4.0,5.0,4.5,1.2605629646099556,0.0
7.1,What is a linked list?,collection element allocated dynamically,list object object contains link next item list,4.0,5.0,4.5,1.2550775463925306,0.0
7.1,What is a linked list?,collection element allocated dynamically,linked list one fundamental data structure used implement data structure consists sequence node containing arbitrary data field one two reference link pointing next previous node,4.0,5.0,4.5,1.2459198107786977,0.0
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,element inserted link list point need resized unlike array need,5.0,5.0,5.0,1.1249628734590407,0.06736209543457174
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,unlike array linked list insert delete without shifting data change size easily,5.0,5.0,5.0,1.033990452949142,0.16361532155893854
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,array size fixed linked fixed,5.0,5.0,5.0,0.9206235559652772,0.1287858143945311
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,insert delete item linked list without shifting data,5.0,4.0,4.5,0.9613315905197597,0.21401886875547438
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,array must defined size element added linked list defining size,5.0,5.0,5.0,0.9630257151634262,0.19134081647401488
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,principal benefit linked list conventional array order linked item may different order data item stored memory disk allowing list item traversed different order linked list datatype contains pointer link another datum type linked list permit insertion removal node point list constant time,3.0,5.0,4.0,0.9904276975019334,0.30580253685088477
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,expand need predetermine size,5.0,5.0,5.0,1.2515719484874452,0.0
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,linked list able grow shrink size needed,5.0,5.0,5.0,0.9148027656910764,0.1995061913332849
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,linked list able grow size needed require shifting item insertion deletion,5.0,5.0,5.0,1.036324175817986,0.1672346571423438
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,linked list fixed size require shifting item insertion deletion,5.0,5.0,5.0,0.9483130885950688,0.19527468565046419
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,limit many create array hold given amount information,3.0,3.0,3.0,1.2831982967756654,0.0
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,linked list constant time insertion deletion,4.0,3.0,3.5,0.8443832626553474,0.2697595633323942
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,linked list grown dynamically item require shifting greater awesome factor array,5.0,5.0,5.0,1.0335376039433186,0.1469275756178912
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,linked list indefinite size added taken away easily little difficulty shifting data,5.0,5.0,5.0,1.0601233890180075,0.13860659777790563
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,nearly infinite size limited system memory also ability expand size dynamically,5.0,5.0,5.0,1.2354215600131424,0.0
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,grow needed array fixed size,5.0,5.0,5.0,1.2120814198531709,0.0
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,fixed size linked list able grow needed time access array base list take contant amount time like depends,5.0,5.0,5.0,1.0359674813578499,0.17907647318597555
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,linked list grow shrink need array fixed size,5.0,5.0,5.0,0.9190122356619169,0.20318444844732175
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,memory allocated fly item,4.0,5.0,4.5,1.307741673996254,0.0
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,linked list may increased size needed array size set created,5.0,5.0,5.0,0.9658719284219792,0.18106752556036496
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,array fixed size linked list able grow size needed,5.0,5.0,5.0,0.9313073397816685,0.18612573403494764
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,resizeable,5.0,5.0,5.0,1.3189120041359872,0.0
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,linked list set size grow shrink needed,5.0,5.0,5.0,0.9118197606852538,0.21011644526355766
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,linked list abe grow needed new size,5.0,5.0,5.0,0.9140151489030361,0.19964195805480106
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,size fixed easier sorting shifting easier insert item list,5.0,5.0,5.0,1.1006776410450345,0.06893773468292877
7.2,What is the main advantage of linked lists over arrays?,linked list variable length,size array restricted declaration value middle array possible,5.0,5.0,5.0,1.2417756418111927,0.0
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,array retrieve memory place list link list traverse individual node,5.0,5.0,5.0,0.9790520093125024,0.11377360530692539
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,array require le memory linked list allow direct access specified item also insertion deletion array require list traversal,4.0,5.0,4.5,0.7054720307678164,0.406334494768377
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,access particular element fast location memory determined mathematically accessed directly,5.0,5.0,5.0,0.9019744477595855,0.2219485148825171
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,array good random access good sequential access constant time linked list linear random access array faster case,5.0,5.0,5.0,0.9514780890861744,0.08599807275871924
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,array capable accessing part array based index link list must traversed beginning end data accessed adjacent previous next node,5.0,5.0,5.0,0.9553186946931441,0.13745688934867994
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,hand array allow random access linked list allow sequential access element list fact traversed one direction,5.0,5.0,5.0,0.8298687735406045,0.13465362978057793
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,keep head list,1.0,3.0,2.0,1.201357920539886,0.09201793076155536
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,array easier implement require le memory,3.0,4.0,3.5,1.0376161706065228,0.21751835435460865
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,linked list increase complexity implementation linked list array keep growing lead increase memory,2.0,3.0,2.5,0.9196227826657808,0.15068932908649463
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,iterate entire list access element,5.0,4.0,4.5,0.951956651366017,0.10174164770923458
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,go forward backwards point piece data given time linked list point next piece data,2.0,4.0,3.0,1.0867040800299967,0.06749341312837959
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,take le memory contiguously stored,4.0,4.0,4.0,1.2680928688625257,0.0
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,array fixed le error prone,1.0,3.0,2.0,1.146820524763536,0.03722398989303693
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,array set list value meaning pick spot array 7 pick 8th spot array linked list keep track pointer want take specific node otherwise must traverse entire list,5.0,5.0,5.0,0.968463718525134,0.1307507118627774
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,direct access element speed linked list increased search time access element even list sorted like getting last element without pointer directly end list,5.0,4.0,4.5,0.8784751240862991,0.23159141662838553
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,array item accessed directly equal access time,5.0,5.0,5.0,0.8919682036905471,0.3236717111023817
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,implementation require le memory one,3.0,4.0,3.5,1.1506767656947208,0.18844937110702784
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,access specific element quickly array linked list must traverse list get access element,5.0,5.0,5.0,0.7706170786183202,0.19394356543369984
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,link list allow sequential access array allow random access,5.0,4.0,4.5,0.9201555040909134,0.06247510027612101
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,entitiy array may accessed immediately whereas linked list must traversed one item time object point adjacent object,5.0,5.0,5.0,0.9167900338068666,0.15774690248037113
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,array based implementation requires le memory lined list based implementation,3.0,4.0,3.5,0.9661611022425052,0.05398466943498022
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,implementation require le memory one,3.0,4.0,3.5,1.1506767656947208,0.18844937110702784
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,go array go one direction traversing linked list,1.0,5.0,3.0,0.8858929985534629,0.1223040551829497
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,array allow random access item cotained time linked list must gone toget desired item,5.0,5.0,5.0,0.9229250485144026,0.09301719281946835
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,array direct access element linked list traverse list element need,5.0,5.0,5.0,0.6750760935049216,0.25314778057982484
7.3,What is the main advantage of arrays over linked lists?,element array accessed directly opposed linked list require iterative traversal,array size fixed linked fixed data also accessed quicker array list also memory requirement le pointer required array random access le overhead compared linked list sequential access much overhead cache memory support hand array allow random access linked list allow sequential access element list fact traversed one direction,5.0,5.0,5.0,0.8601656902505671,0.18802052076281203
7.4,How are linked lists passed as arguments to a function?,reference,passed reference want function change pointer,4.0,5.0,4.5,1.117382126267252,0.37277755603408624
7.4,How are linked lists passed as arguments to a function?,reference,linked list passed argument function passing head pointer list reference,5.0,5.0,5.0,1.1786697161344781,0.31356582987791276
7.4,How are linked lists passed as arguments to a function?,reference,function access linked list head pointer access entire list pas head ponter function reference argument,5.0,5.0,5.0,1.2255295086374325,0.21217020237674641
7.4,How are linked lists passed as arguments to a function?,reference,using node,2.0,3.0,2.5,1.2811097065358052,0.0
7.4,How are linked lists passed as arguments to a function?,reference,,5.0,5.0,5.0,inf,0.0
7.4,How are linked lists passed as arguments to a function?,reference,send pointer object linkedlist class,2.0,3.0,2.5,1.3157172973392355,0.0
7.4,How are linked lists passed as arguments to a function?,reference,passed pointer head,5.0,3.0,4.0,1.359274301580475,0.0
7.4,How are linked lists passed as arguments to a function?,reference,passing head pointer linked list function give function access node linked list,5.0,4.0,4.5,1.3118577156192566,0.0
7.4,How are linked lists passed as arguments to a function?,reference,pas head pointer function since access entire list,5.0,3.0,4.0,1.3335273776262493,0.0
7.4,How are linked lists passed as arguments to a function?,reference,pas head pointer function reference argument,5.0,5.0,5.0,1.1213789783746946,0.41069042283508334
7.4,How are linked lists passed as arguments to a function?,reference,answered,0.0,0.0,0.0,1.3388599511663937,0.0
7.4,How are linked lists passed as arguments to a function?,reference,pass pointer linked list object,2.0,3.0,2.5,1.286912738038863,0.0
7.4,How are linked lists passed as arguments to a function?,reference,linked list object contains head element accessible,4.0,3.0,3.5,1.2633188657919323,0.0
7.4,How are linked lists passed as arguments to a function?,reference,head list take head address traverse,5.0,3.0,4.0,1.3526481597143882,0.0
7.4,How are linked lists passed as arguments to a function?,reference,pointer node,3.0,3.0,3.0,1.3158059573813676,0.0
7.4,How are linked lists passed as arguments to a function?,reference,method access linked list head pointer access entire list,5.0,3.0,4.0,1.306576228990407,0.0
7.4,How are linked lists passed as arguments to a function?,reference,function access linked list head pointer access entire list pas head pointer function reference argument,5.0,5.0,5.0,1.2331191481594221,0.2202999806225175
7.4,How are linked lists passed as arguments to a function?,reference,head pointer passed function reference argument,5.0,5.0,5.0,1.116526482562262,0.41788139823315706
7.4,How are linked lists passed as arguments to a function?,reference,pointer first element passed function,5.0,3.0,4.0,1.3109194232415535,0.0
7.4,How are linked lists passed as arguments to a function?,reference,linked list passed reference specificly head pointer,5.0,5.0,5.0,1.1171205106102888,0.33758829918057776
7.4,How are linked lists passed as arguments to a function?,reference,pas head pointer function reference argument,5.0,5.0,5.0,1.1213789783746946,0.41069042283508334
7.4,How are linked lists passed as arguments to a function?,reference,refrenece,5.0,5.0,5.0,inf,0.0
7.4,How are linked lists passed as arguments to a function?,reference,passing head pointer going list needed inside function,5.0,3.0,4.0,1.3468656358461488,0.0
7.4,How are linked lists passed as arguments to a function?,reference,linked list passed using pointer,3.0,3.0,3.0,1.2918149864997273,0.0
7.4,How are linked lists passed as arguments to a function?,reference,head object passed function,4.0,3.0,3.5,1.3316179635310939,0.0
7.4,How are linked lists passed as arguments to a function?,reference,linked list permit insertion removal node point list constant time 1 allow random access,0.0,3.0,1.5,1.3009133327381264,0.0
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,passed reference want function change pointer,0.0,1.0,0.5,1.259798889444942,0.0
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list every node successor mean last node successor head first node,5.0,5.0,5.0,0.7776558002400634,0.37170424334147834
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list linked list link item continuous circle allows full list traversed starting item list fixed head tail required,5.0,4.0,4.5,0.7476845276377797,0.4528521348633942
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list last node point first node,5.0,5.0,5.0,0.49411347636942315,0.6547184053175472
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list end element point head thus making circle basic link list nothing pointing head last element point null,5.0,5.0,5.0,0.56272476773617,0.6257582026176843
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list last node point begining list standard linked list point null,5.0,5.0,5.0,0.4823233135679564,0.6693507642556178
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,last item list point head,5.0,5.0,5.0,0.539603208752363,0.6929881732034022
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list last node point back first node null,5.0,5.0,5.0,0.6459383076468227,0.5739374377630136
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list useful describing naturally circular structure advantage regular structure able traverse list starting point,2.0,3.0,2.5,0.8006449614572215,0.3956664397077979
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list last node point back head linked list,5.0,5.0,5.0,0.35145721155578574,0.8569882117675873
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,basic linked list point null end circular point head end,5.0,5.0,5.0,0.6126124822251915,0.581889745954634
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list last item point first item,5.0,5.0,5.0,0.46077403727051647,0.60920262540024
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list tail point head whereas basic linked list tail point null,5.0,5.0,5.0,0.5769284571933772,0.5857986775711267
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,basic linked list end null value circular linked list pointer end beginning,5.0,5.0,5.0,0.7769778607478773,0.4416581402912939
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,determine end list basic linked list last element link null pointer circular linked list link head element end,5.0,5.0,5.0,0.5434772334626131,0.5780428581772032
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,node circular linked list contains null last node point pack node within list,5.0,5.0,5.0,0.703129783934592,0.48807268388415026
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,difference circular linked list basic linked list circular linked list last node reference first node every node circular linked list successor node circular linked list contains null,5.0,5.0,5.0,0.6607060406618992,0.6245826188787169
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,node circular linked list contains null,3.0,4.0,3.5,0.7712340954178212,0.4713933311142343
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list last element point head list,5.0,5.0,5.0,0.0,1.0000000000000002
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,regular linked list last object point null circular linked list last object point back beginning list,5.0,5.0,5.0,0.47421989570538153,0.68098913704736
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list node successor node contains null basic linked list last node contain null,3.0,3.0,3.0,0.7942673303942437,0.4157913412575215
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list last element point first,5.0,5.0,5.0,0.31112744808274617,0.8376056670138055
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list last element instead last item point head list,5.0,5.0,5.0,0.30428066652576685,0.8335961934183195
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list last node contains pointer go back first node basic linked list last node contains null pointer,5.0,5.0,5.0,0.7837296233848451,0.4419391926109141
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,circular linked list last object linked back first object,5.0,5.0,5.0,0.6811277847706666,0.5158832519014771
7.5,What is the difference between a circular linked list and a basic linked list?,last element circular linked list point head list,case non circular link list last node list u want move first u need go one step back till u reach first circular link list last first need make one move single link list u move one direction double link list u move direction back forward forward,2.0,5.0,3.5,0.9887803204025803,0.28898542453854026
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,traverse direction,3.0,4.0,3.5,1.3465651096194557,0.0
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,doubly linked list delete node without traverse list,5.0,4.0,4.5,1.081354704330247,0.12995122681195967
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,list allows delete node without traversing list establish trailing pointer,5.0,4.0,4.5,1.081133031051972,0.09620436273344324
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,doubly linked list allows traverse list either direction node point successor well predecessor,3.0,4.0,3.5,1.0848726725317994,0.09007561973906789
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,list traverse backwards though still access data point list shorter traverse backwards,3.0,4.0,3.5,1.0970615110416406,0.07597051921146476
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,traverse list front back back front,3.0,4.0,3.5,1.1370983829037136,0.0627708306966485
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,traverse list reverse,3.0,4.0,3.5,1.1330187027871765,0.09414353412932491
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,doubly linked list traversed direction,3.0,4.0,3.5,1.1066835043576404,0.07356854760357572
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,list require space per node elementary operation expensive often easier manipulate allow sequential access list direction,4.0,3.0,3.5,1.0357570785165529,0.14206028355534384
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,traverse forward backwards node,3.0,4.0,3.5,1.3181517658011845,0.0
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,point forward backwards,3.0,4.0,3.5,1.3298963303007505,0.0
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,go backwards linked list access previous data easier without keep track previous item,4.0,4.0,4.0,1.1675073028112055,0.04377286892581881
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,doubly linked list allow backward movement node,3.0,4.0,3.5,1.0929499372131182,0.06037964745866165
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,double pointer node point forward backwards making little easer get need,3.0,4.0,3.5,1.283895536498519,0.0
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,ability backtrack list,3.0,3.0,3.0,1.1375312411504748,0.0805866753667903
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,move forward backwards list basic move forward,3.0,4.0,3.5,1.1323427737062115,0.04323616035908836
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,advantage node point bothe predecessor successor special case insertion deletion,4.0,5.0,4.5,1.1043967726664257,0.15167838680079887
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,node point predecessor successor,4.0,3.0,3.5,1.2969649639185985,0.0
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,doubly linked list pointer direction allows access back front well front back,3.0,5.0,4.0,1.1700466248999175,0.04553975451953119
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,doubly linked list traversed either direction normal linked list traversed start finish,3.0,4.0,3.5,1.0754925420039123,0.07825595722299575
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,double linked list often easier manipulate allow sequential access list direction,4.0,4.0,4.0,1.0916506239764547,0.09380138054797685
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,given node list one navigate easily either direction,4.0,4.0,4.0,1.0304767230871248,0.1322557062469131
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,traverse list forward backwards,3.0,4.0,3.5,1.1411104906142173,0.07972397978575363
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,doubly linked list allows back node rather go entire list,4.0,4.0,4.0,1.0883160731945218,0.10879972190902622
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,give faster time operation insertion deletion,5.0,5.0,5.0,0.806183192685815,0.3954703959332718
7.6,What is the main advantage of a doubly-linked list over a basic linked list?,deletion insertion operation performed constant time including operation performed given location list end list,primary disadvantage doubly linked list 1 node requires extra pointer requiring space 2 insertion deletion node take bit longer pointer operation,0.0,4.0,2.0,1.0349522695652287,0.20430223049405988
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,take twice much memory node,5.0,5.0,5.0,1.2738609236890326,0.0
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,doubly linked list pointer set mechanic inserting deleting difficult also special case beginning end list complicated,4.0,3.0,3.5,1.1920725563155945,0.04871223446116189
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,pointer set mechanic inserting deleting doubly linked list bit involved singly linked list,4.0,4.0,4.0,1.20638368723197,0.049478137681345416
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,insertion deletion doubly linked list involved singly linked list leaving room error complex algorithm,3.0,3.0,3.0,1.289882662324442,0.0
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,need memory store previous pointer,5.0,5.0,5.0,0.8203399216735361,0.22983127168506917
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,node doubly linked list take memory node singly linked list,5.0,5.0,5.0,1.297045948498922,0.0
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,keep consider predecessor successor connection,3.0,3.0,3.0,1.3106520076248342,0.0
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,node requires extra node requires memory difficult insert remove individual node,5.0,5.0,5.0,1.1010180217663845,0.12083607828792813
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,list require space per node elementary operation expensive,5.0,5.0,5.0,1.0612371581532907,0.15348892740422937
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,difficult delete create node,3.0,3.0,3.0,1.2926851077554127,0.0
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,use memory make 2 pointer update 2 pointer time change list,5.0,5.0,5.0,1.0718290674479258,0.14558731438936115
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,node take memory,5.0,5.0,5.0,1.2785467263406507,0.0
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,node requires extra pointer space requirement increased insertion deletion node take longer pointer operation,5.0,5.0,5.0,0.8504103764791868,0.3392646555857761
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,little confusing special case end beginning become difficult,3.0,3.0,3.0,1.2451075534151368,0.0
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,increased action add remove element linked list,3.0,3.0,3.0,1.2930935281054758,0.0
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,inserting deleting list involved special case beginning end,3.0,3.0,3.0,1.2741873084752615,0.0
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,main disadvanate hard remove item list,1.0,3.0,2.0,1.2835176403562636,0.0
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,node requires extra pointer taking storage insertion deletion require pointer operation,5.0,5.0,5.0,0.8683699039918349,0.272568386327268
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,doubly linked list twice many pointer element therefore memory used,5.0,5.0,5.0,1.150949362324409,0.06804314648334017
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,process adding removing node doubly linked list complex basic linked list,3.0,4.0,3.5,1.2971903808377634,0.0
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,double linked list require space per node elementary operation expensive,5.0,5.0,5.0,1.0916344983355715,0.1361596578634921
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,node requires extra pointer requiring space insertion deletion node take bit longer pointer operation,5.0,5.0,5.0,0.8364890834242263,0.33511100602550137
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,take twice storage needed,5.0,5.0,5.0,1.1685322679195158,0.0
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,using pointer enable backward movement take memory pointer make slightly work add remove node list,5.0,5.0,5.0,1.0816787279018967,0.10036590556053483
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,increased memory requirement slightly complicated modifying element list,5.0,5.0,5.0,1.2602045678569933,0.0
7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,extra space required store back pointer,answered,0.0,0.0,0.0,1.327665783146341,0.0
8.1,What is a stack?,data structure store element property last item added first removed,data structure storing item accessed order implemented three way,5.0,5.0,5.0,0.8678611568864422,0.2107395451968593
8.1,What is a stack?,data structure store element property last item added first removed,stack abstract data type based principle last element inserted stack first element removed stack,5.0,5.0,5.0,0.7866817412745128,0.30721366685129337
8.1,What is a stack?,data structure store element property last item added first removed,store set element particular order,0.0,4.0,2.0,1.0249100913494895,0.1727822229818124
8.1,What is a stack?,data structure store element property last item added first removed,adt whose recently inserted item first item removed retrieved property called last first lifo item enter leave stack top,5.0,5.0,5.0,0.7980142457122427,0.4079332460382032
8.1,What is a stack?,data structure store element property last item added first removed,list top last item added modified,4.0,5.0,4.5,0.8718034399562977,0.3747681736196204
8.1,What is a stack?,data structure store element property last item added first removed,stack data structure us push insert item pop remove ad item stack use last first structure inserting removing item,5.0,5.0,5.0,0.7782926329106897,0.3828311222089169
8.1,What is a stack?,data structure store element property last item added first removed,data structure store data using lifo,5.0,5.0,5.0,0.9088625517950697,0.334468485076458
8.1,What is a stack?,data structure store element property last item added first removed,stack similar array allow random access stack allow user retrieve last item put stack last fist,5.0,5.0,5.0,1.062001249602093,0.1616071117823466
8.1,What is a stack?,data structure store element property last item added first removed,store set element particular order stack principle last first mean last element inserted first one removed,5.0,5.0,5.0,0.7318524973683801,0.4405907333802843
8.1,What is a stack?,data structure store element property last item added first removed,stack adt store set element particular order,1.0,4.0,2.5,1.0425461892871244,0.13295133588499697
8.1,What is a stack?,data structure store element property last item added first removed,data type store set element certain order last first,5.0,5.0,5.0,0.6451590022557152,0.3847134802359039
8.1,What is a stack?,data structure store element property last item added first removed,data structure move element last first,5.0,5.0,5.0,0.641496760077039,0.4891607890728804
8.1,What is a stack?,data structure store element property last item added first removed,store set element last first order,5.0,5.0,5.0,0.779051261471959,0.4180963319913748
8.1,What is a stack?,data structure store element property last item added first removed,list added removed top,5.0,5.0,5.0,1.0291369024392534,0.407388882661169
8.1,What is a stack?,data structure store element property last item added first removed,stack abstract data type operates last first basis storing list object support least pure stack peeking element without removing rest stack first,5.0,5.0,5.0,0.9572412467553814,0.15763479387260132
8.1,What is a stack?,data structure store element property last item added first removed,store set element particular order based principle last first lifo,5.0,5.0,5.0,0.7730343891048205,0.2623276351281778
8.1,What is a stack?,data structure store element property last item added first removed,object list store element particular order first object inserted bottom last object top first object last object,5.0,5.0,5.0,0.848186381184957,0.23332066301290644
8.1,What is a stack?,data structure store element property last item added first removed,adt store set element particular order stack principle lifo last item inserted list first,5.0,5.0,5.0,0.7828108162617982,0.28868293922321825
8.1,What is a stack?,data structure store element property last item added first removed,abstract data type store set element particular order,1.0,4.0,2.5,0.8999451253402329,0.18954615865836488
8.1,What is a stack?,data structure store element property last item added first removed,collection data executed order last first,5.0,5.0,5.0,0.9130534039773213,0.2601226731045866
8.1,What is a stack?,data structure store element property last item added first removed,stack data structure allows data member added removed one time order last first structure,5.0,5.0,5.0,0.6563434466160181,0.5726929971705017
8.1,What is a stack?,data structure store element property last item added first removed,store set element particular order,0.0,4.0,2.0,1.0249100913494895,0.1727822229818124
8.1,What is a stack?,data structure store element property last item added first removed,list element first one removed last one inserted,5.0,5.0,5.0,0.7907580895100563,0.38218293535228276
8.1,What is a stack?,data structure store element property last item added first removed,data structure put element list allows user access last element,4.0,5.0,4.5,0.7553905863862627,0.31321736188450194
8.1,What is a stack?,data structure store element property last item added first removed,finite ordered list zero element,0.0,4.0,2.0,1.1514247625506633,0.04764505262381157
8.1,What is a stack?,data structure store element property last item added first removed,storage container hold object certain order lifo priority,5.0,5.0,5.0,1.247835222851895,0.0
8.1,What is a stack?,data structure store element property last item added first removed,stack type container adaptor specifically designed operate lifo context element inserted extracted end container,5.0,5.0,5.0,1.1299470059446062,0.022005924119019665
8.2,What are the two main functions defined by a stack?,push pop,push pop two main function defined stack,5.0,5.0,5.0,0.9545073943160468,0.5088008600231351
8.2,What are the two main functions defined by a stack?,push pop,push insert element top stack pop remove last inserted element stack,5.0,5.0,5.0,1.0592405189483813,0.33994567778072127
8.2,What are the two main functions defined by a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
8.2,What are the two main functions defined by a stack?,push pop,pop function push function,5.0,5.0,5.0,0.6852410080537996,0.7362831327475903
8.2,What are the two main functions defined by a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
8.2,What are the two main functions defined by a stack?,push pop,push insert item pop remove item,5.0,5.0,5.0,0.8595958354064192,0.4472309411900823
8.2,What are the two main functions defined by a stack?,push pop,adding new item removing item,5.0,5.0,5.0,1.3275808993109584,0.0
8.2,What are the two main functions defined by a stack?,push pop,push insert pop retrieve,5.0,5.0,5.0,0.6313439185791142,0.5270581708595008
8.2,What are the two main functions defined by a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
8.2,What are the two main functions defined by a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
8.2,What are the two main functions defined by a stack?,push pop,pop push,5.0,5.0,5.0,0.0,1.0000000000000002
8.2,What are the two main functions defined by a stack?,push pop,push add element pop remove element,5.0,5.0,5.0,0.860280468025787,0.5367793075160343
8.2,What are the two main functions defined by a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
8.2,What are the two main functions defined by a stack?,push pop,pop push,5.0,5.0,5.0,0.0,1.0000000000000002
8.2,What are the two main functions defined by a stack?,push pop,push add item stack pop pull last item added array,5.0,5.0,5.0,1.0094212818582688,0.34781248210197857
8.2,What are the two main functions defined by a stack?,push pop,pop push,5.0,5.0,5.0,0.0,1.0000000000000002
8.2,What are the two main functions defined by a stack?,push pop,push pop push put object list pop take last object,5.0,5.0,5.0,0.7543089396020694,0.6573997325057632
8.2,What are the two main functions defined by a stack?,push pop,push pop two main function stack,5.0,5.0,5.0,0.8828463558650502,0.570085513780316
8.2,What are the two main functions defined by a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
8.2,What are the two main functions defined by a stack?,push pop,push add element stack pop take element stack,5.0,5.0,5.0,0.9615745117610527,0.41150067663585116
8.2,What are the two main functions defined by a stack?,push pop,push pop add remove data stack respectively,5.0,5.0,5.0,0.9219722783901163,0.4238749400422596
8.2,What are the two main functions defined by a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
8.2,What are the two main functions defined by a stack?,push pop,pop remove item push insert element,5.0,5.0,5.0,0.862203039889508,0.5339474616250008
8.2,What are the two main functions defined by a stack?,push pop,pop push,5.0,5.0,5.0,0.0,1.0000000000000002
8.2,What are the two main functions defined by a stack?,push pop,pop push,5.0,5.0,5.0,0.0,1.0000000000000002
8.2,What are the two main functions defined by a stack?,push pop,push add item top stack pop remove top item stack,5.0,5.0,5.0,1.027368695604026,0.3151838503864427
8.2,What are the two main functions defined by a stack?,push pop,push pop push add given node top stack leaving previous node pop remove return current top node stack,5.0,5.0,5.0,1.0145091777603268,0.4483605839648893
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,array fixed size add delete element end array use pointer keep track last element added time add delete element update pointer check equal max size array,5.0,5.0,5.0,0.8418420778689902,0.2938926428004591
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,implementing array size bottom stack element stored element 0 last element stored array top increment top element pushed decrement item popped,5.0,5.0,5.0,0.8906649044657903,0.279966707121825
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,use dynamically allocated array must provide destructor copy constructor,2.0,4.0,3.0,1.1267720477505403,0.05270349995809053
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,create int value store head stack increment top one element pushed decrement popped,5.0,5.0,5.0,0.9792949867909649,0.1478905182297131
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,use pointer always point end array list modification,5.0,4.0,4.5,0.9856403189587511,0.12859528341274232
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,used array implement stack add element add end array remove item end array also,5.0,4.0,4.5,0.6785322074173706,0.5217211984589427
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,predetermine size stack would array type grow,1.0,4.0,2.5,1.0019118243779537,0.14037243109367542
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,declare variable point last item array increase item pushed onto stack decrease item popped top,5.0,5.0,5.0,0.9415955496820108,0.13997878125753604
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,allocate array size bottom stack element stored element last index array top increment top one element pushed decrement pop,5.0,4.0,4.5,0.8037867609313576,0.33154857964972523
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,allocate array bottom element stored element 0 last index head,5.0,3.0,4.0,1.0440276311784011,0.12461927942469503
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,make array make bottom spot 0 make last spot array top increment top ad,5.0,4.0,4.5,0.9896999851956849,0.166630389851679
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,treat beginning array beginning stack,4.0,4.0,4.0,1.01292273620794,0.1467229136018021
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,use index value called top keep track last element array,5.0,4.0,4.5,0.882718062125186,0.28127531262614347
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,create array implement pointer point next list item stack,1.0,3.0,2.0,0.9931392766183187,0.14985106406973456
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,efficiency easiest implement left right method right item one retrieved pop performed push place object furthest element,3.0,4.0,3.5,0.9464736041723849,0.17583042131788595
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,create array based size n ca element bottom stack element stored element 0 last index array top increment top one element pushed decrement pop,5.0,4.0,4.5,0.8673998696342746,0.32095455712837007
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,element added array last element added end element popped take last element array,4.0,4.0,4.0,0.9105951148029036,0.22891308203661526
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,allocate array size bottom stack element stored element last index array top increment top one element pushed,5.0,4.0,4.5,0.8423627751844049,0.31344284874792255
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,create array size one element pushed n one element popped,4.0,4.0,4.0,0.986574535543274,0.1219440764845047
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,define array keep track pointer last element item added,5.0,3.0,4.0,0.9501714609246013,0.18062697332766992
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,allocating array predetermined size integer track top element stack bottom member stack go element 0 array element pushed top tracking integer incremented,5.0,4.0,4.5,0.8787508948506806,0.2687665443130147
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,allocate array size bottom stack element stored element 0,4.0,4.0,4.0,0.9533335122301165,0.20968683794148885
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,store stack array keep mind first element,3.0,3.0,3.0,0.8307362932257045,0.2904748834343094
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,keep track last item entered array allow user access part array,5.0,3.0,4.0,0.9896577136189557,0.1689950151220257
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,using array pushing one int time stack get end array,4.0,4.0,4.0,0.8680315755098528,0.24274133315259627
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,max number element allocating array number element storing element starting 0 keeping track many element currently list,5.0,3.0,4.0,1.066706661796548,0.11327957611466688
8.3,How can you implement a stack with an array?,keep top stack toward end array push pop operation add remove element right side array,stack usually hold bunch item type therefore u use array hold content stack integer top hold index element top stack u choose array size sequence operation used u decide data type needed stack data structure,2.0,4.0,3.0,0.9512631959910619,0.26622321313514946
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,add element end linked list update pointer called top time modify list,2.0,4.0,3.0,0.7425116376245785,0.3746265366135663
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,implement list head pointer point element recently pushed onto list pop function change head pointer point next last element list remove element head pointer previously pointed,5.0,5.0,5.0,0.8052987886369581,0.3478800953928499
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,implementation stack using single linked list operation performed stack 1 push function insertion pushing element stack similar insertion element end single linked list see function program operation single linked list 2 pop function deletion popping element stack similar deletion element end single linked list see function program operation single linked list 3 function displaying element stack,3.0,5.0,4.0,0.7648605307074607,0.36674992942865264
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,using node keep track head stack using push pop create stack needed,4.0,4.0,4.0,0.821608240556417,0.351799691293019
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,use head top stack modify head push would add new item head pop would remove item head,5.0,4.0,4.5,0.7335200739251498,0.4300649658552559
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,implement stack list changing pointer first element list new item move pointer top stack next item removing item,5.0,4.0,4.5,0.8555790023532885,0.25172051873877527
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,dynamicly create space stack grows stack long need,1.0,4.0,2.5,1.1600819012871093,0.11374701160244091
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,declare pointer point head linked list add remove node beginning list,5.0,5.0,5.0,0.6696081650781643,0.5501166286455295
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,creating linked list add element top stack pushing deleting element popping,4.0,4.0,4.0,0.6770923405059202,0.3574368305741252
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,list already lot like stack depends way address moving head,4.0,3.0,3.5,0.9606382636462929,0.1929010396911026
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,make list make bottom head add end make end top,3.0,4.0,3.5,0.8613348094847265,0.24584209036812643
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,use add function list beginning stack remove pop,5.0,4.0,4.5,0.6811187986613844,0.6051612330415694
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,use head top push pop node head,5.0,4.0,4.5,0.917273887647807,0.4333942679869862
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,create node based list point next list item,0.0,3.0,1.5,1.052448353804458,0.17580261996051236
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,head list last item added push add new head,5.0,4.0,4.5,0.8641651836410729,0.38297731863255724
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,create new list pop element stack needed push stack remove item unless stack empty top item head list last item end,5.0,4.0,4.5,0.6850971553763459,0.4479641512271244
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,adding element end list link element popping element take last element list set previous one end list,3.0,4.0,3.5,0.947268845920161,0.23269514397481889
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,implement stack using array linked list use pointer point element node next element stack use pointer stack becomes linked list,1.0,4.0,2.5,0.8739728108443701,0.33057237656284516
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,element inserted removed head list header node current pointer,5.0,4.0,4.5,0.9356003678348646,0.20179940424539367
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,use linked list keep track pointer point first item,4.0,4.0,4.0,0.9239906668950021,0.24510403872814274
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,singly linked list already easily used lifo data storage member stack simply pushed popped list first item last,5.0,4.0,4.5,0.914307516962761,0.17872306038002775
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,using pointer,0.0,3.0,1.5,1.3205040409781386,0.0
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,top first pointer,3.0,3.0,3.0,1.2066452094531739,0.19394560230387964
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,keep pointer pointing last element entered front array move pointer back delete element,2.0,3.0,2.5,0.9760294180699884,0.20561275480761282
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,using linked list pushing node contains int stack get end linked list,1.0,4.0,2.5,0.8549822436322866,0.282560196111305
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,linked list push add item onto beginning list pop remove first element list,5.0,5.0,5.0,0.5081139535813822,0.622607783534937
8.4,How can you implement a stack with a list?,keep top stack pointing head linked list push pop operation add remove element beginning list,using linked list one way implement stack handle essentially number element usually convenient put data structure module thus want create file,0.0,4.0,2.0,0.9842490659242094,0.13752746606511845
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,converted post fix expression still follow order precedence operator,5.0,5.0,5.0,0.9578151275592055,0.17725927941381442
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,first converted postfix expression evaluated,5.0,5.0,5.0,0.4923045968347911,0.6275496080830585
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,computer evaulate infix expression must first convert infix postfix expression evaluate,5.0,5.0,5.0,0.7233494215578865,0.3164044476163773
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,using parenthesis order expression,2.0,3.0,2.5,1.125491287896738,0.15102585939713226
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,postfix notation,3.0,5.0,4.0,1.0085728464606456,0.39565408749261155
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,computer usually convert infix expression post fix expression evaluate using stack,5.0,5.0,5.0,1.0036895601777447,0.1511552306749121
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,converted postfix,5.0,5.0,5.0,0.8153213233954949,0.6843968033013157
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,infix expression interpreted postfix expression implementing stack,5.0,5.0,5.0,0.9023952805392463,0.37871173490306187
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,first converted equivalent postfix expression read computer,5.0,5.0,5.0,0.6230366019336109,0.4997985883057738
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,computer translates infix expression postfix expression solves,5.0,5.0,5.0,0.9146453315954701,0.3646596509511508
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,postfix format,3.0,5.0,4.0,0.9794539430261766,0.34580160446634034
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,use parenthisis stack determine evaluation need made first,3.0,3.0,3.0,0.9399600074830343,0.168776814343152
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,throwing variable postfix expression operand onto parenthesis regulated stack end parenthesis enough variable operate encountered,4.0,5.0,4.5,1.1038589488783213,0.18771423913188126
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,passed function leading term,0.0,3.0,1.5,1.271757193792444,0.0
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,hard time explaining show infix evaluated instead start infix expression like 5 push item get happens perform operation reach complete 7 5 expression evaluated perform last step stack repeat agian stack repeat stack repeat 115 stack returned,1.0,4.0,2.5,1.1530752935000235,0.07422716053283228
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,infix expression converted postfix form,5.0,5.0,5.0,0.49848548666093584,0.6924564394982948
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,converting postfix expression putting operation stack,5.0,5.0,5.0,0.8385143230269776,0.35351899076409227
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,computer convert infix expression postfix form evaluates postfix expression,5.0,5.0,5.0,0.5564416444976268,0.5673730557495342
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,infix expression converted postfix expression evaluated computer operand stay order operator always follow operand,5.0,5.0,5.0,0.8395817436842297,0.3582015588513088
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,infix expression pointer evaluated reference memory location,0.0,3.0,1.5,1.0825235631099674,0.12313111196608606
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,computer convert infix expression postfix form evaluation,5.0,5.0,5.0,0.5267459355360024,0.562123242444365
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,convert infix expression postfix expression evaluate postfix expression,5.0,5.0,5.0,0.7030310738533669,0.5244614068267452
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,operand entered computer push onto stack operator entered computer applies top two operand stack pop operand stack push result operation onto stack,4.0,4.0,4.0,1.2349574610016818,0.0
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,computer convert infix expression postfix expression push number onto stack pop needed,5.0,5.0,5.0,0.9500939652504967,0.3357179932388117
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,infix expression converted postfix changed,5.0,5.0,5.0,0.6522300411299836,0.5321285501776423
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,transformed expression evaluated stack,5.0,5.0,5.0,1.026377066722348,0.12937117744301105
8.6,How are infix expressions evaluated by computers?,first converted postfix form followed evaluation postfix expression,writing arithmetic expression called infix notation binary operator like written two operand b two alternative form notation used certain situation one prefix notation operator written operand prefix notation sum b written b notation used write function call mathematics computer science also used lisp scheme programming language postfix notation operator written operand sum b written b may seen reverse polish notation postfix notation form conceptual basis way arithmetic expression evaluated computer one important characteristic postfix prefix notation unambiguous parenthesis needed indicate order operation,5.0,5.0,5.0,1.1223664036998844,0.18003265813079836
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,isemptry stack full pop remove top element looking search compare element stack data looking,2.0,4.0,3.0,0.7744209658484895,0.33406704203084725
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,would keep using peek gettop see top element popping top element peek gettop provides element looking,2.0,4.0,3.0,0.9603840525214177,0.13683192016154586
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,push add given node top stack leaving previous node pop remove return current top node stack,2.0,4.0,3.0,0.9233867131787029,0.2630768759723171
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,using linked list stack would need temp stack retain value would use pop function pop element compare element looking push temp stack repeat element found find pop temp stack back onto regular stack complete stack,5.0,5.0,5.0,0.7173136010420581,0.5213135857179362
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,pop item top find looking stack end empty never found item exist stack may also necessary save popped value case want recreate stack,5.0,5.0,5.0,0.9400488308385604,0.30084569074940876
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,stack implemented using array could simply search array item stack implemented using linked list would pop value stack either value found stack empty would item put back list,4.0,5.0,4.5,0.9294730956353527,0.3549938882583311
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,need pop item stack compare item item found item need removed,3.0,4.0,3.5,0.9014900218503645,0.21494204305096676
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,pop element one stack check see desired element push onto another stack finished pop item second stack push back onto first stack ensure order element maintained,5.0,5.0,5.0,0.6108431097619605,0.561083256190124
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,basically pop stack find given element,3.0,4.0,3.5,0.7070907340468138,0.36298650475277816
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,iterate stack checking number current element,0.0,3.0,1.5,0.8509074238226452,0.2634728069404104
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,pop push,2.0,4.0,3.0,1.0930766912549545,0.3241276439360612
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,pop element stack find element push popped element back stack,5.0,5.0,5.0,0.3996642179118063,0.7030779412585806
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,keep popping node storing alternate stack given element found pop given element push previously popped node back onto stack,5.0,5.0,5.0,0.7190176467317348,0.4557193409736559
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,either traverse entire list pop given part create pointer system automatically point,2.0,4.0,3.0,1.1199606326228746,0.05106104891408815
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,depends type stack true stack haft pop element stack find element want need push element removed back stack order removed java style stack peek function return element wanted instead requiring perform excessive action required true stack,5.0,5.0,5.0,0.779874005743142,0.47768614860515995
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,top item given element pop stack repeat item found stack empty,3.0,4.0,3.5,0.7096984412248076,0.46273566116442333
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,could traverse find element,1.0,3.0,2.0,0.9259661303294031,0.14025489780104983
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,need pop opertation go throught stack find element,3.0,4.0,3.5,0.7546612304859737,0.27463093909190733
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,createstack push isempty pop boolean return value,2.0,4.0,3.0,1.058268957413589,0.10975283243635824
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,would traverse stack popping element search,3.0,4.0,3.5,0.8303086983601157,0.2658463883564569
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,pop element stack another stack storage desired element found,4.0,4.0,4.0,0.45635129621659426,0.7066101338594333
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,pop operation,1.0,4.0,2.5,1.2268395537326617,0.16473812970227023
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,pop element push back,4.0,5.0,4.5,0.6408182138866164,0.5774946798101406
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,function keep track element popped function put popped element backinto function,4.0,5.0,4.5,0.9910709478474454,0.1338891204540113
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,would pop element compare looking push back stack lost,4.0,5.0,4.5,0.6750092235270341,0.4175548538503778
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,would need perform search list element dont really understand question asking clear,0.0,3.0,1.5,1.1450823255328664,0.060181367235526514
8.7,What operations would you need to perform to find a given element on a stack?,pop element store another stack element found push back element original stack,stackpush stackpop stackisempty,2.0,4.0,3.0,inf,0.0
9.1,What is a queue?,data structure store element property last item added last removed,data structure collection data kept order first first,5.0,5.0,5.0,0.9463410718895664,0.16742845827340888
9.1,What is a queue?,data structure store element property last item added last removed,queue list object particular order read one time starting first followed second,4.0,4.0,4.0,1.2190190002195853,0.0
9.1,What is a queue?,data structure store element property last item added last removed,queue abstract data structure operation performed end giving queue first first behavior,5.0,5.0,5.0,1.0086157959004216,0.09622093395490111
9.1,What is a queue?,data structure store element property last item added last removed,queue store set element particular order principle operation fifo first first mean first element inserted first one removed,5.0,5.0,5.0,0.9227526230059061,0.16476024105644813
9.1,What is a queue?,data structure store element property last item added last removed,adt whose first inserted item first item removed us fifo idea item enter queue back leave front,5.0,5.0,5.0,1.0157115124655642,0.2063795893326485
9.1,What is a queue?,data structure store element property last item added last removed,last last architecture work way line bank would work person waiting longest get served first,5.0,5.0,5.0,1.068872009320408,0.1833021405026245
9.1,What is a queue?,data structure store element property last item added last removed,queue data structure store element first first order,5.0,5.0,5.0,0.7108063563771627,0.2894130601202425
9.1,What is a queue?,data structure store element property last item added last removed,waiting list item operation fifo first first order,5.0,5.0,5.0,1.0976357036140443,0.08104480841155501
9.1,What is a queue?,data structure store element property last item added last removed,queue similar array except data accessed sequentially rather random unlike stack queue follows fifo first first,5.0,5.0,5.0,1.1571221732518058,0.028073096197549562
9.1,What is a queue?,data structure store element property last item added last removed,particular kind collection entity collection kept order principal operation collection addition entity rear terminal position removal entity front terminal position first first fifo method,5.0,5.0,5.0,1.1932362094728286,0.0
9.1,What is a queue?,data structure store element property last item added last removed,like linked list first first,4.0,5.0,4.5,1.2358378242422783,0.0
9.1,What is a queue?,data structure store element property last item added last removed,queue fifo data structure,5.0,5.0,5.0,1.0600328860571293,0.1945222566212501
9.1,What is a queue?,data structure store element property last item added last removed,queue first first data structure,5.0,5.0,5.0,0.9628677623146137,0.18655637914771317
9.1,What is a queue?,data structure store element property last item added last removed,like stack us linked list stack little differently fifo first thing enqueued first thing dequeued,5.0,5.0,5.0,1.2026998318400077,0.0
9.1,What is a queue?,data structure store element property last item added last removed,first first abstract data type used store value,5.0,5.0,5.0,0.9268905699858878,0.1303633066900975
9.1,What is a queue?,data structure store element property last item added last removed,store set element particular order first first principle,5.0,5.0,5.0,0.9581095551232246,0.11666292911286154
9.1,What is a queue?,data structure store element property last item added last removed,object store element order follows first first first element added first one come,5.0,5.0,5.0,0.889113951540067,0.17975842238078815
9.1,What is a queue?,data structure store element property last item added last removed,quese list store set element particular order stack principle case first first first element inserted first element removed,5.0,5.0,5.0,0.9162360162997787,0.18296317635796044
9.1,What is a queue?,data structure store element property last item added last removed,finite ordered list zero element based upon first first,5.0,5.0,5.0,1.0863900339693908,0.03240141103777299
9.1,What is a queue?,data structure store element property last item added last removed,data structure performs operation order first first fifo,5.0,5.0,5.0,0.9733662964152432,0.12774543514590417
9.1,What is a queue?,data structure store element property last item added last removed,queue first first data structure first element added also first removed,5.0,5.0,5.0,0.6445420578743145,0.31058828572727437
9.1,What is a queue?,data structure store element property last item added last removed,queue buffer store element particular order,2.0,5.0,3.5,1.0434240449975865,0.12237465749605142
9.1,What is a queue?,data structure store element property last item added last removed,store set element first element first element removed,5.0,5.0,5.0,0.8124034218591951,0.32609307476797145
9.1,What is a queue?,data structure store element property last item added last removed,data structure remove node head add node tail,5.0,5.0,5.0,0.9671970767622934,0.13975475515723967
9.1,What is a queue?,data structure store element property last item added last removed,queue list thing follows first first behavior,5.0,5.0,5.0,1.2047311610022606,0.0
9.1,What is a queue?,data structure store element property last item added last removed,queue storage container hold object first first priority,5.0,5.0,5.0,1.1859226930503008,0.0
9.1,What is a queue?,data structure store element property last item added last removed,queue another data structure physical analogy queue line bank go bank customer go rear end line customer come line serviced front line,5.0,5.0,5.0,1.1415640478374567,0.043035941410451646
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue add data queue dequeue deletes data queue,5.0,5.0,5.0,inf,0.40701774884555425
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue insert specified element head specified queue dequeue remove specified element queue,5.0,5.0,5.0,inf,0.27133096200366924
9.2,What are the two main functions defined by a queue?,enqueue dequeue,two main function enqueue insert item back queue dequeue remove item front queue,5.0,5.0,5.0,inf,0.35637900248888343
9.2,What are the two main functions defined by a queue?,enqueue dequeue,two main function enqueue dequeue,5.0,5.0,5.0,inf,0.6945106226994937
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue dequeue,5.0,5.0,5.0,inf,1.0000000000000002
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue dequeue,5.0,5.0,5.0,inf,1.0000000000000002
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue insert queue dequeue remove element,5.0,5.0,5.0,inf,0.5929929294391163
9.2,What are the two main functions defined by a queue?,enqueue dequeue,remove item added first add item back,5.0,5.0,5.0,inf,0.0
9.2,What are the two main functions defined by a queue?,enqueue dequeue,two main function queue enqueue dequeue,5.0,5.0,5.0,inf,0.628030402112173
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue dequeue,5.0,5.0,5.0,inf,1.0000000000000002
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue dequeue,5.0,5.0,5.0,inf,1.0000000000000002
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue dequeue,5.0,5.0,5.0,inf,1.0000000000000002
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue dequeue,5.0,5.0,5.0,inf,1.0000000000000002
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue dequeue,5.0,5.0,5.0,inf,1.0000000000000002
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enque data deque,5.0,5.0,5.0,inf,0.0
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue dequeue,5.0,5.0,5.0,inf,1.0000000000000002
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue dequeue,5.0,5.0,5.0,inf,1.0000000000000002
9.2,What are the two main functions defined by a queue?,enqueue dequeue,two function enqueue dequeue,5.0,5.0,5.0,inf,0.7959554682621873
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue dequeue,5.0,5.0,5.0,inf,1.0000000000000002
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue add item queue dequeue take first item queue,5.0,5.0,5.0,inf,0.4112563184267413
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue dequeue add remove element queue,5.0,5.0,5.0,inf,0.6123197286292241
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue dequeue,5.0,5.0,5.0,inf,1.0000000000000002
9.2,What are the two main functions defined by a queue?,enqueue dequeue,dequeue enqueue,5.0,5.0,5.0,inf,1.0000000000000002
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue dequeue,5.0,5.0,5.0,inf,1.0000000000000002
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue dequeue,5.0,5.0,5.0,inf,1.0000000000000002
9.2,What are the two main functions defined by a queue?,enqueue dequeue,enqueue dequeue,5.0,5.0,5.0,inf,1.0000000000000002
9.2,What are the two main functions defined by a queue?,enqueue dequeue,rear front,2.0,3.0,2.5,inf,0.0
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,make use front pointer tail pointer tail pointer reach end array get reset front array two pointer equal queue either full one element,5.0,4.0,4.5,0.8125059577484438,0.28735650920489797
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,create array max size queue adjust item make follow fifo procedure,2.0,4.0,3.0,1.058138990331483,0.07599334162240129
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,implementing array adding item end array removing item beginning array,2.0,4.0,3.0,0.9944664635695979,0.20382212554374954
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,application queue present problem use array represent queue,1.0,4.0,2.5,0.9798682659970303,0.1840510672193827
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,keep track front back array increase decrease element inside array,4.0,4.0,4.0,0.9480115045334422,0.19447895772809984
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,declare size array special conditional statement pointer make sure array say array 20 element load 18 dequeue 3 enqueue 4 element want loop back index 0 continue process save resource,5.0,4.0,4.5,1.0494375673086518,0.08209433487133137
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,could use first element list remove point insert end f would shift element time remove item unless make array circular,3.0,5.0,4.0,0.9787894216435642,0.15090732136084564
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,utilizing index front back front 0 add item back index incremented,4.0,4.0,4.0,1.1289249897694265,0.10056077441815958
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,declare two variable front rear used denote element array accessed increment rear whenever data enqueued end increment front whenever data dequeued,5.0,4.0,4.5,0.9161655307457667,0.27288591850770794
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,array fixed size queue maximum n element,1.0,4.0,2.5,1.0696806144151771,0.138527979924859
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,make array size add front delete back keep track two know full add subtract,4.0,4.0,4.0,1.009385830353824,0.12224364323352488
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,using beginning array removal point queue beginning queue ith element end queue,3.0,4.0,3.5,0.8997972065921641,0.2742652566844321
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,add data first element last take data first element last,2.0,4.0,3.0,1.2645956792009783,0.0
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,take array put queue stack traverse list keep track top bottom,3.0,4.0,3.5,0.9918617013776294,0.14953296618388523
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,create fixed array size 2 integer point beginning end que special case know que empty full,4.0,4.0,4.0,1.0245471236242993,0.09018272095546274
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,keep track front rear index either 1 dequeue item shifting array left 2 use wrapped configuration,4.0,4.0,4.0,0.8385555399915672,0.28360880745505773
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,add item fixed size array pull item calling starting index increase starting index call next index element array,3.0,4.0,3.5,1.107105992435046,0.04960344019005254
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,use array implement queue element item 0 top element array every time element inserted item array pushed back one space top element always removed first,2.0,4.0,3.0,0.9979039752990901,0.14418801829568792
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,fixed size array max n element need keep track front rear array,4.0,4.0,4.0,0.8653178998293294,0.3397671334200165
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,keeping track front item rear item circular array us modulo function,5.0,5.0,5.0,0.8753225582615681,0.2713176808988546
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,using array queue size array allocated limit size queue array based queue class must keep track front back queue may need wrap around array,5.0,5.0,5.0,0.8164149502497329,0.36458973459183946
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,pointer based implementation queue could use linear linked list two external pointer one front one back,0.0,4.0,2.0,0.9514551022698007,0.18958565808258154
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,remove element shift element one space back,2.0,4.0,3.0,1.2519129441860575,0.0
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,head pointer point first least current data entered tail point current data entered method must created tail pointer leave array,5.0,5.0,5.0,1.105838858999366,0.06432886778990173
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,array type queue fixed length,0.0,3.0,1.5,1.0671084903026742,0.15359041945663127
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,storage class array keep track index first last item array wrap around end array full,5.0,5.0,5.0,0.8294378289283323,0.3245675323960614
9.3,How can you implement a queue with an array?,use circular array keep rear queue toward end array front toward beginning allow rear pointer wrap around,boolean isfullq queue rear,5.0,5.0,5.0,1.0767824282713159,0.24007852772344085
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,list unlimited element push node onto end list pop one front,5.0,5.0,5.0,0.9133220837109832,0.26577851858192
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,theoretically could two way one us processing power memory larger queue ever full us almost infinite memory practical method would two place item array remove item position one array shift array add another element required option use infinite memory used long term queue job scheduling go nonstop extended period implement array add item read item one raise counter value two ecetera continue adding element array downside method use element one still memory im crazy know,0.0,4.0,2.0,1.2092101769160724,0.04277417220424512
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,implementing list tail pointer point item recently inserted onto back list head pointer point item least recently inserted onto list also item removed front list added back list,5.0,5.0,5.0,0.8989269693555585,0.24368698244248518
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,use list represent item queue,0.0,3.0,1.5,0.957314822602705,0.23169437359529002
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,pointer last element list use enqueue insert item link first last element together dequeue list,3.0,4.0,3.5,1.0640412728479882,0.21712934918930907
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,enqueue end linked list dequeue item beginning head list,5.0,5.0,5.0,0.759264666991843,0.5354907962874058
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,use first element list remove point queue insert item end list,5.0,5.0,5.0,0.8545682488452719,0.3171791634485337
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,utilizing front pointer back pointer front poiner back pointer point first item queue add item front remains back poiner point new item new item assigned become back pointer,5.0,4.0,4.5,1.134085152363449,0.0883172286651997
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,implement linked list allows node added tail retrieved head,5.0,4.0,4.5,0.9072483760891981,0.2618937297166918
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,check list empty add element list,1.0,4.0,2.5,1.0419884230517493,0.21994057182459412
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,make linked list add front delete back keep track,5.0,4.0,4.5,0.8404294829117025,0.30609796497201264
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,making head list beginning queue last listed item insertion point queue,5.0,4.0,4.5,0.8942035380895875,0.304287269445489
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,throw data head take tail,4.0,5.0,4.5,1.1678340299463552,0.1488220238355184
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,create list node head top pointer function basically substituting pop push enqueue dequeue,2.0,4.0,3.0,1.0752125615198105,0.19284659806638849
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,fairly easy singly linked list pointer head tail hte list deque first item que create temp pointer next element delete head make head temporary pointer enque new item use pointer end list add new item next item tail make tail next item current tail,5.0,4.0,4.5,0.9887775054151948,0.22931667546083198
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,use linked list 2 pointer one front one back long back front queue empty,5.0,4.0,4.5,0.9168501967482734,0.2613270441517701
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,create node input data continue add list dequeueing get first element data set next element list new first element,4.0,4.0,4.0,1.1268952279628017,0.1131062826899992
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,linked list stack principle queue top element element always removed first must use node contain element pointer top element also could called head pointer,2.0,4.0,3.0,1.0460623778586549,0.16826075780973113
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,linked list checking front rear keep enqueueing element front equal rear,3.0,4.0,3.5,0.797854756808753,0.3468675050240566
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,queue implemented list keeping track two pointer head tail,5.0,4.0,4.5,0.8404547462006408,0.2714538481662255
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,element queue allocated node linked list new element added head list dequeued element coming tail,5.0,5.0,5.0,0.7922378160300411,0.3237266207601788
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,implement operation dequeue list operation remove 1 operation getfront queuefront list operation retrieve 1 queuefront,3.0,5.0,4.0,0.9523855340708204,0.27393462785756717
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,remove first element reference second element new head list,3.0,4.0,3.5,1.0693733691206853,0.14807271443799352
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,creating adding node end list removing node beginning list,5.0,5.0,5.0,0.9254844323634951,0.23642655762753084
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,would list add back pointer program know end,4.0,4.0,4.0,1.016953200069113,0.13763713036659936
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,queue storage class list enqueue add item end list dequeue return first item list,4.0,5.0,4.5,0.8882717331581172,0.38944883655952334
9.4,How can you implement a queue with a list?,keep rear queue pointing tail linked list enqueue operation done end list keep front queue pointing head linked list dequeue operation done beginning list,gt null front rear gt temp else front temp rear temp,3.0,4.0,3.5,1.1757357710685574,0.11108975083204445
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,0.0,1.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push insert something top stack,5.0,5.0,5.0,0.9949865471624888,0.3282733863854186
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,stack operation corresponding enqueue queue push operation,5.0,5.0,5.0,1.1068591356713444,0.27262882306788205
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push stack operation corresponds enqueue operation queue operation insert new item one end top back respectively adt,5.0,5.0,5.0,1.2300423047570628,0.162048867356606
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,stack operation almost opposite enqueue operation,0.0,5.0,2.5,1.342704638644562,0.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push enqueue pop dequeue,5.0,4.0,4.5,0.6382778582893153,0.4485677671610666
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,0.0,1.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,sure question mean use stack operation enqueue operation detect palindrome,5.0,5.0,5.0,1.3014755717483546,0.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,enqueue queue equivalent push dequeue queue equivalent pop,5.0,5.0,5.0,1.1156484536025784,0.18997420070254384
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push operation,5.0,5.0,5.0,0.6702480222823077,0.6920467617555998
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,0.0,1.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,0.0,1.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,0.0,1.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,0.0,1.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,would push operation put item end list,5.0,5.0,5.0,1.0899169638468686,0.326325611549109
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,0.0,1.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,0.0,1.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push method stack operation,5.0,5.0,5.0,1.0075579856610422,0.425494412445292
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,0.0,1.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,enqueue corresponds push dequeue corresponds pop,5.0,4.0,4.5,1.0125899625717332,0.2114608829914449
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push corresponds enqueue similarly place new element stack queue,5.0,5.0,5.0,1.1542651930083085,0.23022415696161175
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,fifo first first,0.0,3.0,1.5,1.3271913487954228,0.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,0.0,1.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,0.0,1.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,0.0,1.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,0.0,1.0
9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,0.0,1.0
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,hierarchy node sorted particular order node ancestor except root child except leaf,3.0,5.0,4.0,0.9402394993391106,0.20713597292279734
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,tree finite set one node specially designated node called root remaining node partitioned disjoint set set tree,5.0,5.0,5.0,0.3784746700837309,0.7288136850201052
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,tree finite set one node specially designated node called root,4.0,5.0,4.5,0.5068294365711388,0.506516528254087
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,connected undirected graph without cycle,4.0,5.0,4.5,1.2836039730213067,0.0
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,data structure contains root internal node external node node reference another node mean pointer root base tree parent leaf node end tree point null,5.0,5.0,5.0,0.8185570697993122,0.41079432235214447
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,tree series node node link node,1.0,5.0,3.0,0.9194165285987188,0.4072485564862622
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,infinite set node root descendant addition leaf,2.0,5.0,3.5,0.8060480337628161,0.3083916238562459
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,set one node hierarchically organized one special root node,3.0,5.0,4.0,0.5635942758234651,0.544794330406262
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,tree finite set one node specially designated node called root,2.0,5.0,3.5,0.5068294365711388,0.506516528254087
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,one node hierarchy starting root branching like tree subtrees,5.0,5.0,5.0,0.8216184089299021,0.2270796325190878
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,tree data structure node linked hierarchical manner,2.0,5.0,3.5,0.9959736989438783,0.16904177090463374
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,grouping data parent child structure,2.0,4.0,3.0,1.2649378896453847,0.0
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,list number list made comparing value node already tree adding appropriate spot list made node left right pointer,1.0,5.0,3.0,1.0561040674739253,0.17742850691416434
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,tree branched data structure node leaf special node called root parent node however like node 2 node link namely one right one left,4.0,5.0,4.5,0.6734753488487613,0.500350086846432
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,organizes data nonlinear hierarchical form item one successor partitioned root node subset general subtrees root,5.0,5.0,5.0,0.883302316444783,0.23917062285374557
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,tree finite set one node specially designated node called root remaining node partitioned n gt disjoint set n plus 1 element set tree,5.0,5.0,5.0,0.5608572330093715,0.6696623151846889
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,finite set node start root terminates leaf,3.0,5.0,4.0,0.7957653170872407,0.3342683654328314
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,set data arranged pointer element many pointer two pointer point element,1.0,4.0,2.5,1.1419550080608127,0.125321714538651
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,tree data structure one data node contains data node number attached child node creating branched structure tree named,4.0,5.0,4.5,0.8829269646754151,0.2895053084104908
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,finite collection node start element called root child child child get leaf last element child,4.0,5.0,4.5,0.9103202246961076,0.20077505410898905
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,nonlinear data structure,0.0,4.0,2.0,1.2752739536653734,0.0
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,finite set one node root node node split tree lesser value root,3.0,5.0,4.0,0.6155023465592429,0.5317993376539741
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,finite number node one root node node certain number child node child also tree,5.0,5.0,5.0,0.7272913156171502,0.41784641344616363
10.1,What is a tree?,collection node special node called root rest node partitioned one disjoint set set tree,type data structure element attached one element directly beneath,3.0,5.0,4.0,1.1706365670150953,0.040744669770599706
10.2,What is the height of a tree?,length longest path root leaf,level generation tree people count root generation,4.0,4.0,4.0,1.098868083270422,0.07537739393254683
10.2,What is the height of a tree?,length longest path root leaf,height tree term level node tree empty height 0 otherwise height equal maximum level node,4.0,5.0,4.5,1.2299333926395086,0.0
10.2,What is the height of a tree?,length longest path root leaf,height tree number node longest path root leaf,5.0,5.0,5.0,0.5991106159594369,0.7264846229259008
10.2,What is the height of a tree?,length longest path root leaf,number node longest path root tree leaf,5.0,5.0,5.0,0.5348570366179244,0.7843146804371758
10.2,What is the height of a tree?,length longest path root leaf,height number time must progress level tree reach leaf greatest distance root,5.0,5.0,5.0,1.0013397165601572,0.1909631869825363
10.2,What is the height of a tree?,length longest path root leaf,height tree length root furthest leaf,5.0,5.0,5.0,0.6121743118090552,0.4582990819006785
10.2,What is the height of a tree?,length longest path root leaf,height number generation level root,4.0,5.0,4.5,1.0131748544860932,0.12462063934829441
10.2,What is the height of a tree?,length longest path root leaf,height tree number level root leaf farthest away,5.0,5.0,5.0,0.8839190554789002,0.24150572608381932
10.2,What is the height of a tree?,length longest path root leaf,depth furthest leaf,4.0,5.0,4.5,0.9615940086648672,0.19615898367794293
10.2,What is the height of a tree?,length longest path root leaf,number node root leaf,3.0,4.0,3.5,0.7798016364829774,0.4524375225253812
10.2,What is the height of a tree?,length longest path root leaf,distance deepest leaf root,5.0,5.0,5.0,0.6988509346026331,0.2889617756032856
10.2,What is the height of a tree?,length longest path root leaf,number generation level tree,4.0,5.0,4.5,1.2449061739282392,0.0
10.2,What is the height of a tree?,length longest path root leaf,intensity child say begin one node thats one height add two child node two child node two child node youre current height would 4,2.0,4.0,3.0,1.2688491455199673,0.0
10.2,What is the height of a tree?,length longest path root leaf,number level tree like tree minimum depth 3 height 8 8 node,3.0,4.0,3.5,1.2270480646336008,0.0
10.2,What is the height of a tree?,length longest path root leaf,number node longest path root leaf,5.0,5.0,5.0,0.42872505690822293,0.8207212439742554
10.2,What is the height of a tree?,length longest path root leaf,height tree number node longes path root leaf,5.0,5.0,5.0,0.6991928992074141,0.4616725079517603
10.2,What is the height of a tree?,length longest path root leaf,equal number level level root node terminal node,4.0,5.0,4.5,1.1369102962191195,0.08432733027719509
10.2,What is the height of a tree?,length longest path root leaf,number generation level tree,4.0,5.0,4.5,1.2449061739282392,0.0
10.2,What is the height of a tree?,length longest path root leaf,height tree depth subtrees many layer deep,4.0,5.0,4.5,1.2078017040058178,0.0
10.2,What is the height of a tree?,length longest path root leaf,number generation tree,4.0,5.0,4.5,1.2465581869106819,0.0
10.2,What is the height of a tree?,length longest path root leaf,number node longest path root leaf,5.0,5.0,5.0,0.42872505690822293,0.8207212439742554
10.2,What is the height of a tree?,length longest path root leaf,number distinct level separation,3.0,5.0,4.0,1.3067926632438045,0.0
10.2,What is the height of a tree?,length longest path root leaf,height tree many level node,4.0,5.0,4.5,1.2039022431621307,0.0
10.2,What is the height of a tree?,length longest path root leaf,connection element called branch tree often called inverted tree normally drawn root top,0.0,3.0,1.5,1.1711828972678995,0.06650587818262207
10.3,What is a leaf?,node child,leaf child parent node child node,5.0,5.0,5.0,0.3891348866447732,0.8301852414270285
10.3,What is a leaf?,node child,leaf node child,5.0,5.0,5.0,0.4327080527902496,0.7261878050244737
10.3,What is a leaf?,node child,node child,5.0,5.0,5.0,0.0,1.0000000000000002
10.3,What is a leaf?,node child,tree node child,5.0,5.0,5.0,0.4150502184574483,0.8323521785459949
10.3,What is a leaf?,node child,end point tree node child,5.0,5.0,5.0,0.7865277938811831,0.6343180920730931
10.3,What is a leaf?,node child,node child,5.0,5.0,5.0,0.0,1.0000000000000002
10.3,What is a leaf?,node child,new item tree child,2.0,4.0,3.0,0.9798155635693461,0.370296098094764
10.3,What is a leaf?,node child,leaf node child terminating node,0.0,4.0,2.0,0.5267972858563075,0.6433494816309969
10.3,What is a leaf?,node child,node degree 0,3.0,5.0,4.0,0.8885460086011401,0.25651099835307506
10.3,What is a leaf?,node child,node degree 0,3.0,5.0,4.0,0.8885460086011401,0.25651099835307506
10.3,What is a leaf?,node child,leaf node child,5.0,5.0,5.0,0.4327080527902496,0.7261878050244737
10.3,What is a leaf?,node child,last child branch,4.0,5.0,4.5,0.8957167636159366,0.360581454176029
10.3,What is a leaf?,node child,last value tree value child attatched,5.0,5.0,5.0,1.1064052815198906,0.24529113354484552
10.3,What is a leaf?,node child,node child,5.0,5.0,5.0,0.0,1.0000000000000002
10.3,What is a leaf?,node child,node child,5.0,5.0,5.0,0.0,1.0000000000000002
10.3,What is a leaf?,node child,leaf node child,5.0,5.0,5.0,0.4327080527902496,0.7261878050244737
10.3,What is a leaf?,node child,node degree last node tree furtherest away root,3.0,5.0,4.0,0.9805300064404538,0.25541008892820233
10.3,What is a leaf?,node child,endpoint tree contains pointer pointer set null,4.0,5.0,4.5,1.3014823422759907,0.0
10.3,What is a leaf?,node child,leaf node child,5.0,5.0,5.0,0.4327080527902496,0.7261878050244737
10.3,What is a leaf?,node child,element tree child,5.0,5.0,5.0,0.8399351359571443,0.5319884832035928
10.3,What is a leaf?,node child,node child,5.0,5.0,5.0,0.0,1.0000000000000002
10.3,What is a leaf?,node child,leaf node child node,5.0,5.0,5.0,0.32702594595468915,0.793953552360634
10.3,What is a leaf?,node child,leaf node child,5.0,5.0,5.0,0.4327080527902496,0.7261878050244737
10.3,What is a leaf?,node child,element bottom inverted tree element called leaf,5.0,5.0,5.0,1.2940928355581387,0.0
10.4,What is a binary tree?,tree maximum number child per node two,tree data structure done two child typical called left right node right node usually greater left node parent node,4.0,5.0,4.5,0.8731015494804744,0.32891844898828243
10.4,What is a binary tree?,tree maximum number child per node two,binary tree set node either empty partitioned root node one two subset binary subtrees root node two child right left child,5.0,5.0,5.0,0.7654923615362988,0.3760858002312131
10.4,What is a binary tree?,tree maximum number child per node two,set node either empty partitioned root node one two subset binary subtrees root node two child left child right child,5.0,5.0,5.0,0.7660340229879979,0.39116776476429466
10.4,What is a binary tree?,tree maximum number child per node two,set zero node partitioned root node two possibly empty set binary tree thus node binary tree two child left child right child,5.0,5.0,5.0,0.6977838421266948,0.4325212055496461
10.4,What is a binary tree?,tree maximum number child per node two,tree parent maximum 2 child,5.0,5.0,5.0,0.7093019431836026,0.5639666655248885
10.4,What is a binary tree?,tree maximum number child per node two,tree node 2 child,5.0,5.0,5.0,0.7030692334843457,0.5501418336749822
10.4,What is a binary tree?,tree maximum number child per node two,tree two child right subtree left subtree,5.0,5.0,5.0,0.7549598522824396,0.30591020047770984
10.4,What is a binary tree?,tree maximum number child per node two,binary tree tree node maximum two degree two child,5.0,5.0,5.0,0.47987613010704766,0.6342243463689172
10.4,What is a binary tree?,tree maximum number child per node two,binary tree tree data structure node two child,5.0,5.0,5.0,0.6290808654882996,0.5020747184671208
10.4,What is a binary tree?,tree maximum number child per node two,tree 2 joint left right,4.0,5.0,4.5,1.0899501080385843,0.10412653792585427
10.4,What is a binary tree?,tree maximum number child per node two,binary search tree tree also condition node may maximum 2 child,4.0,5.0,4.5,0.7269686411323077,0.4557532916324553
10.4,What is a binary tree?,tree maximum number child per node two,tree parent max two child,5.0,5.0,5.0,0.6914186689803474,0.3600087054502199
10.4,What is a binary tree?,tree maximum number child per node two,list number ordered compared compare number already added tree,1.0,3.0,2.0,0.942449597457442,0.22303711123630326
10.4,What is a binary tree?,tree maximum number child per node two,tree node 2 child,5.0,5.0,5.0,0.7030692334843457,0.5501418336749822
10.4,What is a binary tree?,tree maximum number child per node two,starting root node branch one two subset binary subtrees root node two child left child right child,5.0,5.0,5.0,0.7598450475110852,0.38577878615814354
10.4,What is a binary tree?,tree maximum number child per node two,binary tree set node either empty partitioned root node one two subset binary subtrees root node two child left child right child,5.0,5.0,5.0,0.7183786326003863,0.40797035345724286
10.4,What is a binary tree?,tree maximum number child per node two,tree maximum 2 child per node,5.0,5.0,5.0,0.34358977795705553,0.8774632174801986
10.4,What is a binary tree?,tree maximum number child per node two,tree element contain two pointer,5.0,5.0,5.0,0.9381775977867469,0.2820631650841272
10.4,What is a binary tree?,tree maximum number child per node two,binary tree two child node,5.0,5.0,5.0,0.5536869785707597,0.5468479842150655
10.4,What is a binary tree?,tree maximum number child per node two,tree every parent two child,4.0,5.0,4.5,0.7167685165730001,0.4031472094624401
10.4,What is a binary tree?,tree maximum number child per node two,tree every node two child,5.0,5.0,5.0,0.5159704831190824,0.5421283824230412
10.4,What is a binary tree?,tree maximum number child per node two,binary tree special search tree node either 2 1 0 child,4.0,5.0,4.5,0.8234294974989688,0.3318327667172861
10.4,What is a binary tree?,tree maximum number child per node two,binary tree special type tree node maximum 2 child,5.0,5.0,5.0,0.6509848237764824,0.5501812273787818
10.4,What is a binary tree?,tree maximum number child per node two,binary tree special type inverted tree element two branch,4.0,5.0,4.5,0.9458779980479207,0.22864319174623576
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,tree data structure node value total order defined value left subtree contains value le parent node vice versa right subtree,5.0,5.0,5.0,0.89706358815953,0.1968941852513171
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary search tree binary tree value node greater value every node n left subtree le every node n right subtree,5.0,5.0,5.0,0.8180554208595445,0.3012077203356937
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary tree value node n greater value every node n left subtree le value every node n right subtree,5.0,5.0,5.0,0.8746838239935342,0.23080698279068493
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary tree search key node n greater search key node n left subtree le search key node n right subtree,5.0,5.0,5.0,0.9064296432610691,0.1727319469534287
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,tree split based value make easy search one compare desired value root root greater search left side tree le search right side thing recursively,5.0,5.0,5.0,1.035504882241758,0.09692063944041664
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,tree node two node node left le root node right greater root,4.0,5.0,4.5,0.8429405011892708,0.24742380426923138
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,special binary tree rule subtrees right smaller node value subtrees left larger node value,5.0,3.0,4.0,0.5860339904408304,0.3282469764992118
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary search tree similar binary tree implemented organize data specific way later searching,3.0,4.0,3.5,1.0323591693862282,0.18569495840445738
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary tree node value total order defined value left subtree node contains value le node value right subtree node contains value greater equal node value,5.0,5.0,5.0,0.9517758417019831,0.1901946498285147
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary tree data organized specific arangment,2.0,3.0,2.5,1.0708629669952088,0.14837517835368608
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary search tree tree also condition node may maximum 2 child input data compared data tree starting root value smaller root traverse left larger traverse right becomes leaf,4.0,5.0,4.5,0.8653858063903347,0.35170977531356973
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary tree data order left right,4.0,4.0,4.0,0.8502454263506998,0.3747977656087545
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,tree set easily searched number based location compared previous node,3.0,4.0,3.5,1.0655613975448954,0.07803083003203604
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary tree child ordered right side greater current node left le equal current node,5.0,5.0,5.0,0.7156027687179032,0.33199769226079057
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary tree value node n greater value every node n left subtree le every value n right subtree,5.0,5.0,5.0,0.8549211324438822,0.21519042944847672
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary search tree finite set node either empty consits root two disjoint binary tree call left right subtrees,1.0,4.0,2.5,0.8257358925527959,0.26987595756078986
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,similar binary tree key nonempty left subtree right subtree smaller larger key root subtree value node left subtree node le node value value node right subtree node greater node value,5.0,5.0,5.0,0.760190228455973,0.26471901902385586
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,set number arranged link node contain two pointer element node left parent smaller node right larger recursive implementation implies traversed order output would sorted,5.0,4.0,4.5,0.9247517894938847,0.27659779169134063
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary search tree special binary tree arranged every left child node contains value le parent every right child node contains value greater parent,5.0,5.0,5.0,0.6231508251165006,0.48013662181438216
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary tree special organization data left child element le right child larger,5.0,5.0,5.0,0.5826299010809124,0.429879598369524
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,tree smaller value located left parent node larger value located right parent node,5.0,5.0,5.0,0.5961208780097622,0.3891002417718151
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary search tree special tree node two child labeled left child right child,1.0,4.0,2.5,0.5517674374713185,0.5333274062108858
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary tree node unique key left child node value le node right child node higher value node,5.0,5.0,5.0,0.7215888146176845,0.4139905270060173
10.5,What is a binary search tree?,binary tree property node left child smaller parent turn smaller right child,binary search tree fundamental data structure used construct abstract data structure set multisets associative array,2.0,3.0,2.5,1.1045911134807416,0.09166310611703976
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,every node binary tree first visit left visit parent node right,5.0,5.0,5.0,1.0568943763501084,0.1170888219551828
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,inorder traversal binary tree visit node binary tree order according data value,2.0,3.0,2.5,1.2950970024426356,0.0
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,traverse binary tree inorder let visit node order according data value,2.0,4.0,3.0,1.171878395440404,0.11149359743523765
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,used visit node binary search tree search key order,3.0,4.0,3.5,1.3004352506428096,0.0
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,left side tree root right side tree,5.0,5.0,5.0,0.725760692469166,0.23466022943431752
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,printing tree order least greatest done going far left tree possible printing parent right tree move tree,5.0,5.0,5.0,1.1271081670320264,0.0721270682772649
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,order go left root right,5.0,5.0,5.0,0.5221911596058694,0.34827089084446694
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,inorder traversal binary tree retrieve start furthest left hand leaf check parent right side sibling go level repeat get root,4.0,5.0,4.5,1.0637125370687255,0.13400749269034173
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,traverse left subtree visit root traverse right subtree,5.0,5.0,5.0,0.34731983273806044,0.8875410134715394
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,postorder,0.0,3.0,1.5,inf,0.0
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,order start root right child left child recursively,0.0,3.0,1.5,0.8162749144973327,0.24221472882153494
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,left child gt parent gt right child,5.0,5.0,5.0,0.9800340114419237,0.11933333663717859
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,go lowest highest inside tree,1.0,3.0,2.0,1.2456373454972565,0.0
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,starting displaying node furthest right node node right recursive order,3.0,5.0,4.0,1.031189650123945,0.1101297671194304
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,travel left right,3.0,4.0,3.5,0.641929106565194,0.23214608601083403
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,void inorder ptnode ptr ptr inorder gt left cout lt lt gt data inorder gt right,5.0,5.0,5.0,1.156467260266427,0.05258140758969801
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,root middle left subtree traversed first root finally right subtree,5.0,5.0,5.0,0.5705675980495044,0.6472872014490231
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,traversal visit left branch first parent node right branch recursively,5.0,5.0,5.0,1.0221066207972331,0.1116591668447601
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,inorder traversal visit left branch node way deepest leaf visiting node visiting entire left branch node visit node right branch following pattern left child node right child,5.0,5.0,5.0,1.03377212823036,0.1304537441119862
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,left middle right,5.0,5.0,5.0,0.6679515455564363,0.24424426007041516
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,traverse node left visit root traverse node right,5.0,5.0,5.0,0.5101643678658881,0.48763597147327903
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,would go furthest left node root right left right exist would return one node previous reached root go furthest left node right side root continue process,5.0,5.0,5.0,0.8215824198974206,0.2944990978129246
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,mean traverse one subtree node look node traversing subtree node,4.0,4.0,4.0,1.0836352083410905,0.4880644457999552
10.6,What is the inorder traversal of a binary tree?,traverse left subtree root right subtree,level order traversal traversal method level visited successively starting level 0 root node node visited left right level push pop method,0.0,4.0,2.0,1.0904740059396043,0.0976011588554778
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,runtime order log n n number node binary tree,5.0,5.0,5.0,0.8833388740430657,0.4773708885435749
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,binary search tree size take log n comparison find specified element,5.0,5.0,5.0,0.9340301162665148,0.34624337067340083
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,algorithm compare find element,0.0,4.0,2.0,1.1043329132366968,0.06931457271293778
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,equivalent height tree,5.0,5.0,5.0,0.6567959915383604,0.4550074500195267
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,log n,5.0,5.0,5.0,1.100384570773167,0.468934288437932
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,log n,5.0,5.0,5.0,1.100384570773167,0.468934288437932
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,depends half tree level,3.0,4.0,3.5,0.9678422151852468,0.21325256898811074
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,log n balanced tree,5.0,5.0,5.0,0.778768011553703,0.4663909286148912
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,,2.0,3.0,2.5,inf,0.0
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,log n,5.0,5.0,5.0,1.100384570773167,0.468934288437932
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,nlog n,0.0,5.0,2.5,1.398548527449279,0.0
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,nlog n,0.0,4.0,2.0,1.398548527449279,0.0
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,logn,5.0,5.0,5.0,inf,0.0
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,minimum log n 2 maximum n search n number node,4.0,5.0,4.5,1.0570609445411054,0.3195213193218162
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,n,2.0,4.0,3.0,1.398548527449279,0.0
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,take 3 comparison find element binary search tree,0.0,3.0,1.5,0.987810240629666,0.22996703562029347
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,log n n equal number node,5.0,5.0,5.0,0.8838462156929587,0.39677326801408674
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,take many comparison number level binary search tree compare one number level,5.0,5.0,5.0,0.9651182683147533,0.2431025173664047
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,take one le comparison tree height notation take log n comparison tree balanced,5.0,5.0,5.0,0.9012285227714176,0.40114824630411416
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,log n,5.0,5.0,5.0,1.100384570773167,0.468934288437932
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,log n comparison,5.0,5.0,5.0,1.0899486170941106,0.29125759293508907
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,k height tree,0.0,3.0,1.5,0.6660219673047958,0.7313903549803078
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,take h comparison h height tree,5.0,5.0,5.0,0.8826506710638177,0.43519700877869477
10.7,How many comparisons does it take to find an element in a binary search tree?,height tree log number element tree,2 way key comparison,0.0,2.0,1.0,1.2874514864468647,0.0
11.1,What are the elements typically included in a class definition?,function member data member,name class file parameter must take perform function also brief description class,1.5,3.75,2.625,1.1999610474978266,0.035289832261451944
11.1,What are the elements typically included in a class definition?,function member data member,access specifier function oftentimes constructor,3.0,3.0,3.0,1.0791784331549565,0.05185537213106949
11.1,What are the elements typically included in a class definition?,function member data member,element typically included class definition function prototype usually declared public data member used class usually declared private,5.0,5.0,5.0,1.1032315616370263,0.23961061248047943
11.1,What are the elements typically included in a class definition?,function member data member,class user defined contains member data function keyword class used includes bracket,2.5,5.0,3.75,0.9908094841692638,0.2986247849702705
11.1,What are the elements typically included in a class definition?,function member data member,member function data member,5.0,5.0,5.0,0.0,1.0000000000000002
11.1,What are the elements typically included in a class definition?,function member data member,function variable used object defined class,5.0,3.0,4.0,1.1193907523822006,0.06993184634414867
11.1,What are the elements typically included in a class definition?,function member data member,data member function function definition variable,5.0,5.0,5.0,0.5726514318011324,0.6532407968458711
11.1,What are the elements typically included in a class definition?,function member data member,return type input parameter,1.5,2.5,2.0,1.289764516047256,0.0
11.1,What are the elements typically included in a class definition?,function member data member,constructor data member method,5.0,4.0,4.5,0.6558059805153358,0.542889003257545
11.1,What are the elements typically included in a class definition?,function member data member,function member member attribute word class variable function,5.0,5.0,5.0,0.6742430632769429,0.632437499564052
11.1,What are the elements typically included in a class definition?,function member data member,element included class definition data type variable function signature,4.0,4.0,4.0,1.0388702053911627,0.14737253513776796
11.1,What are the elements typically included in a class definition?,function member data member,variable function prototype,5.0,3.0,4.0,1.0178588836558724,0.10874486456955078
11.1,What are the elements typically included in a class definition?,function member data member,public private variable initiation function included class,4.5,2.5,3.5,1.1495178624513422,0.0503576513093033
11.1,What are the elements typically included in a class definition?,function member data member,return value accepted value,1.5,1.25,1.375,1.3288771226356562,0.0
11.1,What are the elements typically included in a class definition?,function member data member,class definition typically includes class name class constructor extra function class variable,5.0,2.5,3.75,1.2334212598049037,0.03383671789060405
11.1,What are the elements typically included in a class definition?,function member data member,parameter type class name return type code executed class,2.0,3.75,2.875,1.3182126544137271,0.0
11.1,What are the elements typically included in a class definition?,function member data member,data member class variable function,5.0,5.0,5.0,0.5515655957086683,0.6994221572585607
11.1,What are the elements typically included in a class definition?,function member data member,constructor function variable native class,5.0,3.0,4.0,1.0822003092826469,0.061822294296812345
11.1,What are the elements typically included in a class definition?,function member data member,function data member,5.0,5.0,5.0,0.2329771844093989,0.9493290559424401
11.1,What are the elements typically included in a class definition?,function member data member,data member function definition,5.0,5.0,5.0,0.3522643279402165,0.7239914916541497
11.1,What are the elements typically included in a class definition?,function member data member,member function data member,5.0,5.0,5.0,0.0,1.0000000000000002
11.1,What are the elements typically included in a class definition?,function member data member,constructor function definition,3.5,2.5,3.0,1.0128974645851747,0.10017512361278376
11.1,What are the elements typically included in a class definition?,function member data member,class name data class definition function method,5.0,3.75,4.375,0.9541069389297597,0.1456472533609735
11.1,What are the elements typically included in a class definition?,function member data member,class definition includes definition class constructor public private function course also includes class header necessary c library,3.0,2.5,2.75,1.2560938229755945,0.02704629734266932
11.1,What are the elements typically included in a class definition?,function member data member,class name semicoln end defination private bublic followed,2.5,2.5,2.5,1.342579798741288,0.0
11.1,What are the elements typically included in a class definition?,function member data member,constructor private public variable function prototype,5.0,2.5,3.75,1.119786726614417,0.06636143311893726
11.1,What are the elements typically included in a class definition?,function member data member,data variable function data member,5.0,5.0,5.0,0.4985596649360664,0.7525048678597058
11.1,What are the elements typically included in a class definition?,function member data member,class definition include name class type parameter,1.5,3.75,2.625,1.3130798134127173,0.0
11.1,What are the elements typically included in a class definition?,function member data member,class variable class function prototype,5.0,3.75,4.375,1.083328508810632,0.06921316261100627
11.1,What are the elements typically included in a class definition?,function member data member,input return type element,1.5,3.0,2.25,1.3000811930211675,0.0
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private specifier,5.0,5.0,5.0,0.44499622450504894,0.6872276608845124
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private restricted,4.5,4.75,4.625,0.4281023218490603,0.6553230718866743
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,access specifier public private,5.0,5.0,5.0,0.6389894414993664,0.6206971409229953
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private protected,5.0,4.75,4.875,0.4299046783430278,0.7208512378207866
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private,5.0,5.0,5.0,0.0,1.0
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public function variable used outside class private function variable used class,5.0,5.0,5.0,1.0921000660973883,0.40732903411717536
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private,5.0,5.0,5.0,0.0,1.0
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private protected,5.0,4.75,4.875,0.4299046783430278,0.7208512378207866
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private,5.0,5.0,5.0,0.0,1.0
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,private public protected,5.0,4.75,4.875,0.4299046783430278,0.7208512378207866
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,used class definition private public,5.0,5.0,5.0,0.800926757005208,0.6726162060780398
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private,5.0,5.0,5.0,0.0,1.0
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,static long unsigned,0.0,1.25,0.625,1.3467903791372708,0.0
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,private public protected friend,5.0,4.75,4.875,0.6607391346270485,0.5544419695264804
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,class definition may include public private static,4.0,5.0,4.5,0.9485961816400924,0.5294663211244961
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,local global function specific,1.5,2.5,2.0,1.2586068309129717,0.0
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private,5.0,5.0,5.0,0.0,1.0
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public protected private,5.0,4.75,4.875,0.4299046783430278,0.7208512378207866
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,private public,5.0,5.0,5.0,0.0,1.0
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public accessed program private accessed class function outside function call,5.0,5.0,5.0,1.0480217410035706,0.45369983370559525
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private protected,5.0,5.0,5.0,0.4299046783430278,0.7208512378207866
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private,5.0,5.0,5.0,0.0,1.0
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private protected,5.0,4.75,4.875,0.4299046783430278,0.7208512378207866
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,function data member given public private friend public access given function member given specific access right,5.0,4.75,4.875,1.0665557959258574,0.41372643140030896
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,data member data function access specifier,0.0,1.25,0.625,1.3164450770573222,0.0
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private,5.0,5.0,5.0,0.0,1.0
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private,5.0,5.0,5.0,0.0,1.0
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private,5.0,5.0,5.0,0.0,1.0
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public accessed outside class private accessible inside class inherited protected accessible inside class inherited,5.0,4.75,4.875,1.1154980594499508,0.2462578238925068
11.2,What are the access-specifiers that can be used in a C++ class definition?,private public,public private protected,5.0,5.0,5.0,0.4299046783430278,0.7208512378207866
11.3,How are objects initialized when they are created?,using constructor,ie gradebook mygradebook call upon class give name like shown,0.0,2.5,1.25,1.318353342304537,0.0
11.3,How are objects initialized when they are created?,using constructor,initialized named instance template formed class named instance modified different class created,3.0,3.75,3.375,1.277822835460447,0.0
11.3,How are objects initialized when they are created?,using constructor,answered,0.0,0.0,0.0,1.3960477203314146,0.0
11.3,How are objects initialized when they are created?,using constructor,object initialized value given object defined certain task,2.0,2.5,2.25,1.2896395511880536,0.0
11.3,How are objects initialized when they are created?,using constructor,initialized dot constructor object created,0.0,4.5,2.25,1.0111226227113552,0.24116569927949116
11.3,How are objects initialized when they are created?,using constructor,objectname classname call function class,0.0,2.5,1.25,1.3290154032175674,0.0
11.3,How are objects initialized when they are created?,using constructor,object refers class constructor initialize object based return type parameter passed compiler one one provided,5.0,5.0,5.0,1.1722049013331017,0.14948787235819846
11.3,How are objects initialized when they are created?,using constructor,classname objectname input parameter,3.0,2.5,2.75,1.2593179393588194,0.0
11.3,How are objects initialized when they are created?,using constructor,class called constructor,2.0,5.0,3.5,0.8642009875759159,0.43339934606851094
11.3,How are objects initialized when they are created?,using constructor,constructor default provided user programmer specified constructor,5.0,5.0,5.0,0.8815268614989631,0.37996888298455256
11.3,How are objects initialized when they are created?,using constructor,object usually initialized beginning program initialized usually main function initialized class name,1.0,3.75,2.375,1.278608280923576,0.0
11.3,How are objects initialized when they are created?,using constructor,lt variable type gt lt variable name gt want initialize variable certain value lt variable type gt lt variable name gt lt value gt,1.0,3.75,2.375,1.297389677762883,0.0
11.3,How are objects initialized when they are created?,using constructor,variable set given value 0 none given,1.0,1.25,1.125,1.339434411924433,0.0
11.3,How are objects initialized when they are created?,using constructor,object initialized constructor called whether one provided assigns default constructor,5.0,5.0,5.0,1.0113293734801987,0.32982300772110956
11.3,How are objects initialized when they are created?,using constructor,object initialized essentially copy corresponding class complete separate variable,2.0,3.0,2.5,1.2793976004648846,0.0
11.3,How are objects initialized when they are created?,using constructor,class gradebook would initialize main function use constructor gradebook class constructor specified found use default one parameter gradebook mygradebook bit code class gradebook initialized object mygradebook,5.0,5.0,5.0,1.1258616225302458,0.13628387595707087
11.3,How are objects initialized when they are created?,using constructor,object initialized stating classname first assigning name object within object place initialized,3.0,3.75,3.375,1.2730608325746855,0.0
11.3,How are objects initialized when they are created?,using constructor,initialized constructor,5.0,5.0,5.0,0.6062318287216995,0.4516433773868268
11.3,How are objects initialized when they are created?,using constructor,value specified declaration initialized anywhere declaration corresponding,1.0,3.75,2.375,1.302068648316095,0.0
11.3,How are objects initialized when they are created?,using constructor,default constructor object class constructor specified us default system constructor,4.0,5.0,4.5,0.9091959313356971,0.4315873930792532
11.3,How are objects initialized when they are created?,using constructor,initialized using name class,1.0,4.0,2.5,0.9616925440035908,0.332006361864846
11.3,How are objects initialized when they are created?,using constructor,initialized value dependent compiler,1.0,1.25,1.125,1.2364034632222627,0.0
11.3,How are objects initialized when they are created?,using constructor,memory allocated accordance type initialization input,1.0,2.5,1.75,1.2850002287734634,0.0
11.3,How are objects initialized when they are created?,using constructor,object assigned space memory created name given object point memory address object data resides,1.0,1.25,1.125,1.3176713766008616,0.0
11.3,How are objects initialized when they are created?,using constructor,using constructor,5.0,5.0,5.0,0.0,1.0000000000000002
11.3,How are objects initialized when they are created?,using constructor,giving value,2.0,1.25,1.625,1.2525402823657947,0.0
11.3,How are objects initialized when they are created?,using constructor,declaring class first name variable variable need put constructor ex class myclass x,5.0,5.0,5.0,1.1987373565421442,0.15233404817259738
11.3,How are objects initialized when they are created?,using constructor,object initialized giving object type name initial value,1.0,3.75,2.375,1.2718580456983242,0.0
11.3,How are objects initialized when they are created?,using constructor,initialized 0,1.0,1.25,1.125,1.2821661498314898,0.0
11.3,How are objects initialized when they are created?,using constructor,obj initialized variable call created within class classname objectname etc,1.0,3.75,2.375,1.270532981050863,0.0
11.4,What is a function signature?,name function list parameter including type,name function parameter must receive order perform return type,5.0,5.0,5.0,0.7172859958015568,0.382222843574033
11.4,What is a function signature?,name function list parameter including type,function signature element make unique variable call also suppose includes program,3.5,4.0,3.75,1.0733214031440212,0.03981389752813547
11.4,What is a function signature?,name function list parameter including type,function signature return type function name number type parameter,5.0,5.0,5.0,0.54100977250586,0.6067381309468772
11.4,What is a function signature?,name function list parameter including type,function prototype contains function data member,1.0,5.0,3.0,1.029608549818362,0.1378282728567311
11.4,What is a function signature?,name function list parameter including type,function signature declaration function includes parameter type number parameter,5.0,5.0,5.0,0.6434678354087184,0.47250254519550383
11.4,What is a function signature?,name function list parameter including type,declaration function,2.0,3.0,2.5,1.0596680467063913,0.11850997359652234
11.4,What is a function signature?,name function list parameter including type,includes name accepted parameter return type,5.0,5.0,5.0,0.6209157792765626,0.41091388681286645
11.4,What is a function signature?,name function list parameter including type,return type input parameter,5.0,5.0,5.0,0.869397181883593,0.374364543808285
11.4,What is a function signature?,name function list parameter including type,contains function name paramaters return type included,5.0,5.0,5.0,0.58908544842479,0.2971695425370184
11.4,What is a function signature?,name function list parameter including type,return type function name parameter type,5.0,5.0,5.0,0.44192831360843476,0.6839191067730189
11.4,What is a function signature?,name function list parameter including type,function signature tell function parameter includes function call,2.5,5.0,3.75,0.8557258608929454,0.2934737446442597
11.4,What is a function signature?,name function list parameter including type,function name well return accepts,5.0,5.0,5.0,0.8641252391079065,0.1869221475934145
11.4,What is a function signature?,name function list parameter including type,body function hold actual code,1.0,2.5,1.75,1.0657442800709926,0.06106387416495346
11.4,What is a function signature?,name function list parameter including type,function signature return type accepted pas value type take,3.0,4.0,3.5,0.928856833078364,0.23212206150662312
11.4,What is a function signature?,name function list parameter including type,function signature specifies name input variable function,5.0,5.0,5.0,0.8633335430278566,0.23172093814437644
11.4,What is a function signature?,name function list parameter including type,function signature function parameter type name function return type part function signature,5.0,5.0,5.0,0.6392383785459543,0.5042062145233261
11.4,What is a function signature?,name function list parameter including type,name function return,5.0,5.0,5.0,0.8365593619574707,0.37462188399078067
11.4,What is a function signature?,name function list parameter including type,unique identifier function includes input variable along function name excludes output type,5.0,4.0,4.5,0.7795285618799603,0.22092921954912897
11.4,What is a function signature?,name function list parameter including type,order number type data item included inside function parameter,4.5,5.0,4.75,0.7870032572829938,0.3299138932641444
11.4,What is a function signature?,name function list parameter including type,scope type parameter function give property defines function,5.0,5.0,5.0,0.7595095676683625,0.3571533771350629
11.4,What is a function signature?,name function list parameter including type,name fuction return type parameter used,5.0,5.0,5.0,0.6016308188582955,0.40984636596501706
11.4,What is a function signature?,name function list parameter including type,function signature include name function parameter body,2.5,5.0,3.75,0.6546886517438922,0.40689903329606014
11.4,What is a function signature?,name function list parameter including type,name function argument passed function,5.0,5.0,5.0,0.8657025907163355,0.304536816238854
11.4,What is a function signature?,name function list parameter including type,function signature used function prototype set object type take parameter without name given object,5.0,5.0,5.0,0.8057526118146033,0.3612317725342469
11.4,What is a function signature?,name function list parameter including type,function name parameter called function signature,5.0,5.0,5.0,0.6495015817076483,0.5024322784874979
11.4,What is a function signature?,name function list parameter including type,fuction name parameter,5.0,5.0,5.0,0.7883145932270532,0.3618149994282598
11.4,What is a function signature?,name function list parameter including type,parameter needed return type name function,5.0,5.0,5.0,0.43969342686930873,0.5636838921526506
11.4,What is a function signature?,name function list parameter including type,signature function includes name function number type parameter return type,5.0,5.0,5.0,0.5370782727097699,0.5645761712256594
11.4,What is a function signature?,name function list parameter including type,uniquely separate overloaded function includes return type parameter list function,4.5,5.0,4.75,0.6605683447817235,0.3644544969196933
11.4,What is a function signature?,name function list parameter including type,function sig class recognizes main function rather specification,0.0,3.75,1.875,1.0376919040576795,0.07676373543969008
11.5,What is a recursive function?,function call,function call upon self solve problem time call upon self split problem simplier form reach case simplest form problem,5.0,5.0,5.0,1.0831456714236607,0.2570650353004044
11.5,What is a recursive function?,function call,function call perform opperation factorial recursive function,5.0,5.0,5.0,0.6595271884315668,0.3814874973384548
11.5,What is a recursive function?,function call,answered,0.0,0.0,0.0,1.2604922519951351,0.0
11.5,What is a recursive function?,function call,base case call upon problem becomes smaller terminates,2.5,5.0,3.75,1.1474106351861422,0.22350597287581547
11.5,What is a recursive function?,function call,function call run multiple time base case reached,5.0,5.0,5.0,0.9933438616545098,0.3427324565449179
11.5,What is a recursive function?,function call,function call untill reach base case,5.0,5.0,5.0,0.8943351127708428,0.3600743981095814
11.5,What is a recursive function?,function call,function call time must get smaller eventually must converge base case otherwise start infinite loop,5.0,5.0,5.0,1.1375167088353826,0.21321161124163648
11.5,What is a recursive function?,function call,function call base case met,5.0,5.0,5.0,0.8057761926896411,0.4542582588163067
11.5,What is a recursive function?,function call,function call function call problem diminished,5.0,5.0,5.0,0.43814865583780005,0.7039280983645912
11.5,What is a recursive function?,function call,function call perform certain task,5.0,5.0,5.0,0.7591516325876935,0.3981590333389794
11.5,What is a recursive function?,function call,recursive function function call usually called base case base case correct cause infinite loop,5.0,5.0,5.0,1.0035728668663113,0.28852145348059166
11.5,What is a recursive function?,function call,function call order solve problem,5.0,5.0,5.0,0.7708159646202146,0.49426551391854867
11.5,What is a recursive function?,function call,function call find simplest form solution base case,5.0,5.0,5.0,0.9583916269814031,0.3406905289330979
11.5,What is a recursive function?,function call,recursive function function call repeatedly base case achieved fundamental idea break one large problem series smaller similar problem,5.0,5.0,5.0,1.0875641208634619,0.2459610203977679
11.5,What is a recursive function?,function call,recursive function typically simplifies problem calling arriving base case recursively return solution,5.0,5.0,5.0,1.1380960169034056,0.06448763375484858
11.5,What is a recursive function?,function call,recursive function function break large problem two smaller problem call solve smaller problem base case terminating point reached base case definite answer called function longer recurses unwinds back function call determine answer original large problem,5.0,4.0,4.5,1.0584607491798577,0.29599292382989933
11.5,What is a recursive function?,function call,function call loop base case loop exit,2.5,5.0,3.75,0.9463759313325429,0.31492752222572884
11.5,What is a recursive function?,function call,function call base case met,5.0,5.0,5.0,0.8057761926896411,0.4542582588163067
11.5,What is a recursive function?,function call,recursive function know solve base case recursive function call directly indirectly base case reached,5.0,5.0,5.0,1.0160586994721803,0.2595321784096476
11.5,What is a recursive function?,function call,function call us base case stop recursion,5.0,5.0,5.0,0.9132141996863906,0.34057622486416184
11.5,What is a recursive function?,function call,function call eaach call get closer close base case,5.0,5.0,5.0,0.84188523758012,0.4404682392299656
11.5,What is a recursive function?,function call,function divide conquers problem base case eventually reached function call base case satisfied,5.0,5.0,5.0,1.0257228909710294,0.2742276386871659
11.5,What is a recursive function?,function call,function call definition code,5.0,5.0,5.0,0.656617561641748,0.5898890331821481
11.5,What is a recursive function?,function call,recursive function solves problem repeatedly calling initial problem broken successively smaller part much simpler base case reached solution piece problem returned step time,5.0,5.0,5.0,1.2326379446490896,0.04107170919652369
11.5,What is a recursive function?,function call,invoke ana unless reach ba case,4.0,5.0,4.5,1.3121086709700527,0.0
11.5,What is a recursive function?,function call,function solves problem dividing problem smaller problem calling self base case reached,5.0,5.0,5.0,1.1587680631405382,0.05694604165715444
11.5,What is a recursive function?,function call,function call till base case reached return back original function,5.0,5.0,5.0,0.9251228142638566,0.4009338149826527
11.5,What is a recursive function?,function call,recursive function function execution call base case reached,5.0,5.0,5.0,0.813591949312498,0.43633185512526773
11.5,What is a recursive function?,function call,function call usually used split problem several smaller problem type,5.0,5.0,5.0,1.0475874073647329,0.28676674104711364
11.5,What is a recursive function?,function call,function call self till base case met,5.0,5.0,5.0,0.9359825105106861,0.3280040216866836
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,iteration performer series check loop,5.0,5.0,5.0,1.039545568840964,0.3602152948832512
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,alternative method use loop program instead function call,5.0,2.5,3.75,1.3203872321108552,0.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,alternative solving problem using recursive function solve problem using iteration,5.0,5.0,5.0,1.18922339853212,0.2824517530399911
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,iteration would efficient repetition structure,5.0,5.0,5.0,1.0495861929877428,0.45012290195693
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,one use iteration using simple loop,5.0,5.0,5.0,1.0874394769785591,0.4182630587524695
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,iteration,5.0,5.0,5.0,0.0,1.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,iteration loop loop able accomplish desired outcome may faster recursion could also harder understand,5.0,5.0,5.0,1.2324102156446317,0.2072621069424646
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,also solve problem iteratively,5.0,5.0,5.0,1.320132603035411,0.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,iterative,5.0,5.0,5.0,1.0903751928633214,0.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,using iteration loop,5.0,5.0,5.0,0.8486561744657253,0.614937582132229
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,another alternative way solve problem instead using recursive function using iteration,5.0,5.0,5.0,1.20203072148071,0.2920602372967276
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,recursive function often solved using iterative function run faster often complicated,5.0,5.0,5.0,1.303146815087837,0.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,iteration,5.0,5.0,5.0,0.0,1.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,recursive function solved using iterative method,5.0,5.0,5.0,1.2606310987966804,0.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,many recursive solution may also solved looping control statement etc,5.0,3.0,4.0,1.3538124591475291,0.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,using iterative function repeat specified operation set operation terminating point base case reached,5.0,5.0,5.0,1.3313023216778306,0.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,iteratively,5.0,5.0,5.0,1.1456707321280029,0.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,using iterative call,5.0,5.0,5.0,1.2572753352550206,0.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,iteration,5.0,5.0,5.0,0.0,1.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,iteration alternative way solve problem,5.0,5.0,5.0,1.0764703578871178,0.4237404988676386
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,using iterative solution instead,5.0,5.0,5.0,1.249544189401993,0.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,using iterative solution loop,5.0,5.0,5.0,1.2304560858974016,0.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,alternative way solve problem could solved using recursion iteration,5.0,5.0,5.0,1.1745274024132335,0.3126650590207722
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,problem solved recursively could solved iterative function iterative replacement recursive function may difficult program often lead efficient solution problem,5.0,5.0,5.0,1.3152060872988878,0.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,iteration,5.0,5.0,5.0,0.0,1.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,itteration like loop loop loop,5.0,5.0,5.0,1.2888818027962499,0.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,iteration using loop,5.0,5.0,5.0,0.8486561744657253,0.614937582132229
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,iterative function,5.0,5.0,5.0,1.2055116876586667,0.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,iteration,5.0,5.0,5.0,0.0,1.0
11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,iteration,alt way use function parameter call function,2.5,2.5,2.5,1.3220554323393803,0.0
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,array declared static retains modified element called upon latest element modified array declared static keep original element,5.0,4.5,4.75,0.8854342802171336,0.29516194605055357
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,static array specific size grow also static array accessed outside program created,2.0,3.75,2.875,0.8525536928700019,0.3330956912136022
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,array declared static created initialized function called destroyed function terminates,5.0,5.0,5.0,0.6290807097759299,0.3927838524258588
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,static initialized,1.0,4.0,2.5,0.9687275141233458,0.3211118488049854
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,array declared static remains throughout execution program,0.5,4.0,2.25,0.9172139815721129,0.21600547249561874
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,static array called declared complier ignore static line come,3.5,5.0,4.25,0.7016383944980752,0.3837048117471464
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,static array available whole program whereas array static available within scope declared,3.5,3.75,3.625,0.8500574453159245,0.2786601948472425
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,static array predetermined size size altered,2.0,3.75,2.875,0.8734990893233116,0.20354747811935495
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,array declared static changed one declared static altered,0.5,3.75,2.125,0.7817381351563502,0.3079276049897842
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,array declared static retain value stored element function call reinitialize default value,5.0,4.0,4.5,0.9025755136524863,0.20615013255327108
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,array declared static cause anything initialized set 0,1.0,3.75,2.375,0.9426479606128937,0.21844595983481357
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,static array null character end array,2.5,2.5,2.5,0.7786987116704028,0.3709693713780796
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,static array changed normal array changed,0.5,3.75,2.125,0.7502583678929484,0.22651946208096574
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,array declared static accessed outside method declared without passing argument function class,3.0,3.0,3.0,0.949368792292792,0.21066273910130176
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,static array class scope allowing remain array might recycled,5.0,3.25,4.125,0.8764701115720838,0.20723984608715806
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,array static change uninitialize called later unless explicitly acted upon terminate change across object automatic local array cleared uninitialized called later outside specific scope,5.0,4.5,4.75,1.0049650702410116,0.21516015922091195
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,one declared static one already defined program know length array start whereas array declared assigned later,2.0,3.75,2.875,1.0394141562297599,0.17567407263500381
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,non static array must reinitialize every function call static array initialize unless otherwise forced,5.0,5.0,5.0,0.7702613538979123,0.2951448976660869
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,static array retains modified value function call automatic array reset initial value function end,5.0,3.75,4.375,0.8207167840870319,0.24462097911977476
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,static array one keep value initialized every time class function called data lost function end,5.0,4.0,4.5,0.8804050894754145,0.3709376586765881
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,array declared static used function called constant array static another way say const,0.5,4.0,2.25,0.6662135756012606,0.44776766206284047
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,value array delcared static remain constant array declared const value within array manipulated,0.5,3.75,2.125,0.8757698406218527,0.21254160782945697
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,data static array changed,0.5,3.75,2.125,0.6643038682848141,0.3331521610824132
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,standard array terminate function call finish static array removed memory parent function terminates leaving available function new instance original function,5.0,2.5,3.75,0.8375232428144405,0.256590432340916
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,defining static array doese lose scope locala function static array make programm scalable non static array lose scope inside local function,4.0,4.5,4.25,0.7613276725118754,0.3081566753889459
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,static array called anywhere,3.0,1.25,2.125,0.3441229411116602,0.5517396567821166
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,static array changed regular array changed passed function manually,0.5,3.75,2.125,0.7121460318716734,0.2292777634944284
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,static array edited throughout program array edited within given function,3.0,3.75,3.375,0.7847122250590282,0.210865080242333
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,array declared static allocated program begin run freed program exit limited scope array allocated freed every time come scope,5.0,3.75,4.375,1.0911717368129938,0.12801227463465834
11.7,What is the difference between an array that is declared as static and one that is not?,static array intialized function called,static predetermined size passed vi versa,2.0,3.75,2.875,1.0826108429576102,0.1361100709448449
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,type char null element end,5.0,5.0,5.0,0.7170793563101467,0.5590705973421405
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,variable char basically non command key keyboard press string collection letter number stored together used later comonly string used word char used le opperations performed useful way,0.0,3.75,1.875,1.0731649790604418,0.20331660683061836
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,programmer must provide null terminating character string character using type char must also ensure array large enough contain input string character null terminating character,5.0,5.0,5.0,0.7945420975844916,0.4332941713781552
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,string character followed null statement type string example string,5.0,5.0,5.0,0.8427649805800935,0.4267785479029427
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,string contains word char contain phrase string character,0.0,3.75,1.875,0.7794732725782838,0.39414334568184073
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,string variable single entinty letter combined one char letter assigned memory value variable assigned char 0 char 1,0.0,4.0,2.0,1.0183788435310834,0.27213134939032263
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,string contains null character end string make easily possible get string length char array virtually unlimited length therefore size must,5.0,2.5,3.75,0.8107187713706918,0.4120360694319354
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,array character store null character end,5.0,5.0,5.0,0.7323552172222674,0.5204995633252102
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,read string character also read white space read character declared char read character white space,1.5,4.0,2.75,0.9427182114766999,0.2291684042012339
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,character array terminate whitespace including space string terminate encounter new line character,1.5,5.0,3.25,0.9536898449824358,0.18852827350171852
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,difference string declared variable type char char included array versus string character read variable,0.0,3.75,1.875,0.8057200718953894,0.40252298751326543
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,array string read string literal meaning anything within quote char array read string individual character,0.0,3.75,1.875,0.9292566499451045,0.2989146820011094
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,character array call individual letter string array call word,0.0,3.75,1.875,1.0091754228946168,0.18856709208219546
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,character array end line character end,4.5,5.0,4.75,0.9222181657700523,0.40470359379770193
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,type char may contain null value last element whereas type string,5.0,5.0,5.0,0.8917049191914728,0.3365791419588636
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,variable type string terminating character end,2.5,5.0,3.75,0.714781867581399,0.3709721853410076
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,one type string extra string member end,2.5,5.0,3.75,0.9206713047080503,0.3171701251840462
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,string variable size function call available character array usually static size,2.5,4.0,3.25,1.0345010955328322,0.1884865751338966
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,string char add null value end string,5.0,5.0,5.0,0.3771904850124629,0.7355595743547967
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,char array need end character signature made character separate string object value user enters,5.0,5.0,5.0,0.8039435364589362,0.38991297896647936
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,variable type char character stored different memory address accessed easly string character easy able access character string,0.0,4.0,2.0,0.8695254562721175,0.4014293025272486
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,string passed array char individual character stored manipulated although word stored string variable stored one word individual character,0.0,4.0,2.0,0.9040212333883298,0.2730839267949282
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,string variable change size passed function value whereas type char change size passed function reference,0.0,3.75,1.875,1.1027107785136694,0.16228067192398837
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,string type string act single object individual char entity accessible specific string class function char array le robust allows direct access specific char entity,1.5,3.75,2.625,0.9455019804045267,0.3128255353994881
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,array string stored character char character string stored memory location array string character one memory location,0.0,3.75,1.875,0.8476883574518256,0.4471260837481584
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,array character one element last element terminating element null doesnt exist variable type string,5.0,5.0,5.0,0.9490097376644262,0.24828933327605823
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,string character specific variable type extra data end string type char character null,5.0,5.0,5.0,0.5980531665485967,0.591829755449429
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,string character null character value end string,5.0,5.0,5.0,0.565541710112337,0.630170232647315
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,character put char array also null terminating character added end,5.0,5.0,5.0,0.6595668018143255,0.4978134044091968
11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,char automatically add null character end string,string character read variable type string includes,0.0,3.0,1.5,0.9067282003045091,0.32366124145550706
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,example array n element divide conquer split array equal half repeat process element,3.0,4.5,3.75,1.1447881291211894,0.0712037026833457
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,divide coquer mean dividing problem problem solved merged back together final solution whole problem,5.0,5.0,5.0,0.7387296929838824,0.41026888965459796
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,divide conquer paradigm divide problem smaller smaller portion easier solve,4.0,4.5,4.25,0.7456280174873312,0.4316061562715689
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,divide element recur conquer work merge sort quicksort,3.0,4.5,3.75,1.0890874640797723,0.07629586757077735
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,divide conquer divide program half multiple time extent program whole easier work group solve problem,4.0,4.5,4.25,0.9525544326958345,0.26143185252056717
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,divide one larger value sepereate smallers line easily manipulate replace order,2.0,5.0,3.5,1.0655859967400516,0.06448558769118636
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,split problem smaller manageable part proceed address smaller problem,4.0,4.5,4.25,0.8246152096450602,0.34655009811142357
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,dived conquer breaking large complex program small easy solve component,4.0,4.5,4.25,1.1001415219200121,0.0692376096501414
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,dividing larger problem smallest incident problem solving smallest incident,4.0,4.5,4.25,0.8684927429652003,0.18010853468349228
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,break large data structure smaller easier manipulate,4.0,4.5,4.25,1.1299614651645202,0.08033484043550172
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,technique take sorting algorithm break array smaller element array tackle problem run algorithm,4.0,4.25,4.125,1.0368651568871947,0.16074007608882862
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,paradigm divide problem two piece work piece separately allowing faster approach 2 separate smaller problem,4.0,4.5,4.25,0.9073462750909094,0.26900929415457664
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,take problem divide smaller problem solve smaller problem divide smaller problem solve thus solving whole problem process,4.5,4.5,4.5,0.5936145965161893,0.5952375200232809
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,idea split problem half solve smaller,4.0,4.5,4.25,0.7558989489767886,0.37057934227056333
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,divide conquer paradigm split large problem simpler problem point solves simpler problem merges simple solution together answer large problem,5.0,5.0,5.0,0.754358499621103,0.3924108215635437
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,refers abstraction act separating large complex problem smaller easier problem solved relatively simple algorithm,4.0,4.5,4.25,0.9157534589001264,0.2296628509437847
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,take large problem split two easier faster solution make better readability,4.0,4.5,4.25,0.9665925944645121,0.24521641003100825
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,taking larger problem splitting simpler smaller problem,4.0,4.5,4.25,0.8657691333211591,0.33448403178782776
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,divide problem singular unit work problem piece piece problem solved,4.0,4.5,4.25,0.8251404910274295,0.32622617910643165
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,smaller part easier compare comparing whole divide problem half easily compare work backwards putting back together give solution,5.0,5.0,5.0,0.9731553517853284,0.2743761962631318
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,paradigm take data divide two part work part indiviually item found,4.0,4.5,4.25,1.112420691294736,0.06351290876807482
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,idea divide conquer take large problem split n smaller problem making program easier read modify,4.0,4.5,4.25,0.8915458781217536,0.32575285550933614
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,divide conquer paradigm recursive solution keep dividing problem half base case reached,4.0,4.5,4.25,0.8946235671213496,0.31037274475495424
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,dividing conquering mean breaking problem two smaller problem solving putting two solution together,5.0,5.0,5.0,0.8154208896993784,0.34601844595669484
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,divide big problem small problem solve small problem join small solved element problem two ore element array divide array part compare element comperison conquer element array n element first half element,5.0,5.0,5.0,0.9028200482033151,0.3192328250387865
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,divide array half sort half sort back one array,3.0,3.0,3.0,1.1483005660938013,0.07929330029712618
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,take class break everything supposed easily managed function,1.0,4.5,2.75,1.2687239537512094,0.0
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,shown use header file splitting program smaller subsection individual code becomes easier write keep opposed code one file,1.0,4.5,2.75,1.1804824968627403,0.042129610188474734
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,problem big split smaller problem type solve solution smaller problem give solution larger original problem,5.0,4.5,4.75,0.5159064237234614,0.6888293260440328
11.9,Briefly describe the divide-and-conquer paradigm.,divide problem smaller subproblems solve recursively combine solution solution original problem,separating large program smaller class target reached,1.5,5.0,3.25,1.156161991102408,0.07141121117764526
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,us divide conqure technique recursively merging back together compare element together sorted list done reversing divide conquer technique,5.0,5.0,5.0,1.1287543277303327,0.03615267975544141
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,merge sort work removing item sepperate memory location merging back together order,2.0,5.0,3.5,1.1151793601059365,0.0675133412282621
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,divide array two half sort half merges two half together,5.0,5.0,5.0,0.4890753520183969,0.6642842649772356
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,divide two sublists sublists break length 1 merges sublists sorted,5.0,5.0,5.0,0.800628987824446,0.1848940878590667
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,merge sort us divide conquer idea divide array half multiple time join element array back one sorted array one best sorting algorithm besides quicksort,5.0,5.0,5.0,0.8283585652620324,0.24217117200717814
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,divide line half coninuously get single value recombine value form sorted line,5.0,5.0,5.0,0.9875362776781523,0.12128363226908749
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,continually split array half sort side half put back together organized,5.0,5.0,5.0,0.7789545975097261,0.37668305981657957
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,merge sort split array element smaller array array reach size 1 merge sort merges smaller array array size 2 move next step merges next array,5.0,5.0,5.0,0.7236093087489783,0.43518181059566324
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,divide conquer,1.5,5.0,3.25,1.287785894634919,0.0
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,break single array many array individual element sort element reconstruct back single array,5.0,5.0,5.0,0.8788370450498255,0.18486356563019954
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,merge sort break array half continues 2 element compare sort merges back keep sorting algorithm,5.0,5.0,5.0,0.8377657886386958,0.34477910342854845
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,merge sort divide problem half organizes half brings two half together,5.0,5.0,5.0,0.8410782991088889,0.37697943839514514
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,take array split two solve simpler problem merge two answer correct order,5.0,5.0,5.0,0.8093768123516738,0.36801384827882233
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,merge sort recursively divide array half one element remains sort data way recursive call merging cell,5.0,5.0,5.0,0.9192442093474961,0.23970552682816337
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,merge sort recursively divide array two array array 1 element point merges 1 element array larger sorted array final returned array sorted version initial array,5.0,5.0,5.0,0.6990068302992715,0.47678200846492064
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,merge sort continuously break array half sort array concatenates back together one sorted array,5.0,5.0,5.0,0.6263103201858096,0.3746346179034961
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,take array split half sort two half either recursion iteration compare together giving third array full sorted list half rejoined,5.0,5.0,5.0,0.7368805059181598,0.4810140206170031
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,split large array small array recurs array size 1 merges array back together source array completely sourted,5.0,5.0,5.0,0.8492689381061187,0.3315835946974344
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,mergesort divide array smaller half combine sorted subarrays one sorted array,5.0,5.0,5.0,0.6421354970752242,0.30675757889516103
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,merge sort break array half comparing two value sort two value merges back broken part sorted level merging set together till return back whole array order,5.0,5.0,5.0,0.796276993855017,0.45857985670584994
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,divide data twor separate array sort two array merges back back together recursively,5.0,5.0,5.0,0.686848209602584,0.36784687181985265
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,take initial array split two temporary smaller array sort two smaller array merge back single array,5.0,5.0,5.0,0.656760956739597,0.4767961380046788
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,merge sort divide data half data one element reached merges element together according placement comparison rest data,5.0,5.0,5.0,0.9925635173422637,0.21422948041973613
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,merge sort us divide conquer strategy sorting array part merging sorted part back together,5.0,5.0,5.0,0.9294191977523711,0.1432148940395579
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,divide recursuivly big array two array sort two array merge togather recuruivly,5.0,5.0,5.0,0.576390372371719,0.3900174934314504
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,divide array half sort half calling self thus dividing half sorting array sorted putting element back original array sorted,5.0,5.0,5.0,0.6482776818658962,0.4756237033422228
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,merge sort take array split half sends half back recursively merges sort two half start going back,5.0,5.0,5.0,0.6925696360227755,0.5436246264848013
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,merge sort split array two half sort two smaller array merges back together form sorted array,5.0,5.0,5.0,0.39997327170604396,0.7629335640511985
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,merge sort continually divide array set container half reach point one element left merges set two sorted array container,5.0,5.0,5.0,0.7438584363015577,0.39274803448518497
11.11,Briefly describe in one sentence how does merge sort work?,split original array two sort two half merges sorted array,merge sort split array element smaller smaller array till value 1 reached,2.5,5.0,3.75,0.8018242734852911,0.2822958338861174
12.1,What is a pointer?,address location memory,variable memory hold address another memory location point,5.0,5.0,5.0,0.6711503469611451,0.6587637254612938
12.1,What is a pointer?,address location memory,pointer variable contains memory address given value,4.5,5.0,4.75,0.9489808820560195,0.3789058676953525
12.1,What is a pointer?,address location memory,pointer variable store address another variable,5.0,5.0,5.0,1.0798431276359841,0.21459715202588042
12.1,What is a pointer?,address location memory,pointer variable hold memory address location another variable,5.0,5.0,5.0,0.8333828389516305,0.5263462642952542
12.1,What is a pointer?,address location memory,data type point address memory contains certain information used save memory,5.0,5.0,5.0,0.9367614082619555,0.3492616508675295
12.1,What is a pointer?,address location memory,pointer point location memory certain data type,4.5,5.0,4.75,0.9361980541131452,0.40593258232961427
12.1,What is a pointer?,address location memory,pointer variable point address location another variable represented,5.0,5.0,5.0,0.9999966856542776,0.35414131356329226
12.1,What is a pointer?,address location memory,pointer variable hold address given variable given data type,5.0,5.0,5.0,1.168135721034612,0.15164029545326202
12.1,What is a pointer?,address location memory,pointer programming data type whose value point another value stored computer memory address,5.0,5.0,5.0,1.0941338718967977,0.23989881191004025
12.1,What is a pointer?,address location memory,data type point specific memory address,5.0,5.0,5.0,0.8330332112768317,0.4075569391039069
12.1,What is a pointer?,address location memory,like variable except hold address memory variable physical information,5.0,5.0,5.0,1.0192609676019888,0.26244564831191197
12.1,What is a pointer?,address location memory,pointer reference memory location,5.0,5.0,5.0,0.6507521911496357,0.5618931475052986
12.1,What is a pointer?,address location memory,pointer alias object memory,3.5,4.25,3.875,0.9771171131942253,0.20107611827730254
12.1,What is a pointer?,address location memory,pointer variable contains memory address something use value array even function,5.0,5.0,5.0,1.0685410903412336,0.27051808071455247
12.1,What is a pointer?,address location memory,data type memory address value,1.5,5.0,3.25,0.7726981330200636,0.5010337341758181
12.1,What is a pointer?,address location memory,form storing data keep location memory data type object,5.0,5.0,5.0,1.0056499510485732,0.3162231201557508
12.1,What is a pointer?,address location memory,contains object memory address,5.0,5.0,5.0,0.64894851311187,0.4927217658478027
12.1,What is a pointer?,address location memory,variable contains memory address data object,5.0,5.0,5.0,0.8588390805833759,0.4288459195495502
12.1,What is a pointer?,address location memory,pointer element reference memory location,5.0,5.0,5.0,0.7789544217499995,0.5307000102662496
12.1,What is a pointer?,address location memory,object point specific place memory variable value stored,5.0,5.0,5.0,1.1114983327788408,0.14298051607278006
12.1,What is a pointer?,address location memory,variable store address memory location,5.0,5.0,5.0,0.5138355610163863,0.7925018819837797
12.1,What is a pointer?,address location memory,pointer variable point address memory contains data pointer contain point data memory address,5.0,5.0,5.0,0.9039332722752954,0.44569216004041484
12.1,What is a pointer?,address location memory,pointer variable memory address variable,5.0,5.0,5.0,0.793658042875452,0.42865466897982457
12.1,What is a pointer?,address location memory,pointer point location memory data stored,5.0,5.0,5.0,0.8642787710881925,0.4625485674950848
12.1,What is a pointer?,address location memory,variable hold address another variable access content variable,5.0,5.0,5.0,1.1525807584680074,0.1440317141483663
12.1,What is a pointer?,address location memory,pointer memory address point data member,5.0,5.0,5.0,0.8797512019551104,0.44646211799365965
12.1,What is a pointer?,address location memory,data type store memory address another variable,5.0,5.0,5.0,0.907708554881149,0.40792610862355727
12.1,What is a pointer?,address location memory,like variable hold address meomrry physical address,1.0,5.0,3.0,0.8725305596961469,0.29638483763242185
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,try several set data algorithm includes worst case best case random case also try run program different computer spec,5.0,3.75,4.375,1.1855297267303553,0.07080666190247933
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,answered,0.0,0.0,0.0,1.3807832834136293,0.0
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,time complexity using big logarthmic log n linear n exponential quadratic k gt polynomial n gt 1,1.5,3.0,2.25,1.2121745097058685,0.04398864740549539
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,using sort counting principle number operation performed algorithm,5.0,3.75,4.375,1.097393116616395,0.14234215053848434
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,experimental mean would actually write prototype algorithm measure time take run given certain parameter,5.0,5.0,5.0,0.9463677856712912,0.274478571653915
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,measuring relationship running algorithm different input size,5.0,3.75,4.375,0.8789914329053616,0.27505924147765815
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,oposite theoretical assessment algorithm determine runtime run code first determine runtime recommended limited test include possibility data hardware used process data,5.0,4.25,4.625,1.159196680659528,0.0638442013446254
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,answered,0.0,0.0,0.0,1.3807832834136293,0.0
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,experimental approach measuring running time using big equation tell running time,1.5,3.75,2.625,0.8164825277821184,0.3114315362866482
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,create run algorithm multiple time measuring amount time take average result,5.0,5.0,5.0,0.8664202321453707,0.22007256351129717
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,keep value many operation take add value time function called,3.0,3.75,3.375,1.1467007039144141,0.0808302751770516
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,,1.5,3.0,2.25,inf,0.0
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,running program various input data measuring running time system time,5.0,5.0,5.0,0.7963920328949765,0.3472388956793169
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,run program different data size like increase x measure completion speed program find pattern attempt measure running time important keep software hardware however make experimental testing inferior theoretical eye,5.0,3.0,4.0,1.0548728313046092,0.24474958916608136
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,run program see many time thing called runtime function based,5.0,3.5,4.25,1.09892070679525,0.06881147107000803
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,number time specific segment get called per unit work,3.0,3.0,3.0,1.1428261528760613,0.06581761208652062
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,every call memory multiply equation type n,1.5,3.0,2.25,1.2622365763802181,0.0
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,adding time marker algorithm called another time marker immediately change time calculate efficiency speed computer cpu,3.0,4.25,3.625,0.9639211813424566,0.1875115481433232
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,big h notation,1.5,3.0,2.25,1.3230433683262417,0.0
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,experimental approach measure actual running time second,5.0,5.0,5.0,0.715459507549346,0.39605450818263555
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,running algorithm specific set data,5.0,3.0,4.0,0.8460450057650368,0.40242025994475006
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,experimental term running time algorithm measured number operation required complete function number usually expressed notation,2.5,3.75,3.125,0.9987414003944491,0.23475967072912912
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,run code get average value drop constant lowest number example f x 3n running time bef f x n,2.5,4.5,3.5,1.131166987366234,0.14831873310613708
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,measure actual time program run calculate running time using input operation done,5.0,5.0,5.0,0.7954641785763756,0.37834886666403145
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,adding number operation performed based worst case possible,2.0,3.0,2.5,1.30385408790437,0.0
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,experimental approach would run algorithm see long take,5.0,5.0,5.0,1.0513209947302191,0.12435033665307207
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,trying different set input measuring amount time algorithm actually take,5.0,5.0,5.0,0.9699833827287596,0.17496109685081374
12.2,What is the experimental approach for measuring the running time of an algorithm?,implement algorithm measure physical running time,running input various input measuring running time system time,5.0,3.75,4.375,0.8031287062039523,0.3186960422293909
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,scan list selects smallest largest element place front increment curptr one scan list next smallest largest element place respect sorted element,5.0,5.0,5.0,1.042021127012821,0.1990310649005395
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selection sort search array lowest value swap first value array search next lowest value swap second item array,5.0,5.0,5.0,0.9262998073583358,0.13035978298619613
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,compare largest element front element swap data according value needed,4.0,3.75,3.875,1.2701359368482512,0.0
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selection sort sorting algorithm divide list half two list compare first element list put element another list smaller element bigger one,1.0,3.0,2.0,1.1665286533673047,0.02096762243940344
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,iterate list assume list integer find smallest one put separate sorted list traverse find next smallest move sorted section repeat run element sort,5.0,4.5,4.75,1.233464703221244,0.0
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selection sort selects smallest element list second smallest sort acordingly,5.0,5.0,5.0,0.9854888251807935,0.19752430229311208
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,select smallest element place left select smallest element sort respect item already left continue till end collection item,5.0,5.0,5.0,1.1381796875868226,0.0675401958562047
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selection sort scroll data structure looking lowest highest unsorted piece data move held spot increment spot one start process,5.0,5.0,5.0,1.2006182873681772,0.0
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selection sort work finding smallest element compare largest sort element,0.0,3.75,1.875,1.241123772946974,0.0
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selection sort usually recursive sorting method divide element sorted half repeatedly sort smallest case work way sorting sorted,1.0,4.0,2.5,1.2444025124647857,0.0
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,go middle list check see greater le value given move list accordingly add value proper place,0.0,3.75,1.875,1.1688344105693644,0.07967409168388218
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selection sort find lowest element data set place behind pivot point,5.0,3.75,4.375,1.1146403064487418,0.10397157833793956
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selection sort iterates array one element time seeking least value right replacing current value,5.0,3.75,4.375,1.1173344079826273,0.030091173389878316
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selection sort traverse unsorted array looking smallest value found put beginning unsorted array performed several time output sorted array,5.0,5.0,5.0,1.0662445007220172,0.07195894762922991
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,run list find smallest largest value put appropriate position,5.0,3.75,4.375,1.1021164800272358,0.1251993235638831
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,pick number set value le number left number right number larger,1.0,5.0,3.0,1.2455102664205613,0.0
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,take largest item unsorted array swap last item unsorted array,5.0,3.75,4.375,1.0824683089323996,0.0629957153963859
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selecting first object comparing next object find one smaller switch two come back way see object previous last one greater switch decreasing range look finish middle,1.0,3.75,2.375,1.150099891691494,0.01498371230322846
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selection sort work going certain list go unsorted list selecting largest item list placing sorted array two array unsorted sorted complete step list sorted,5.0,3.75,4.375,1.113517422453574,0.039206185619257546
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selection sort work pulling value side leaving one value list insert value list value bigger go right smaller go left,1.0,3.75,2.375,1.229915257827875,0.0
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selection sort search smallest element remaining data organization place largest point new data organization,5.0,3.75,4.375,1.1466638701576446,0.07781435668919078
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selection sort sort array one element time first find element smallest key put first location within array list find next smallest put second location,5.0,5.0,5.0,0.965321020048062,0.12406346961724898
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,select element compare 2nd element greater swap,1.0,4.5,2.75,1.1765321247270712,0.0
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selects smallest element list switch element correct position selects next smallest,5.0,4.25,4.625,0.9499102314231382,0.347557626449796
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,start first element replaces smallest element found right repeat next element list,5.0,4.25,4.625,1.1512459113990645,0.028213196382958817
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selection sort pick data member put new array pick another data member put order new array pick another insert correct place new array etc etc,1.0,5.0,3.0,1.0282361711219352,0.09547104758369704
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,search entire data set best element go current position move position search remainder set best element new position,5.0,3.0,4.0,1.048534964371665,0.20659885982410553
12.4,"Briefly, how does selection sort work?",selects minimum array place first position selects minimum rest array place second position forth,selection sort iterates array one element time searching right replacing current value,5.0,3.0,4.0,1.1103609388529867,0.03382351184719734
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,link list grow infinite size array fix size,5.0,5.0,5.0,1.0812942046889993,0.046240327654869226
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,advantage linked list limited size like array,5.0,5.0,5.0,0.9672616264595398,0.1393132391755743
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,link list dont fixed size,5.0,5.0,5.0,1.0727992121167735,0.0604069602879772
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,linked list variable size array fixed size,5.0,5.0,5.0,0.8341725722958528,0.23294971923588764
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,linked list definite size big small needed allocate extra memory element need array size must defined,5.0,5.0,5.0,0.997422892184332,0.11176057366855166
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,linked list dynamic size array fixed size take allot extra operation increase size,5.0,5.0,5.0,0.9379989040385084,0.20925147081695006
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,predetermine list size array linked list ability large want adding memory needed,5.0,5.0,5.0,0.9772217975275747,0.13921357633239226
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,main advantage linked list size adjusted runtime,5.0,5.0,5.0,0.9631794927742312,0.11856960588583043
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,linked list able grow size element added list,5.0,5.0,5.0,0.8102684323857695,0.23507684592848896
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,linked list confined specific size element added removed far easier also easier traverse,4.5,5.0,4.75,0.9355276049315283,0.1151761575681951
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,predetermined length,5.0,5.0,5.0,1.3113667597442253,0.0
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,insert linked list far cheaper insert array array item one inserted must shifted linked list pointer replaced,4.0,5.0,4.5,0.9518990740855501,0.14810941764928642
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,linked list may dynamically grown,5.0,5.0,5.0,0.9368728430958108,0.14821236034581312
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,linked list dynamic change easily linear memory array size cast certain amount disk space make insertion array difficult element must shifted reach end array done even data input linked list run problem,5.0,5.0,5.0,0.9913256294100614,0.2129137061333083
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,linked list indefinite size whereas array specific size,5.0,5.0,5.0,0.9731636352222499,0.12135384256288151
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,linked list predefined length thus virtually unlimited item list,5.0,5.0,5.0,0.945463785132581,0.14641837960944803
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,grow dynamically unlike fixed size array,5.0,5.0,5.0,1.1948385431703756,0.0
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,add many node like without specify list size array get big copy entire content another larger array get room,5.0,5.0,5.0,1.1676225058245409,0.02967968568465687
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,linkded list fixed size array fixed size,5.0,5.0,5.0,1.09886379908949,0.04299515205001983
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,linked list dynamic size array static size,5.0,5.0,5.0,0.8165108855632859,0.3620463355687552
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,linked list memory constraint total memory,5.0,5.0,5.0,0.9714024559071793,0.13052304306821721
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,primary advantage linked list array ability become larger smaller data added removed list whereas array may waste memory small data set run space large data set,5.0,5.0,5.0,1.0989753161927425,0.08760759851421376
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,array fixed size link list flexible adding deleting element,5.0,5.0,5.0,0.8848731957976466,0.08350364598289939
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,resizeable,5.0,5.0,5.0,1.2883568131240712,0.0
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,linked list dynamically allocated size change needed,5.0,5.0,5.0,0.916465944070862,0.13697477450218887
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,linked list specified size easier add remove,5.0,5.0,5.0,0.9385049037434406,0.1467216318580653
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,dont fixed size shiftnig need done,5.0,5.0,5.0,1.2471821737013147,0.0
12.5,What is the advantage of linked lists over arrays?,linked list dynamic structure allow variable number element stored,linked list many dynamically grown limit,5.0,5.0,5.0,0.9300945884266264,0.1283801605715191
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,data structure first element queue first element taken queue,5.0,5.0,5.0,0.5688028783998949,0.525192884132426
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,queue abstract data type performs operation end list exhibit behavior,5.0,5.0,5.0,0.9308754319594472,0.16309007496079148
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,first first,4.0,5.0,4.5,1.1011132132085364,0.4329927261427868
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,queue abstract data type involves putting element back list queue use fifo first first idea first element list first come,5.0,5.0,5.0,0.7428289198110211,0.3757711203783385
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,data structure implement first first element longest first get served,5.0,5.0,5.0,0.6957405554465936,0.3785372303502413
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,data structure insert element end remove element front,5.0,5.0,5.0,0.9177482013579659,0.2159606185158969
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,queue collection element characteristic first first fifo first item first item additional item added end list,5.0,5.0,5.0,0.8653483902885132,0.3103950144136086
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,queue data structure insert data fifo configuration data input structure always end data taken always beginning,5.0,5.0,5.0,0.949616149128099,0.22239922969114845
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,particular set entity put certain order enqueue dequeue function,1.5,5.0,3.25,1.2534164689922236,0.16020913471899836
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,queue data type operates filo first last method mean first element inserted queue first element removed,5.0,2.5,3.75,0.7059885488762032,0.36764365332240945
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,like linked list except first last,0.0,5.0,2.5,1.0620566372709541,0.14341939027608147
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,queue like stack except follows fifo first first,5.0,5.0,5.0,0.9166880913826778,0.2761945638198149
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,queue data structure first node first node,5.0,5.0,5.0,0.6921276294704526,0.49007551988385284
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,queue first first data structure much like line movie theatre first object line first object handled enacted upon,5.0,5.0,5.0,0.8148759393974166,0.2990264954616418
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,lot like stack except first item put list first item taken list,5.0,5.0,5.0,1.0622694935411505,0.1562960902507689
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,first first list item like put 5 4 3 2 1 queue dequeue item remove item order put thus put 5 4 3 2 1 exact order,5.0,5.0,5.0,1.1374319404864701,0.19495711853570202
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,linked list first structure dequeue head list enqueue end list,5.0,5.0,5.0,1.0151049756342374,0.35877055140770864
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,list object follow rule first first essentially linked list go order first object list first taken,5.0,5.0,5.0,1.0120315133981312,0.2389924434074825
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,queue abstract data type based priniple first first fifo first item inserted list first item taken,5.0,5.0,5.0,0.8423614631402055,0.322069663193611
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,first first data structure implemented either linked list array,5.0,5.0,5.0,0.8081716588827744,0.3358515300047797
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,ordered list performs task order first first adding item queue place item behind rest taking item queue take one waited longest,5.0,5.0,5.0,1.0135525872998272,0.19331280280312763
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,queue linear data structure data must accessed order put queue oldest item queue accessible time main function defined enqueue dequeue,5.0,5.0,5.0,0.8827801161027291,0.38480323701214525
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,queue buffer follows rule first first queue useful computer science scheduleing,5.0,5.0,5.0,0.878086911207369,0.23403193962884605
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,queue set element first element inserted first element removed,5.0,5.0,5.0,0.8054434575461088,0.37982767303910037
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,list item user access first element new element added end,5.0,5.0,5.0,0.9965296690479505,0.17431267037806256
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,queue list data follows fifo principle example would get line movie theater first one get buy ticket first,5.0,5.0,5.0,0.8787628058880113,0.24622462614486432
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,queue data structure hold set object fifo first first priority,5.0,5.0,5.0,0.6919464802816196,0.3523036402513754
12.6,What is a queue?,data structure store element following first first principle main operation queue enqueue dequeue,like linked list expect first last,0.0,2.5,1.25,1.0678338730627983,0.12222674369476152
12.7,What are the main operations associated with a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
12.7,What are the main operations associated with a stack?,push pop,pop remove head least recently inserted node stack push insert new node head stack,5.0,5.0,5.0,1.1226933534339967,0.26248459107683464
12.7,What are the main operations associated with a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
12.7,What are the main operations associated with a stack?,push pop,push function pop function,5.0,5.0,5.0,0.6852410080537996,0.7362831327475903
12.7,What are the main operations associated with a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
12.7,What are the main operations associated with a stack?,push pop,push put element stack take element stack,5.0,5.0,5.0,1.0814623888221635,0.20002670802442576
12.7,What are the main operations associated with a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
12.7,What are the main operations associated with a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
12.7,What are the main operations associated with a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
12.7,What are the main operations associated with a stack?,push pop,push pop push add element stack pop remove top element stack,5.0,5.0,5.0,0.8187191071429408,0.6471482030600028
12.7,What are the main operations associated with a stack?,push pop,pop push,5.0,5.0,5.0,0.0,1.0000000000000002
12.7,What are the main operations associated with a stack?,push pop,push pop search isempty,4.0,5.0,4.5,0.4338137795718312,0.5015739313922946
12.7,What are the main operations associated with a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
12.7,What are the main operations associated with a stack?,push pop,push pop isempty isfull maybe list show element operation count many element stack,4.5,5.0,4.75,1.0703199010817834,0.2627347647480395
12.7,What are the main operations associated with a stack?,push pop,pop push,5.0,5.0,5.0,0.0,1.0000000000000002
12.7,What are the main operations associated with a stack?,push pop,isempty push pop along usually,5.0,5.0,5.0,0.6617684128156536,0.42057701041232676
12.7,What are the main operations associated with a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
12.7,What are the main operations associated with a stack?,push pop,push pop push put object stack pop take following first last rule,5.0,5.0,5.0,0.85214166329405,0.5994428558539151
12.7,What are the main operations associated with a stack?,push pop,main operation stack push pop push add item top stack pop remove top item stack,5.0,5.0,5.0,0.9531325731429467,0.48226280813521727
12.7,What are the main operations associated with a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
12.7,What are the main operations associated with a stack?,push pop,push add item top stack pop take first item top stack,5.0,5.0,5.0,1.0544939803144424,0.3075176149166713
12.7,What are the main operations associated with a stack?,push pop,main function defined stack push put element top stack pop remove item top,5.0,5.0,5.0,1.0929634108524116,0.30631241525032016
12.7,What are the main operations associated with a stack?,push pop,push pop full isempty,4.5,5.0,4.75,0.44428233644573395,0.47205236733515954
12.7,What are the main operations associated with a stack?,push pop,pop push remove element insert element,5.0,5.0,5.0,0.864810244372597,0.5187265892992836
12.7,What are the main operations associated with a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
12.7,What are the main operations associated with a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
12.7,What are the main operations associated with a stack?,push pop,push add element top stack pop remove top element stack,5.0,5.0,5.0,1.0289800547300136,0.33742325024005076
12.7,What are the main operations associated with a stack?,push pop,push pop,5.0,5.0,5.0,0.0,1.0000000000000002
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,traverse tree size visit node three time order 3n n running time,5.0,3.0,4.0,0.8393377925070122,0.317212419185919
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,euler tour traversal tree begin root visit node tree left bottom right side,5.0,5.0,5.0,0.7301192000435134,0.27482869367005736
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,visit order according data value,2.5,3.0,2.75,1.2986639844946135,0.0
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,tree show function contains parent child sibling ancestor descendent use tree type algorithm also alternative sorting algorithm,0.0,3.75,1.875,1.175606079732503,0.06812145990220084
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,start root circle around tree naming node see,5.0,4.25,4.625,0.7469465108564377,0.26856679975278475
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,visit parent vistit child,0.0,3.0,1.5,1.3383836197058205,0.0
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,start root traveling left visiting ever child along way till return root right,4.0,4.25,4.125,0.896318904586576,0.18567981894695051
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,traversing tree terminal child sibling traverse terminal child parent sibling repeating first step sibling child root node visited,4.0,4.25,4.125,1.0663107068130628,0.07683496057656702
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,euler tour traversal tree function iteratively keep track pointer node,1.5,3.75,2.625,1.0589628304178536,0.0953241027326102
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,travel outside edge tree clockwise naming node,4.5,3.0,3.75,1.0274431405266007,0.0901328694729964
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,child root,0.0,3.75,1.875,1.198812522213193,0.18818222023365774
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,go bottom left sub tree visit parent child,2.0,3.75,2.875,1.0266540825378938,0.1129006999949997
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,euler tour traverse tree style shape,3.5,3.0,3.25,1.1649600791618977,0.05226783621375539
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,euler tour traversal tree specific way navigating tree involves following tree starting top moving along left side tree first cupping visit parent child node allows node visited left right bottom euler tour first progress left child one progress parent next child parent parent,5.0,3.75,4.375,0.9139656710322716,0.2137303338493148
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,run parent child order,2.5,3.0,2.75,1.2812560571614888,0.0
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,start node left root proceeds visit node left right order visit root proceeds repeat previous step right side tree,2.5,3.75,3.125,0.7237002540424428,0.2812733390650407
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,travel root farthest left child backup travel leftmost child right side repeat reaching rightmost child,3.5,5.0,4.25,1.000414611298324,0.10529741778071897
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,preorder order postorder tree preorder put parent node front child node order put parent node left child right child node postorder put parent node child node,2.5,3.75,3.125,1.013391526202682,0.16300350944717534
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,euler traveral go tree looking node put order left root right like inorder traversal,2.5,5.0,3.75,0.7173960938428496,0.22016261345777394
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,euler traversal traversal begin root travel around outside tree element tree visited 3 time left bottom right,5.0,5.0,5.0,0.7121667845325678,0.3207350876547946
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,euler tour traversal tree traverse branch straight one leaf start root repeat element traversed,4.0,3.75,3.875,1.0062979918198778,0.09090475426940858
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,euler tour visit every node tree starting root working around tree counterclockwise traversal seen variation euler tour traversal,4.0,4.5,4.25,0.766535367155625,0.3045501277464705
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,answered,0.0,0.0,0.0,1.3302082625095402,0.0
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,traverse going left go right last child back top kind like going around tree,5.0,4.5,4.75,0.8315751384280082,0.1974095719204011
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,recursively visit every node list visit node left bottom right,5.0,5.0,5.0,0.9263396041907725,0.18024832312656897
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,euler tour way traverse tree come contact node three time left right bottom,5.0,5.0,5.0,0.6229614380727451,0.3217391710738924
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,traversing tree level level,0.0,3.0,1.5,1.1773305475698939,0.058055368578815096
12.8,What is the Euler tour traversal of a tree?,walk around tree starting root node seen three time left right,euler traversal tree rubber band style shape,3.5,3.0,3.25,1.1859089614324865,0.04501530285742648
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,root set root null else deleting right leaf set rightptr parent node null else deleting left leaf set leftptr parent node null else deleting left right subtree child node set max leaf child left subtree new child node,4.5,4.0,4.25,0.9352979230782078,0.3173850515936764
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,traverse tree find node node child simply delete otherwise set node data equal data one child set pointer child null,3.0,3.75,3.375,1.0039014873142669,0.258653996973258
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,first attaching element node deleting alternate node deleting node delete node,3.0,3.75,3.375,0.8405659248728268,0.3092416554253618
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,delete node tree link node parent child node,2.5,3.75,3.125,0.85608549736752,0.36495108882790844
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,must delete information node contains free garbage collect also delete pointer node parent point node wish delete,0.5,3.0,1.75,1.0303525114949164,0.19101109162589044
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,replace node largest element left subtree replace smallest element right subtree,5.0,5.0,5.0,0.7133931369436985,0.6261680391080952
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,traverse tree till find node wanting delete node child delete node child delete find child attach root delete node,3.5,4.25,3.875,0.8578941280443216,0.2776245864498517
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,link left child parent left child pointer,3.5,5.0,4.25,1.1307998054331168,0.10784042584371631
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,way delete node binary search tree first take root see node coming root delete node set root null,0.0,3.75,1.875,1.0082200742229182,0.2127795107122919
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,remove element tree move next highest element left place,5.0,3.75,4.375,1.1218810366186112,0.05175761873292745
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,delete node,0.0,3.0,1.5,0.8205017912005363,0.2744305567718722
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,deletion node depends upon child avl binary search tree assuming avl tree node deleted child set pointer null left child right child exclusively child replaces deleted node two child left child right sub tree right child left subtree replace,5.0,5.0,5.0,0.9117197624147289,0.2764947068662256
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,node leaf set parent pointer null delete single child set parent pointer child delete two child set node one middle child remove child previous position leaf rightmost child left subtree leftmost child right subtree,5.0,5.0,5.0,1.036437005490916,0.3194678220426922
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,binary search tree must first establish proper replacement node delete usually child soon deleted node replacement node found simply reassign node going deleted deleted node usurped remove deleted node memory may used,4.0,3.75,3.875,0.9526181537634646,0.22967523284612715
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,depends node located child deleted node inside tree must replaced another node work place,3.0,3.75,3.375,0.948390828544069,0.2537754988797858
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,node child delete right away otherwise put either furthest right node left side furthest left node right side place perform node guarantee child get handled properly,5.0,5.0,5.0,0.8278820829654594,0.31262653800531764
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,create temp node set temp value node head null case head node list set head equal temp delete temp,0.0,3.75,1.875,1.083240206216936,0.147948077380472
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,searching tree find node replacing link node greatest child node left subtree least child node right subtree,5.0,4.25,4.625,0.6486774036541166,0.5996755947844207
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,set node null point anything use delete opertator clear space memory,0.0,3.0,1.5,1.1141542792621166,0.09885316386263084
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,must first traverse tree find appropriate value must make sure node leaf node delete pointer specific node,1.5,3.75,2.625,0.9514803435215358,0.2891639648491288
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,node leaf set parent pointer null node tree must replace node one tree either largest left tree smallest right tree done recursively needed,5.0,5.0,5.0,0.927218094603862,0.3250074522911641
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,node leaf simply memory parent reference changed null node single child pointer made point child deleting node node two child easiest solution may copy node entire subtree new array tree delete node descendant add element taken subtree back main tree,4.0,4.5,4.25,1.053795450813855,0.4203247983787935
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,answered,0.0,0.0,0.0,1.3520552052932642,0.0
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,delete node cause node 2 child,0.0,2.5,1.25,0.8600670550345411,0.3097289926991154
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,search tree node using recursion find node determine whether leaf internal node leaf delete set parent pointer node null node replace node either child node,3.5,3.75,3.625,0.7905471293380686,0.4658895081439973
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,delete node would link child node connected node deleted remaining node tree way node right parent node larger parent node left parent node smaller,3.0,5.0,4.0,0.7364973005746046,0.43859119752412706
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,child delete one child replace node whichever child child replace one child send child along side new node,3.5,3.75,3.625,0.9869247829271456,0.21016940464314676
12.9,How do you delete a node from a binary search tree?,find node replace leftmost node right subtree rightmost node left subtree,pointer child delete 2 child set node child delete node th middle take place,2.0,3.75,2.875,1.0924574920272074,0.15824155030435355
12.11,How many steps does it take to search a node in a binary search tree?,height tree,log n n number node,4.5,5.0,4.75,1.3148990576753938,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,log n step,4.5,5.0,4.75,1.3375526630635715,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,number level height tree,5.0,5.0,5.0,0.6244008259031346,0.6526244365054692
12.11,How many steps does it take to search a node in a binary search tree?,height tree,height tree,5.0,5.0,5.0,0.0,1.0000000000000002
12.11,How many steps does it take to search a node in a binary search tree?,height tree,given n element would take step find search criterion,0.0,3.0,1.5,1.3552952834738738,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,log n,4.5,5.0,4.75,1.3129930070241347,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,depends location node looking root one step else smaller current node go left larger current node go right,0.0,3.75,1.875,1.3097873401046838,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,n level binary tree,0.0,3.75,1.875,0.9805834377013478,0.2464706272015818
12.11,How many steps does it take to search a node in a binary search tree?,height tree,number step search node function,2.5,4.0,3.25,1.3287561505529852,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,would take element given n,0.0,3.0,1.5,1.3623946642116977,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,log n,4.5,5.0,4.75,1.3129930070241347,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,log n,4.5,5.0,4.75,1.3129930070241347,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,log n,4.5,5.0,4.75,1.3129930070241347,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,binary search tree constructed efficiently best case scenario log n time n number item tree binary search tree constructed poorly instance root tree 1 progressing downwards right child last linear linked list worse case scenario would full traversal n time n number item tree,5.0,5.0,5.0,1.1782072331997655,0.24084670627991828
12.11,How many steps does it take to search a node in a binary search tree?,height tree,n n number node,2.5,5.0,3.75,1.3394808343919464,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,depending way tree ordered could anywhere log n n step,5.0,5.0,5.0,1.2016765516726136,0.13440709159740544
12.11,How many steps does it take to search a node in a binary search tree?,height tree,log n,4.5,5.0,4.75,1.3129930070241347,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,worst case scenario number level tree ie node farthest position root node best case 1 step root node,5.0,5.0,5.0,1.228748574442696,0.08564905971170376
12.11,How many steps does it take to search a node in a binary search tree?,height tree,3 step 3 case,0.0,3.0,1.5,1.366152589326964,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,log n n equal total number node tree,4.5,5.0,4.75,1.1397419621914284,0.17084460512473468
12.11,How many steps does it take to search a node in a binary search tree?,height tree,number step number level generation tree,5.0,5.0,5.0,1.0829851684797123,0.15459731690617093
12.11,How many steps does it take to search a node in a binary search tree?,height tree,find node binary search tree take number step level tree,5.0,5.0,5.0,1.0552013430784348,0.27189594073263673
12.11,How many steps does it take to search a node in a binary search tree?,height tree,three step visit root node go right subtree visiting right subtree visit left subtree,0.0,4.5,2.25,1.3347195600380715,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,log n,4.5,5.0,4.75,1.3129930070241347,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,n 2,0.0,3.0,1.5,1.3887698788847085,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,,0.0,4.75,2.375,inf,0.0
12.11,How many steps does it take to search a node in a binary search tree?,height tree,take h step h height tree,5.0,5.0,5.0,0.9026510268137943,0.6563877936734778
12.11,How many steps does it take to search a node in a binary search tree?,height tree,depends install search tree whatever case repeat back along case primary node,0.0,3.0,1.5,1.2372251764196174,0.09844787234358597
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,join two string using operator python strcat c,5.0,5.0,5.0,0.7227887702225335,0.48742358852954704
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,concatenation mean joining two string using function like strcat,4.0,4.0,4.0,0.7757540985212473,0.41336084027709535
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,use python strcat c merge two string,5.0,5.0,5.0,0.8936294753777302,0.3697140856028576
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,string joined using strcat c javascript,4.0,4.0,4.0,0.845351088863063,0.4370801227821332
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,adding two string together called concatenation,4.0,4.0,4.0,1.1747687582560675,0.06830685936705644
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,c strcat join two string python us,4.0,4.0,4.0,0.9520023884139521,0.3292870586506652
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,concatenate use operator python,5.0,4.0,4.5,0.96388735299004,0.26133089356712075
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,strcat used c javascript joining string,5.0,5.0,5.0,0.9160803846643306,0.36804960569418743
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,string concatenation mean putting two string together,4.0,4.5,4.25,1.149576118455267,0.1133732719291588
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,name,4.5,4.0,4.25,1.352280775001378,0.0
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,use strcat c python append string,5.0,4.5,4.75,0.8733819993825928,0.36061234697218636
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,concatenation mean merging two text value one,4.0,5.0,4.5,1.2039192662746088,0.0
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,use append string joining,4.0,4.0,4.0,1.1265723392149296,0.07348860104698052
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,strcat c used appending two character array,5.0,5.0,5.0,1.1048375895639966,0.14245398649185131
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,string joined strcat,4.0,4.5,4.25,1.2628784669349942,0.2581478414354612
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,string merging done using java python,5.0,4.5,4.75,0.9275775348728537,0.2555843959055784
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,join method python help concatenation,4.5,5.0,4.75,1.1395797214925236,0.12622634327679327
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,string addition commonly done using,5.0,4.0,4.5,1.0655591306908851,0.1313921587267744
13.1,How do you concatenate two strings?,string concatenated using function like strcat c operator language like python javascript,java concat used append string,4.0,5.0,4.5,1.102745661777612,0.06112180520683127
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,accessing invalid index cause error undefined behavior,5.0,5.0,5.0,0.5016726054525413,0.7030878082450069
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,try access index program may crash,5.0,4.5,4.75,1.1141114780940946,0.09097132511600524
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,language throw error others may return garbage value,5.0,5.0,5.0,1.039755861148089,0.19127636525235564
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,access lead segmentation fault,5.0,5.0,5.0,1.2202507548319308,0.0
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,python raise indexerror accessing invalid index,5.0,5.0,5.0,0.9259531467927766,0.3234630844394995
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,c accessing invalid index may return garbage value crash program,5.0,5.0,5.0,0.8823494907258511,0.30409257491803615
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,cause runtime error programming language,5.0,4.0,4.5,0.8825534557981768,0.37193249644848847
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,accessing index lead memory corruption,4.0,5.0,4.5,1.04408478637109,0.23827103147811568
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,java throw arrayindexoutofboundsexception index range,5.0,5.0,5.0,1.1864888497974833,0.08298787342474487
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,array index accessed incorrectly output unpredictable,5.0,4.5,4.75,1.0921585647114889,0.09545885647508077
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,language like c accessing invalid index might give error immediately,5.0,4.5,4.75,0.6507031188354646,0.4705535906779038
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,python allow accessing element beyond array size throw error,4.5,4.5,4.5,1.0352000499587204,0.22096038491264386
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,access index result depends programming language,4.5,5.0,4.75,0.6945416203789146,0.48691675813555824
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,language check bound prevent invalid access others,4.5,5.0,4.75,0.9855215084008399,0.2058117171963575
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,access lead security vulnerability,5.0,5.0,5.0,1.257731298532607,0.0
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,trying access index outside range result undefined behavior c,4.0,4.0,4.0,0.7494251863173902,0.4081846540410239
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,programming language allow silent memory access error,4.0,4.5,4.25,0.8642622027170842,0.3440711646062692
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,index high lead array access violation,4.5,4.0,4.25,1.1081509219269288,0.08836574293286562
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,index bound error help catch programming mistake early,4.5,4.0,4.25,0.9120754350350818,0.24374836288592566
13.2,What happens if you access an index outside the array’s range?,accessing invalid index result error undefined behavior depending programming language,index negative large program might fail,4.0,4.0,4.0,1.1483755823008723,0.08549686967447888
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,array provide fast access element using indexing,5.0,5.0,5.0,0.7708035213460577,0.3028460799939581
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,store element contiguous memory improves cache performance,5.0,5.0,5.0,0.9495098745253482,0.20420434654549935
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,array make easy iterate element using loop,4.5,4.5,4.5,0.9751430660836846,0.06430615924900844
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,allow storing multiple value type organized way,4.0,4.5,4.25,1.1395043149932111,0.08465948024812313
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,using array reduces overhead managing multiple variable,5.0,5.0,5.0,0.9730699150220034,0.14941034965436267
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,array support efficient searching sorting algorithm,5.0,4.5,4.75,1.059181142994062,0.16295759977603502
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,memory allocation array predictable sequential,4.5,5.0,4.75,1.0574789854963176,0.07832989883863364
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,allow random access element 1 time,5.0,4.0,4.5,0.951668334385139,0.29412172858996327
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,array provide simple way store retrieve large amount data,4.0,4.0,4.0,1.1221124315475566,0.025402379990224894
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,easy implement use compared linked list,5.0,4.0,4.5,1.1220996822926304,0.08953188539393722
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,array help implementing data structure like stack queue,4.0,5.0,4.5,1.1402508861905591,0.030734095710353432
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,use array minimizes need dynamic memory allocation,4.5,5.0,4.75,0.8852035388417325,0.14958869693955384
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,array le memory overhead compared linked list,4.0,4.5,4.25,0.9871166099034797,0.2455996873547143
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,allow efficient traversal using loop recursion,5.0,4.5,4.75,0.8901400770337704,0.38401820819201465
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,array use le memory per element compared linked list,4.0,4.5,4.25,0.8694920651174624,0.20154743337624653
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,enable easy implementation mathematical operation datasets,5.0,5.0,5.0,1.191328986631474,0.0
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,array useful implementing matrix 2d data structure,5.0,4.0,4.5,1.1426814721672975,0.0250318380271688
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,indexing system make accessing element straightforward,5.0,4.0,4.5,1.1014302077859326,0.028519593714500257
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,array used efficiently store process large datasets,5.0,4.0,4.5,1.093145015710737,0.027436887257226438
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,sorting algorithm like quicksort mergesort work efficiently array,4.0,4.0,4.0,1.1335775981139344,0.023920262400317818
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,array enable efficient memory management embedded system,5.0,4.0,4.5,0.8957512301548448,0.17917532679310733
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,help optimize performance computational task,5.0,5.0,5.0,1.2051463386603722,0.0
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,array reduce complexity handling multiple related variable,5.0,5.0,5.0,1.0448919596250092,0.14363663155688655
13.3,What are the advantages of using an array?,array allow efficient access element reduce overhead use contiguous memory fast traversal,make easy apply batch processing data,4.0,4.0,4.0,1.2145621291883562,0.0
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,anagram two word letter different order check sorting comparing,,,,0.5070522730168773,0.6788818672286022
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,two string anagram contain letter arranged differently sorting help verify,,,,0.6531289756449649,0.4366734443652939
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,anagram mean two word identical letter shuffled sort compare check,,,,0.8431763785455174,0.27902526423959506
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,two word use letter different way anagram sort compare,,,,0.8544007748803811,0.3372338418519953
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,anagram letter different order sorting one way check,,,,0.6743027358157518,0.5792290484416796
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,anagram letter one word rearranged form another check using sorting counting,,,,0.8932842164684643,0.31333713698476184
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,two string anagram letter count match sorting using frequency array help confirm,,,,0.8217194323766605,0.3362926195674553
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,anagram consists word character sorting comparing determines anagram,,,,0.7549242074716944,0.547269830402811
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,word letter rearranged form another word anagram check sorting comparing,,,,0.8197213517623299,0.3768204409322262
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,anagram word formed rearranging another word letter sorting help verify,,,,1.0250342074522911,0.20209630628076616
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,two word anagram identical character different order sorting comparing work,,,,0.5052968325458413,0.5927864820642278
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,anagram occurs two string share letter checking character count sorting confirms,,,,0.6980602806830104,0.38269425652356676
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,anagram two word formed letter sort use frequency count check,,,,0.9265073600472329,0.2847879191173003
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,anagram word rearranged form another sorting checking work,,,,0.9575625041854612,0.2655670646479787
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,two word anagram rearranging one result sorting comparing help,,,,0.794956510277632,0.40480745584879385
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,word anagram another word letter check sorting word,,,,0.9234911404815345,0.27533256149507196
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,anagram mean two word contain letter checking frequency letter sorting confirms,,,,0.8051882547989944,0.30730256057569655
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,anagram identical character different order sorting comparing prof,,,,0.5802948663657858,0.5597236513015497
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,anagram consists word made letter sorting make checking easy,,,,0.9701063925232571,0.24809696522158234
13.4,What is an anagram? How do you check if two strings are anagrams?,anagram two string contain character different order sorting string comparing check anagram,letter two word rearranged match anagram sorting confirm,,,,0.8865594880904868,0.2912457478069648
